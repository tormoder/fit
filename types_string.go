// Code generated by the cmd/fitgen/internal/fitstringer package; DO NOT EDIT.

// fit types: [ActivityClass ActivityLevel ActivityMode ActivitySubtype ActivityType AnalogWatchfaceLayout AntNetwork AntplusDeviceType AttitudeStage AttitudeValidity AutoActivityDetect AutoSyncFrequency AutolapTrigger Autoscroll BacklightMode BacklightTimeout BatteryStatus BenchPressExerciseName BikeLightBeamAngleMode BikeLightNetworkConfigType BodyLocation BpStatus CalfRaiseExerciseName CameraEventType CameraOrientationType CardioExerciseName CarryExerciseName Checksum ChopExerciseName ClimbProEvent CommTimeoutType ConnectivityCapabilities CoreExerciseName CourseCapabilities CoursePoint CrunchExerciseName CurlExerciseName DateMode DayOfWeek DeadliftExerciseName DeviceIndex DigitalWatchfaceLayout DisplayHeart DisplayMeasure DisplayOrientation DisplayPosition DisplayPower DiveAlarmType DiveBacklightMode DiveGasStatus Event EventType ExdDataUnits ExdDescriptors ExdDisplayType ExdLayout ExdQualifiers ExerciseCategory FaveroProduct FileFlags FileType FitBaseType FitBaseUnit FitnessEquipmentState FlyeExerciseName GarminProduct Gender Goal GoalRecurrence GoalSource HipRaiseExerciseName HipStabilityExerciseName HipSwingExerciseName HrType HrZoneCalc HyperextensionExerciseName Intensity Language LanguageBits0 LanguageBits1 LanguageBits2 LanguageBits3 LanguageBits4 LapTrigger LateralRaiseExerciseName LeftRightBalance LeftRightBalance100 LegCurlExerciseName LegRaiseExerciseName LengthType LocalDeviceType LocaltimeIntoDay LungeExerciseName Manufacturer MesgCount MesgNum MessageIndex OlympicLiftExerciseName PlankExerciseName PlyoExerciseName PowerPhaseType PullUpExerciseName PushUpExerciseName PwrZoneCalc RadarThreatLevelType RiderPositionType RowExerciseName RunExerciseName Schedule SegmentDeleteStatus SegmentLapStatus SegmentLeaderboardType SegmentSelectionType SensorType SessionTrigger SetType ShoulderPressExerciseName ShoulderStabilityExerciseName ShrugExerciseName Side SitUpExerciseName SourceType Sport SportBits0 SportBits1 SportBits2 SportBits3 SportBits4 SportBits5 SportBits6 SportEvent SquatExerciseName StrokeType SubSport SupportedExdScreenLayouts SwimStroke Switch TapSensitivity TimeIntoDay TimeMode TimeZone TimerTrigger TissueModelType Tone TotalBodyExerciseName TricepsExtensionExerciseName TurnType UserLocalId WarmUpExerciseName WatchfaceMode WaterType WeatherReport WeatherSevereType WeatherSeverity WeatherStatus Weight WktStepDuration WktStepTarget WorkoutCapabilities WorkoutEquipment WorkoutHr WorkoutPower]

//lint:file-ignore SA4003 Ignore checks of unsigned types >= 0. stringer generates these.

package fit

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActivityClassLevel-127]
	_ = x[ActivityClassLevelMax-100]
	_ = x[ActivityClassAthlete-128]
	_ = x[ActivityClassInvalid-255]
}

const (
	_ActivityClass_name_0 = "LevelMax"
	_ActivityClass_name_1 = "LevelAthlete"
	_ActivityClass_name_2 = "Invalid"
)

var (
	_ActivityClass_index_1 = [...]uint8{0, 5, 12}
)

func (i ActivityClass) String() string {
	switch {
	case i == 100:
		return _ActivityClass_name_0
	case 127 <= i && i <= 128:
		i -= 127
		return _ActivityClass_name_1[_ActivityClass_index_1[i]:_ActivityClass_index_1[i+1]]
	case i == 255:
		return _ActivityClass_name_2
	default:
		return "ActivityClass(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActivityLevelLow-0]
	_ = x[ActivityLevelMedium-1]
	_ = x[ActivityLevelHigh-2]
	_ = x[ActivityLevelInvalid-255]
}

const (
	_ActivityLevel_name_0 = "LowMediumHigh"
	_ActivityLevel_name_1 = "Invalid"
)

var (
	_ActivityLevel_index_0 = [...]uint8{0, 3, 9, 13}
)

func (i ActivityLevel) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _ActivityLevel_name_0[_ActivityLevel_index_0[i]:_ActivityLevel_index_0[i+1]]
	case i == 255:
		return _ActivityLevel_name_1
	default:
		return "ActivityLevel(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActivityModeManual-0]
	_ = x[ActivityModeAutoMultiSport-1]
	_ = x[ActivityModeInvalid-255]
}

const (
	_ActivityMode_name_0 = "ManualAutoMultiSport"
	_ActivityMode_name_1 = "Invalid"
)

var (
	_ActivityMode_index_0 = [...]uint8{0, 6, 20}
)

func (i ActivityMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _ActivityMode_name_0[_ActivityMode_index_0[i]:_ActivityMode_index_0[i+1]]
	case i == 255:
		return _ActivityMode_name_1
	default:
		return "ActivityMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActivitySubtypeGeneric-0]
	_ = x[ActivitySubtypeTreadmill-1]
	_ = x[ActivitySubtypeStreet-2]
	_ = x[ActivitySubtypeTrail-3]
	_ = x[ActivitySubtypeTrack-4]
	_ = x[ActivitySubtypeSpin-5]
	_ = x[ActivitySubtypeIndoorCycling-6]
	_ = x[ActivitySubtypeRoad-7]
	_ = x[ActivitySubtypeMountain-8]
	_ = x[ActivitySubtypeDownhill-9]
	_ = x[ActivitySubtypeRecumbent-10]
	_ = x[ActivitySubtypeCyclocross-11]
	_ = x[ActivitySubtypeHandCycling-12]
	_ = x[ActivitySubtypeTrackCycling-13]
	_ = x[ActivitySubtypeIndoorRowing-14]
	_ = x[ActivitySubtypeElliptical-15]
	_ = x[ActivitySubtypeStairClimbing-16]
	_ = x[ActivitySubtypeLapSwimming-17]
	_ = x[ActivitySubtypeOpenWater-18]
	_ = x[ActivitySubtypeAll-254]
	_ = x[ActivitySubtypeInvalid-255]
}

const (
	_ActivitySubtype_name_0 = "GenericTreadmillStreetTrailTrackSpinIndoorCyclingRoadMountainDownhillRecumbentCyclocrossHandCyclingTrackCyclingIndoorRowingEllipticalStairClimbingLapSwimmingOpenWater"
	_ActivitySubtype_name_1 = "AllInvalid"
)

var (
	_ActivitySubtype_index_0 = [...]uint8{0, 7, 16, 22, 27, 32, 36, 49, 53, 61, 69, 78, 88, 99, 111, 123, 133, 146, 157, 166}
	_ActivitySubtype_index_1 = [...]uint8{0, 3, 10}
)

func (i ActivitySubtype) String() string {
	switch {
	case 0 <= i && i <= 18:
		return _ActivitySubtype_name_0[_ActivitySubtype_index_0[i]:_ActivitySubtype_index_0[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _ActivitySubtype_name_1[_ActivitySubtype_index_1[i]:_ActivitySubtype_index_1[i+1]]
	default:
		return "ActivitySubtype(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ActivityTypeGeneric-0]
	_ = x[ActivityTypeRunning-1]
	_ = x[ActivityTypeCycling-2]
	_ = x[ActivityTypeTransition-3]
	_ = x[ActivityTypeFitnessEquipment-4]
	_ = x[ActivityTypeSwimming-5]
	_ = x[ActivityTypeWalking-6]
	_ = x[ActivityTypeSedentary-8]
	_ = x[ActivityTypeAll-254]
	_ = x[ActivityTypeInvalid-255]
}

const (
	_ActivityType_name_0 = "GenericRunningCyclingTransitionFitnessEquipmentSwimmingWalking"
	_ActivityType_name_1 = "Sedentary"
	_ActivityType_name_2 = "AllInvalid"
)

var (
	_ActivityType_index_0 = [...]uint8{0, 7, 14, 21, 31, 47, 55, 62}
	_ActivityType_index_2 = [...]uint8{0, 3, 10}
)

func (i ActivityType) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _ActivityType_name_0[_ActivityType_index_0[i]:_ActivityType_index_0[i+1]]
	case i == 8:
		return _ActivityType_name_1
	case 254 <= i && i <= 255:
		i -= 254
		return _ActivityType_name_2[_ActivityType_index_2[i]:_ActivityType_index_2[i+1]]
	default:
		return "ActivityType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AnalogWatchfaceLayoutMinimal-0]
	_ = x[AnalogWatchfaceLayoutTraditional-1]
	_ = x[AnalogWatchfaceLayoutModern-2]
	_ = x[AnalogWatchfaceLayoutInvalid-255]
}

const (
	_AnalogWatchfaceLayout_name_0 = "MinimalTraditionalModern"
	_AnalogWatchfaceLayout_name_1 = "Invalid"
)

var (
	_AnalogWatchfaceLayout_index_0 = [...]uint8{0, 7, 18, 24}
)

func (i AnalogWatchfaceLayout) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _AnalogWatchfaceLayout_name_0[_AnalogWatchfaceLayout_index_0[i]:_AnalogWatchfaceLayout_index_0[i+1]]
	case i == 255:
		return _AnalogWatchfaceLayout_name_1
	default:
		return "AnalogWatchfaceLayout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AntNetworkPublic-0]
	_ = x[AntNetworkAntplus-1]
	_ = x[AntNetworkAntfs-2]
	_ = x[AntNetworkPrivate-3]
	_ = x[AntNetworkInvalid-255]
}

const (
	_AntNetwork_name_0 = "PublicAntplusAntfsPrivate"
	_AntNetwork_name_1 = "Invalid"
)

var (
	_AntNetwork_index_0 = [...]uint8{0, 6, 13, 18, 25}
)

func (i AntNetwork) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _AntNetwork_name_0[_AntNetwork_index_0[i]:_AntNetwork_index_0[i+1]]
	case i == 255:
		return _AntNetwork_name_1
	default:
		return "AntNetwork(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AntplusDeviceTypeAntfs-1]
	_ = x[AntplusDeviceTypeBikePower-11]
	_ = x[AntplusDeviceTypeEnvironmentSensorLegacy-12]
	_ = x[AntplusDeviceTypeMultiSportSpeedDistance-15]
	_ = x[AntplusDeviceTypeControl-16]
	_ = x[AntplusDeviceTypeFitnessEquipment-17]
	_ = x[AntplusDeviceTypeBloodPressure-18]
	_ = x[AntplusDeviceTypeGeocacheNode-19]
	_ = x[AntplusDeviceTypeLightElectricVehicle-20]
	_ = x[AntplusDeviceTypeEnvSensor-25]
	_ = x[AntplusDeviceTypeRacquet-26]
	_ = x[AntplusDeviceTypeControlHub-27]
	_ = x[AntplusDeviceTypeMuscleOxygen-31]
	_ = x[AntplusDeviceTypeShifting-34]
	_ = x[AntplusDeviceTypeBikeLightMain-35]
	_ = x[AntplusDeviceTypeBikeLightShared-36]
	_ = x[AntplusDeviceTypeExd-38]
	_ = x[AntplusDeviceTypeBikeRadar-40]
	_ = x[AntplusDeviceTypeBikeAero-46]
	_ = x[AntplusDeviceTypeWeightScale-119]
	_ = x[AntplusDeviceTypeHeartRate-120]
	_ = x[AntplusDeviceTypeBikeSpeedCadence-121]
	_ = x[AntplusDeviceTypeBikeCadence-122]
	_ = x[AntplusDeviceTypeBikeSpeed-123]
	_ = x[AntplusDeviceTypeStrideSpeedDistance-124]
	_ = x[AntplusDeviceTypeInvalid-255]
}

const _AntplusDeviceType_name = "AntfsBikePowerEnvironmentSensorLegacyMultiSportSpeedDistanceControlFitnessEquipmentBloodPressureGeocacheNodeLightElectricVehicleEnvSensorRacquetControlHubMuscleOxygenShiftingBikeLightMainBikeLightSharedExdBikeRadarBikeAeroWeightScaleHeartRateBikeSpeedCadenceBikeCadenceBikeSpeedStrideSpeedDistanceInvalid"

var _AntplusDeviceType_map = map[AntplusDeviceType]string{
	1:   _AntplusDeviceType_name[0:5],
	11:  _AntplusDeviceType_name[5:14],
	12:  _AntplusDeviceType_name[14:37],
	15:  _AntplusDeviceType_name[37:60],
	16:  _AntplusDeviceType_name[60:67],
	17:  _AntplusDeviceType_name[67:83],
	18:  _AntplusDeviceType_name[83:96],
	19:  _AntplusDeviceType_name[96:108],
	20:  _AntplusDeviceType_name[108:128],
	25:  _AntplusDeviceType_name[128:137],
	26:  _AntplusDeviceType_name[137:144],
	27:  _AntplusDeviceType_name[144:154],
	31:  _AntplusDeviceType_name[154:166],
	34:  _AntplusDeviceType_name[166:174],
	35:  _AntplusDeviceType_name[174:187],
	36:  _AntplusDeviceType_name[187:202],
	38:  _AntplusDeviceType_name[202:205],
	40:  _AntplusDeviceType_name[205:214],
	46:  _AntplusDeviceType_name[214:222],
	119: _AntplusDeviceType_name[222:233],
	120: _AntplusDeviceType_name[233:242],
	121: _AntplusDeviceType_name[242:258],
	122: _AntplusDeviceType_name[258:269],
	123: _AntplusDeviceType_name[269:278],
	124: _AntplusDeviceType_name[278:297],
	255: _AntplusDeviceType_name[297:304],
}

func (i AntplusDeviceType) String() string {
	if str, ok := _AntplusDeviceType_map[i]; ok {
		return str
	}
	return "AntplusDeviceType(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttitudeStageFailed-0]
	_ = x[AttitudeStageAligning-1]
	_ = x[AttitudeStageDegraded-2]
	_ = x[AttitudeStageValid-3]
	_ = x[AttitudeStageInvalid-255]
}

const (
	_AttitudeStage_name_0 = "FailedAligningDegradedValid"
	_AttitudeStage_name_1 = "Invalid"
)

var (
	_AttitudeStage_index_0 = [...]uint8{0, 6, 14, 22, 27}
)

func (i AttitudeStage) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _AttitudeStage_name_0[_AttitudeStage_index_0[i]:_AttitudeStage_index_0[i+1]]
	case i == 255:
		return _AttitudeStage_name_1
	default:
		return "AttitudeStage(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AttitudeValidityTrackAngleHeadingValid-1]
	_ = x[AttitudeValidityPitchValid-2]
	_ = x[AttitudeValidityRollValid-4]
	_ = x[AttitudeValidityLateralBodyAccelValid-8]
	_ = x[AttitudeValidityNormalBodyAccelValid-16]
	_ = x[AttitudeValidityTurnRateValid-32]
	_ = x[AttitudeValidityHwFail-64]
	_ = x[AttitudeValidityMagInvalid-128]
	_ = x[AttitudeValidityNoGps-256]
	_ = x[AttitudeValidityGpsInvalid-512]
	_ = x[AttitudeValiditySolutionCoasting-1024]
	_ = x[AttitudeValidityTrueTrackAngle-2048]
	_ = x[AttitudeValidityMagneticHeading-4096]
	_ = x[AttitudeValidityInvalid-65535]
}

const _AttitudeValidity_name = "TrackAngleHeadingValidPitchValidRollValidLateralBodyAccelValidNormalBodyAccelValidTurnRateValidHwFailMagInvalidNoGpsGpsInvalidSolutionCoastingTrueTrackAngleMagneticHeadingInvalid"

var _AttitudeValidity_map = map[AttitudeValidity]string{
	1:     _AttitudeValidity_name[0:22],
	2:     _AttitudeValidity_name[22:32],
	4:     _AttitudeValidity_name[32:41],
	8:     _AttitudeValidity_name[41:62],
	16:    _AttitudeValidity_name[62:82],
	32:    _AttitudeValidity_name[82:95],
	64:    _AttitudeValidity_name[95:101],
	128:   _AttitudeValidity_name[101:111],
	256:   _AttitudeValidity_name[111:116],
	512:   _AttitudeValidity_name[116:126],
	1024:  _AttitudeValidity_name[126:142],
	2048:  _AttitudeValidity_name[142:156],
	4096:  _AttitudeValidity_name[156:171],
	65535: _AttitudeValidity_name[171:178],
}

func (i AttitudeValidity) String() string {
	if str, ok := _AttitudeValidity_map[i]; ok {
		return str
	}
	return "AttitudeValidity(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AutoActivityDetectNone-0]
	_ = x[AutoActivityDetectRunning-1]
	_ = x[AutoActivityDetectCycling-2]
	_ = x[AutoActivityDetectSwimming-4]
	_ = x[AutoActivityDetectWalking-8]
	_ = x[AutoActivityDetectElliptical-32]
	_ = x[AutoActivityDetectSedentary-1024]
	_ = x[AutoActivityDetectInvalid-4294967295]
}

const (
	_AutoActivityDetect_name_0 = "NoneRunningCycling"
	_AutoActivityDetect_name_1 = "Swimming"
	_AutoActivityDetect_name_2 = "Walking"
	_AutoActivityDetect_name_3 = "Elliptical"
	_AutoActivityDetect_name_4 = "Sedentary"
	_AutoActivityDetect_name_5 = "Invalid"
)

var (
	_AutoActivityDetect_index_0 = [...]uint8{0, 4, 11, 18}
)

func (i AutoActivityDetect) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _AutoActivityDetect_name_0[_AutoActivityDetect_index_0[i]:_AutoActivityDetect_index_0[i+1]]
	case i == 4:
		return _AutoActivityDetect_name_1
	case i == 8:
		return _AutoActivityDetect_name_2
	case i == 32:
		return _AutoActivityDetect_name_3
	case i == 1024:
		return _AutoActivityDetect_name_4
	case i == 4294967295:
		return _AutoActivityDetect_name_5
	default:
		return "AutoActivityDetect(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AutoSyncFrequencyNever-0]
	_ = x[AutoSyncFrequencyOccasionally-1]
	_ = x[AutoSyncFrequencyFrequent-2]
	_ = x[AutoSyncFrequencyOnceADay-3]
	_ = x[AutoSyncFrequencyRemote-4]
	_ = x[AutoSyncFrequencyInvalid-255]
}

const (
	_AutoSyncFrequency_name_0 = "NeverOccasionallyFrequentOnceADayRemote"
	_AutoSyncFrequency_name_1 = "Invalid"
)

var (
	_AutoSyncFrequency_index_0 = [...]uint8{0, 5, 17, 25, 33, 39}
)

func (i AutoSyncFrequency) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _AutoSyncFrequency_name_0[_AutoSyncFrequency_index_0[i]:_AutoSyncFrequency_index_0[i+1]]
	case i == 255:
		return _AutoSyncFrequency_name_1
	default:
		return "AutoSyncFrequency(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AutolapTriggerTime-0]
	_ = x[AutolapTriggerDistance-1]
	_ = x[AutolapTriggerPositionStart-2]
	_ = x[AutolapTriggerPositionLap-3]
	_ = x[AutolapTriggerPositionWaypoint-4]
	_ = x[AutolapTriggerPositionMarked-5]
	_ = x[AutolapTriggerOff-6]
	_ = x[AutolapTriggerInvalid-255]
}

const (
	_AutolapTrigger_name_0 = "TimeDistancePositionStartPositionLapPositionWaypointPositionMarkedOff"
	_AutolapTrigger_name_1 = "Invalid"
)

var (
	_AutolapTrigger_index_0 = [...]uint8{0, 4, 12, 25, 36, 52, 66, 69}
)

func (i AutolapTrigger) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _AutolapTrigger_name_0[_AutolapTrigger_index_0[i]:_AutolapTrigger_index_0[i+1]]
	case i == 255:
		return _AutolapTrigger_name_1
	default:
		return "AutolapTrigger(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AutoscrollNone-0]
	_ = x[AutoscrollSlow-1]
	_ = x[AutoscrollMedium-2]
	_ = x[AutoscrollFast-3]
	_ = x[AutoscrollInvalid-255]
}

const (
	_Autoscroll_name_0 = "NoneSlowMediumFast"
	_Autoscroll_name_1 = "Invalid"
)

var (
	_Autoscroll_index_0 = [...]uint8{0, 4, 8, 14, 18}
)

func (i Autoscroll) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _Autoscroll_name_0[_Autoscroll_index_0[i]:_Autoscroll_index_0[i+1]]
	case i == 255:
		return _Autoscroll_name_1
	default:
		return "Autoscroll(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BacklightModeOff-0]
	_ = x[BacklightModeManual-1]
	_ = x[BacklightModeKeyAndMessages-2]
	_ = x[BacklightModeAutoBrightness-3]
	_ = x[BacklightModeSmartNotifications-4]
	_ = x[BacklightModeKeyAndMessagesNight-5]
	_ = x[BacklightModeKeyAndMessagesAndSmartNotifications-6]
	_ = x[BacklightModeInvalid-255]
}

const (
	_BacklightMode_name_0 = "OffManualKeyAndMessagesAutoBrightnessSmartNotificationsKeyAndMessagesNightKeyAndMessagesAndSmartNotifications"
	_BacklightMode_name_1 = "Invalid"
)

var (
	_BacklightMode_index_0 = [...]uint8{0, 3, 9, 23, 37, 55, 74, 109}
)

func (i BacklightMode) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _BacklightMode_name_0[_BacklightMode_index_0[i]:_BacklightMode_index_0[i+1]]
	case i == 255:
		return _BacklightMode_name_1
	default:
		return "BacklightMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BacklightTimeoutInfinite-0]
	_ = x[BacklightTimeoutInvalid-255]
}

const (
	_BacklightTimeout_name_0 = "Infinite"
	_BacklightTimeout_name_1 = "Invalid"
)

func (i BacklightTimeout) String() string {
	switch {
	case i == 0:
		return _BacklightTimeout_name_0
	case i == 255:
		return _BacklightTimeout_name_1
	default:
		return "BacklightTimeout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BatteryStatusNew-1]
	_ = x[BatteryStatusGood-2]
	_ = x[BatteryStatusOk-3]
	_ = x[BatteryStatusLow-4]
	_ = x[BatteryStatusCritical-5]
	_ = x[BatteryStatusCharging-6]
	_ = x[BatteryStatusUnknown-7]
	_ = x[BatteryStatusInvalid-255]
}

const (
	_BatteryStatus_name_0 = "NewGoodOkLowCriticalChargingUnknown"
	_BatteryStatus_name_1 = "Invalid"
)

var (
	_BatteryStatus_index_0 = [...]uint8{0, 3, 7, 9, 12, 20, 28, 35}
)

func (i BatteryStatus) String() string {
	switch {
	case 1 <= i && i <= 7:
		i -= 1
		return _BatteryStatus_name_0[_BatteryStatus_index_0[i]:_BatteryStatus_index_0[i+1]]
	case i == 255:
		return _BatteryStatus_name_1
	default:
		return "BatteryStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BenchPressExerciseNameAlternatingDumbbellChestPressOnSwissBall-0]
	_ = x[BenchPressExerciseNameBarbellBenchPress-1]
	_ = x[BenchPressExerciseNameBarbellBoardBenchPress-2]
	_ = x[BenchPressExerciseNameBarbellFloorPress-3]
	_ = x[BenchPressExerciseNameCloseGripBarbellBenchPress-4]
	_ = x[BenchPressExerciseNameDeclineDumbbellBenchPress-5]
	_ = x[BenchPressExerciseNameDumbbellBenchPress-6]
	_ = x[BenchPressExerciseNameDumbbellFloorPress-7]
	_ = x[BenchPressExerciseNameInclineBarbellBenchPress-8]
	_ = x[BenchPressExerciseNameInclineDumbbellBenchPress-9]
	_ = x[BenchPressExerciseNameInclineSmithMachineBenchPress-10]
	_ = x[BenchPressExerciseNameIsometricBarbellBenchPress-11]
	_ = x[BenchPressExerciseNameKettlebellChestPress-12]
	_ = x[BenchPressExerciseNameNeutralGripDumbbellBenchPress-13]
	_ = x[BenchPressExerciseNameNeutralGripDumbbellInclineBenchPress-14]
	_ = x[BenchPressExerciseNameOneArmFloorPress-15]
	_ = x[BenchPressExerciseNameWeightedOneArmFloorPress-16]
	_ = x[BenchPressExerciseNamePartialLockout-17]
	_ = x[BenchPressExerciseNameReverseGripBarbellBenchPress-18]
	_ = x[BenchPressExerciseNameReverseGripInclineBenchPress-19]
	_ = x[BenchPressExerciseNameSingleArmCableChestPress-20]
	_ = x[BenchPressExerciseNameSingleArmDumbbellBenchPress-21]
	_ = x[BenchPressExerciseNameSmithMachineBenchPress-22]
	_ = x[BenchPressExerciseNameSwissBallDumbbellChestPress-23]
	_ = x[BenchPressExerciseNameTripleStopBarbellBenchPress-24]
	_ = x[BenchPressExerciseNameWideGripBarbellBenchPress-25]
	_ = x[BenchPressExerciseNameAlternatingDumbbellChestPress-26]
	_ = x[BenchPressExerciseNameInvalid-65535]
}

const (
	_BenchPressExerciseName_name_0 = "AlternatingDumbbellChestPressOnSwissBallBarbellBenchPressBarbellBoardBenchPressBarbellFloorPressCloseGripBarbellBenchPressDeclineDumbbellBenchPressDumbbellBenchPressDumbbellFloorPressInclineBarbellBenchPressInclineDumbbellBenchPressInclineSmithMachineBenchPressIsometricBarbellBenchPressKettlebellChestPressNeutralGripDumbbellBenchPressNeutralGripDumbbellInclineBenchPressOneArmFloorPressWeightedOneArmFloorPressPartialLockoutReverseGripBarbellBenchPressReverseGripInclineBenchPressSingleArmCableChestPressSingleArmDumbbellBenchPressSmithMachineBenchPressSwissBallDumbbellChestPressTripleStopBarbellBenchPressWideGripBarbellBenchPressAlternatingDumbbellChestPress"
	_BenchPressExerciseName_name_1 = "Invalid"
)

var (
	_BenchPressExerciseName_index_0 = [...]uint16{0, 40, 57, 79, 96, 122, 147, 165, 183, 207, 232, 261, 287, 307, 336, 372, 388, 412, 426, 454, 482, 506, 533, 555, 582, 609, 634, 663}
)

func (i BenchPressExerciseName) String() string {
	switch {
	case 0 <= i && i <= 26:
		return _BenchPressExerciseName_name_0[_BenchPressExerciseName_index_0[i]:_BenchPressExerciseName_index_0[i+1]]
	case i == 65535:
		return _BenchPressExerciseName_name_1
	default:
		return "BenchPressExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BikeLightBeamAngleModeManual-0]
	_ = x[BikeLightBeamAngleModeAuto-1]
	_ = x[BikeLightBeamAngleModeInvalid-255]
}

const (
	_BikeLightBeamAngleMode_name_0 = "ManualAuto"
	_BikeLightBeamAngleMode_name_1 = "Invalid"
)

var (
	_BikeLightBeamAngleMode_index_0 = [...]uint8{0, 6, 10}
)

func (i BikeLightBeamAngleMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _BikeLightBeamAngleMode_name_0[_BikeLightBeamAngleMode_index_0[i]:_BikeLightBeamAngleMode_index_0[i+1]]
	case i == 255:
		return _BikeLightBeamAngleMode_name_1
	default:
		return "BikeLightBeamAngleMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BikeLightNetworkConfigTypeAuto-0]
	_ = x[BikeLightNetworkConfigTypeIndividual-4]
	_ = x[BikeLightNetworkConfigTypeHighVisibility-5]
	_ = x[BikeLightNetworkConfigTypeTrail-6]
	_ = x[BikeLightNetworkConfigTypeInvalid-255]
}

const (
	_BikeLightNetworkConfigType_name_0 = "Auto"
	_BikeLightNetworkConfigType_name_1 = "IndividualHighVisibilityTrail"
	_BikeLightNetworkConfigType_name_2 = "Invalid"
)

var (
	_BikeLightNetworkConfigType_index_1 = [...]uint8{0, 10, 24, 29}
)

func (i BikeLightNetworkConfigType) String() string {
	switch {
	case i == 0:
		return _BikeLightNetworkConfigType_name_0
	case 4 <= i && i <= 6:
		i -= 4
		return _BikeLightNetworkConfigType_name_1[_BikeLightNetworkConfigType_index_1[i]:_BikeLightNetworkConfigType_index_1[i+1]]
	case i == 255:
		return _BikeLightNetworkConfigType_name_2
	default:
		return "BikeLightNetworkConfigType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BodyLocationLeftLeg-0]
	_ = x[BodyLocationLeftCalf-1]
	_ = x[BodyLocationLeftShin-2]
	_ = x[BodyLocationLeftHamstring-3]
	_ = x[BodyLocationLeftQuad-4]
	_ = x[BodyLocationLeftGlute-5]
	_ = x[BodyLocationRightLeg-6]
	_ = x[BodyLocationRightCalf-7]
	_ = x[BodyLocationRightShin-8]
	_ = x[BodyLocationRightHamstring-9]
	_ = x[BodyLocationRightQuad-10]
	_ = x[BodyLocationRightGlute-11]
	_ = x[BodyLocationTorsoBack-12]
	_ = x[BodyLocationLeftLowerBack-13]
	_ = x[BodyLocationLeftUpperBack-14]
	_ = x[BodyLocationRightLowerBack-15]
	_ = x[BodyLocationRightUpperBack-16]
	_ = x[BodyLocationTorsoFront-17]
	_ = x[BodyLocationLeftAbdomen-18]
	_ = x[BodyLocationLeftChest-19]
	_ = x[BodyLocationRightAbdomen-20]
	_ = x[BodyLocationRightChest-21]
	_ = x[BodyLocationLeftArm-22]
	_ = x[BodyLocationLeftShoulder-23]
	_ = x[BodyLocationLeftBicep-24]
	_ = x[BodyLocationLeftTricep-25]
	_ = x[BodyLocationLeftBrachioradialis-26]
	_ = x[BodyLocationLeftForearmExtensors-27]
	_ = x[BodyLocationRightArm-28]
	_ = x[BodyLocationRightShoulder-29]
	_ = x[BodyLocationRightBicep-30]
	_ = x[BodyLocationRightTricep-31]
	_ = x[BodyLocationRightBrachioradialis-32]
	_ = x[BodyLocationRightForearmExtensors-33]
	_ = x[BodyLocationNeck-34]
	_ = x[BodyLocationThroat-35]
	_ = x[BodyLocationWaistMidBack-36]
	_ = x[BodyLocationWaistFront-37]
	_ = x[BodyLocationWaistLeft-38]
	_ = x[BodyLocationWaistRight-39]
	_ = x[BodyLocationInvalid-255]
}

const (
	_BodyLocation_name_0 = "LeftLegLeftCalfLeftShinLeftHamstringLeftQuadLeftGluteRightLegRightCalfRightShinRightHamstringRightQuadRightGluteTorsoBackLeftLowerBackLeftUpperBackRightLowerBackRightUpperBackTorsoFrontLeftAbdomenLeftChestRightAbdomenRightChestLeftArmLeftShoulderLeftBicepLeftTricepLeftBrachioradialisLeftForearmExtensorsRightArmRightShoulderRightBicepRightTricepRightBrachioradialisRightForearmExtensorsNeckThroatWaistMidBackWaistFrontWaistLeftWaistRight"
	_BodyLocation_name_1 = "Invalid"
)

var (
	_BodyLocation_index_0 = [...]uint16{0, 7, 15, 23, 36, 44, 53, 61, 70, 79, 93, 102, 112, 121, 134, 147, 161, 175, 185, 196, 205, 217, 227, 234, 246, 255, 265, 284, 304, 312, 325, 335, 346, 366, 387, 391, 397, 409, 419, 428, 438}
)

func (i BodyLocation) String() string {
	switch {
	case 0 <= i && i <= 39:
		return _BodyLocation_name_0[_BodyLocation_index_0[i]:_BodyLocation_index_0[i+1]]
	case i == 255:
		return _BodyLocation_name_1
	default:
		return "BodyLocation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[BpStatusNoError-0]
	_ = x[BpStatusErrorIncompleteData-1]
	_ = x[BpStatusErrorNoMeasurement-2]
	_ = x[BpStatusErrorDataOutOfRange-3]
	_ = x[BpStatusErrorIrregularHeartRate-4]
	_ = x[BpStatusInvalid-255]
}

const (
	_BpStatus_name_0 = "NoErrorErrorIncompleteDataErrorNoMeasurementErrorDataOutOfRangeErrorIrregularHeartRate"
	_BpStatus_name_1 = "Invalid"
)

var (
	_BpStatus_index_0 = [...]uint8{0, 7, 26, 44, 63, 86}
)

func (i BpStatus) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _BpStatus_name_0[_BpStatus_index_0[i]:_BpStatus_index_0[i+1]]
	case i == 255:
		return _BpStatus_name_1
	default:
		return "BpStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CalfRaiseExerciseName3WayCalfRaise-0]
	_ = x[CalfRaiseExerciseName3WayWeightedCalfRaise-1]
	_ = x[CalfRaiseExerciseName3WaySingleLegCalfRaise-2]
	_ = x[CalfRaiseExerciseName3WayWeightedSingleLegCalfRaise-3]
	_ = x[CalfRaiseExerciseNameDonkeyCalfRaise-4]
	_ = x[CalfRaiseExerciseNameWeightedDonkeyCalfRaise-5]
	_ = x[CalfRaiseExerciseNameSeatedCalfRaise-6]
	_ = x[CalfRaiseExerciseNameWeightedSeatedCalfRaise-7]
	_ = x[CalfRaiseExerciseNameSeatedDumbbellToeRaise-8]
	_ = x[CalfRaiseExerciseNameSingleLegBentKneeCalfRaise-9]
	_ = x[CalfRaiseExerciseNameWeightedSingleLegBentKneeCalfRaise-10]
	_ = x[CalfRaiseExerciseNameSingleLegDeclinePushUp-11]
	_ = x[CalfRaiseExerciseNameSingleLegDonkeyCalfRaise-12]
	_ = x[CalfRaiseExerciseNameWeightedSingleLegDonkeyCalfRaise-13]
	_ = x[CalfRaiseExerciseNameSingleLegHipRaiseWithKneeHold-14]
	_ = x[CalfRaiseExerciseNameSingleLegStandingCalfRaise-15]
	_ = x[CalfRaiseExerciseNameSingleLegStandingDumbbellCalfRaise-16]
	_ = x[CalfRaiseExerciseNameStandingBarbellCalfRaise-17]
	_ = x[CalfRaiseExerciseNameStandingCalfRaise-18]
	_ = x[CalfRaiseExerciseNameWeightedStandingCalfRaise-19]
	_ = x[CalfRaiseExerciseNameStandingDumbbellCalfRaise-20]
	_ = x[CalfRaiseExerciseNameInvalid-65535]
}

const (
	_CalfRaiseExerciseName_name_0 = "3WayCalfRaise3WayWeightedCalfRaise3WaySingleLegCalfRaise3WayWeightedSingleLegCalfRaiseDonkeyCalfRaiseWeightedDonkeyCalfRaiseSeatedCalfRaiseWeightedSeatedCalfRaiseSeatedDumbbellToeRaiseSingleLegBentKneeCalfRaiseWeightedSingleLegBentKneeCalfRaiseSingleLegDeclinePushUpSingleLegDonkeyCalfRaiseWeightedSingleLegDonkeyCalfRaiseSingleLegHipRaiseWithKneeHoldSingleLegStandingCalfRaiseSingleLegStandingDumbbellCalfRaiseStandingBarbellCalfRaiseStandingCalfRaiseWeightedStandingCalfRaiseStandingDumbbellCalfRaise"
	_CalfRaiseExerciseName_name_1 = "Invalid"
)

var (
	_CalfRaiseExerciseName_index_0 = [...]uint16{0, 13, 34, 56, 86, 101, 124, 139, 162, 184, 210, 244, 266, 290, 322, 351, 377, 411, 435, 452, 477, 502}
)

func (i CalfRaiseExerciseName) String() string {
	switch {
	case 0 <= i && i <= 20:
		return _CalfRaiseExerciseName_name_0[_CalfRaiseExerciseName_index_0[i]:_CalfRaiseExerciseName_index_0[i+1]]
	case i == 65535:
		return _CalfRaiseExerciseName_name_1
	default:
		return "CalfRaiseExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CameraEventTypeVideoStart-0]
	_ = x[CameraEventTypeVideoSplit-1]
	_ = x[CameraEventTypeVideoEnd-2]
	_ = x[CameraEventTypePhotoTaken-3]
	_ = x[CameraEventTypeVideoSecondStreamStart-4]
	_ = x[CameraEventTypeVideoSecondStreamSplit-5]
	_ = x[CameraEventTypeVideoSecondStreamEnd-6]
	_ = x[CameraEventTypeVideoSplitStart-7]
	_ = x[CameraEventTypeVideoSecondStreamSplitStart-8]
	_ = x[CameraEventTypeVideoPause-11]
	_ = x[CameraEventTypeVideoSecondStreamPause-12]
	_ = x[CameraEventTypeVideoResume-13]
	_ = x[CameraEventTypeVideoSecondStreamResume-14]
	_ = x[CameraEventTypeInvalid-255]
}

const (
	_CameraEventType_name_0 = "VideoStartVideoSplitVideoEndPhotoTakenVideoSecondStreamStartVideoSecondStreamSplitVideoSecondStreamEndVideoSplitStartVideoSecondStreamSplitStart"
	_CameraEventType_name_1 = "VideoPauseVideoSecondStreamPauseVideoResumeVideoSecondStreamResume"
	_CameraEventType_name_2 = "Invalid"
)

var (
	_CameraEventType_index_0 = [...]uint8{0, 10, 20, 28, 38, 60, 82, 102, 117, 144}
	_CameraEventType_index_1 = [...]uint8{0, 10, 32, 43, 66}
)

func (i CameraEventType) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _CameraEventType_name_0[_CameraEventType_index_0[i]:_CameraEventType_index_0[i+1]]
	case 11 <= i && i <= 14:
		i -= 11
		return _CameraEventType_name_1[_CameraEventType_index_1[i]:_CameraEventType_index_1[i+1]]
	case i == 255:
		return _CameraEventType_name_2
	default:
		return "CameraEventType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CameraOrientationTypeCameraOrientation0-0]
	_ = x[CameraOrientationTypeCameraOrientation90-1]
	_ = x[CameraOrientationTypeCameraOrientation180-2]
	_ = x[CameraOrientationTypeCameraOrientation270-3]
	_ = x[CameraOrientationTypeInvalid-255]
}

const (
	_CameraOrientationType_name_0 = "CameraOrientation0CameraOrientation90CameraOrientation180CameraOrientation270"
	_CameraOrientationType_name_1 = "Invalid"
)

var (
	_CameraOrientationType_index_0 = [...]uint8{0, 18, 37, 57, 77}
)

func (i CameraOrientationType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _CameraOrientationType_name_0[_CameraOrientationType_index_0[i]:_CameraOrientationType_index_0[i+1]]
	case i == 255:
		return _CameraOrientationType_name_1
	default:
		return "CameraOrientationType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CardioExerciseNameBobAndWeaveCircle-0]
	_ = x[CardioExerciseNameWeightedBobAndWeaveCircle-1]
	_ = x[CardioExerciseNameCardioCoreCrawl-2]
	_ = x[CardioExerciseNameWeightedCardioCoreCrawl-3]
	_ = x[CardioExerciseNameDoubleUnder-4]
	_ = x[CardioExerciseNameWeightedDoubleUnder-5]
	_ = x[CardioExerciseNameJumpRope-6]
	_ = x[CardioExerciseNameWeightedJumpRope-7]
	_ = x[CardioExerciseNameJumpRopeCrossover-8]
	_ = x[CardioExerciseNameWeightedJumpRopeCrossover-9]
	_ = x[CardioExerciseNameJumpRopeJog-10]
	_ = x[CardioExerciseNameWeightedJumpRopeJog-11]
	_ = x[CardioExerciseNameJumpingJacks-12]
	_ = x[CardioExerciseNameWeightedJumpingJacks-13]
	_ = x[CardioExerciseNameSkiMoguls-14]
	_ = x[CardioExerciseNameWeightedSkiMoguls-15]
	_ = x[CardioExerciseNameSplitJacks-16]
	_ = x[CardioExerciseNameWeightedSplitJacks-17]
	_ = x[CardioExerciseNameSquatJacks-18]
	_ = x[CardioExerciseNameWeightedSquatJacks-19]
	_ = x[CardioExerciseNameTripleUnder-20]
	_ = x[CardioExerciseNameWeightedTripleUnder-21]
	_ = x[CardioExerciseNameInvalid-65535]
}

const (
	_CardioExerciseName_name_0 = "BobAndWeaveCircleWeightedBobAndWeaveCircleCardioCoreCrawlWeightedCardioCoreCrawlDoubleUnderWeightedDoubleUnderJumpRopeWeightedJumpRopeJumpRopeCrossoverWeightedJumpRopeCrossoverJumpRopeJogWeightedJumpRopeJogJumpingJacksWeightedJumpingJacksSkiMogulsWeightedSkiMogulsSplitJacksWeightedSplitJacksSquatJacksWeightedSquatJacksTripleUnderWeightedTripleUnder"
	_CardioExerciseName_name_1 = "Invalid"
)

var (
	_CardioExerciseName_index_0 = [...]uint16{0, 17, 42, 57, 80, 91, 110, 118, 134, 151, 176, 187, 206, 218, 238, 247, 264, 274, 292, 302, 320, 331, 350}
)

func (i CardioExerciseName) String() string {
	switch {
	case 0 <= i && i <= 21:
		return _CardioExerciseName_name_0[_CardioExerciseName_index_0[i]:_CardioExerciseName_index_0[i+1]]
	case i == 65535:
		return _CardioExerciseName_name_1
	default:
		return "CardioExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CarryExerciseNameBarHolds-0]
	_ = x[CarryExerciseNameFarmersWalk-1]
	_ = x[CarryExerciseNameFarmersWalkOnToes-2]
	_ = x[CarryExerciseNameHexDumbbellHold-3]
	_ = x[CarryExerciseNameOverheadCarry-4]
	_ = x[CarryExerciseNameInvalid-65535]
}

const (
	_CarryExerciseName_name_0 = "BarHoldsFarmersWalkFarmersWalkOnToesHexDumbbellHoldOverheadCarry"
	_CarryExerciseName_name_1 = "Invalid"
)

var (
	_CarryExerciseName_index_0 = [...]uint8{0, 8, 19, 36, 51, 64}
)

func (i CarryExerciseName) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _CarryExerciseName_name_0[_CarryExerciseName_index_0[i]:_CarryExerciseName_index_0[i+1]]
	case i == 65535:
		return _CarryExerciseName_name_1
	default:
		return "CarryExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ChecksumClear-0]
	_ = x[ChecksumOk-1]
	_ = x[ChecksumInvalid-255]
}

const (
	_Checksum_name_0 = "ClearOk"
	_Checksum_name_1 = "Invalid"
)

var (
	_Checksum_index_0 = [...]uint8{0, 5, 7}
)

func (i Checksum) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Checksum_name_0[_Checksum_index_0[i]:_Checksum_index_0[i+1]]
	case i == 255:
		return _Checksum_name_1
	default:
		return "Checksum(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ChopExerciseNameCablePullThrough-0]
	_ = x[ChopExerciseNameCableRotationalLift-1]
	_ = x[ChopExerciseNameCableWoodchop-2]
	_ = x[ChopExerciseNameCrossChopToKnee-3]
	_ = x[ChopExerciseNameWeightedCrossChopToKnee-4]
	_ = x[ChopExerciseNameDumbbellChop-5]
	_ = x[ChopExerciseNameHalfKneelingRotation-6]
	_ = x[ChopExerciseNameWeightedHalfKneelingRotation-7]
	_ = x[ChopExerciseNameHalfKneelingRotationalChop-8]
	_ = x[ChopExerciseNameHalfKneelingRotationalReverseChop-9]
	_ = x[ChopExerciseNameHalfKneelingStabilityChop-10]
	_ = x[ChopExerciseNameHalfKneelingStabilityReverseChop-11]
	_ = x[ChopExerciseNameKneelingRotationalChop-12]
	_ = x[ChopExerciseNameKneelingRotationalReverseChop-13]
	_ = x[ChopExerciseNameKneelingStabilityChop-14]
	_ = x[ChopExerciseNameKneelingWoodchopper-15]
	_ = x[ChopExerciseNameMedicineBallWoodChops-16]
	_ = x[ChopExerciseNamePowerSquatChops-17]
	_ = x[ChopExerciseNameWeightedPowerSquatChops-18]
	_ = x[ChopExerciseNameStandingRotationalChop-19]
	_ = x[ChopExerciseNameStandingSplitRotationalChop-20]
	_ = x[ChopExerciseNameStandingSplitRotationalReverseChop-21]
	_ = x[ChopExerciseNameStandingStabilityReverseChop-22]
	_ = x[ChopExerciseNameInvalid-65535]
}

const (
	_ChopExerciseName_name_0 = "CablePullThroughCableRotationalLiftCableWoodchopCrossChopToKneeWeightedCrossChopToKneeDumbbellChopHalfKneelingRotationWeightedHalfKneelingRotationHalfKneelingRotationalChopHalfKneelingRotationalReverseChopHalfKneelingStabilityChopHalfKneelingStabilityReverseChopKneelingRotationalChopKneelingRotationalReverseChopKneelingStabilityChopKneelingWoodchopperMedicineBallWoodChopsPowerSquatChopsWeightedPowerSquatChopsStandingRotationalChopStandingSplitRotationalChopStandingSplitRotationalReverseChopStandingStabilityReverseChop"
	_ChopExerciseName_name_1 = "Invalid"
)

var (
	_ChopExerciseName_index_0 = [...]uint16{0, 16, 35, 48, 63, 86, 98, 118, 146, 172, 205, 230, 262, 284, 313, 334, 353, 374, 389, 412, 434, 461, 495, 523}
)

func (i ChopExerciseName) String() string {
	switch {
	case 0 <= i && i <= 22:
		return _ChopExerciseName_name_0[_ChopExerciseName_index_0[i]:_ChopExerciseName_index_0[i+1]]
	case i == 65535:
		return _ChopExerciseName_name_1
	default:
		return "ChopExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ClimbProEventApproach-0]
	_ = x[ClimbProEventStart-1]
	_ = x[ClimbProEventComplete-2]
	_ = x[ClimbProEventInvalid-255]
}

const (
	_ClimbProEvent_name_0 = "ApproachStartComplete"
	_ClimbProEvent_name_1 = "Invalid"
)

var (
	_ClimbProEvent_index_0 = [...]uint8{0, 8, 13, 21}
)

func (i ClimbProEvent) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _ClimbProEvent_name_0[_ClimbProEvent_index_0[i]:_ClimbProEvent_index_0[i+1]]
	case i == 255:
		return _ClimbProEvent_name_1
	default:
		return "ClimbProEvent(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CommTimeoutTypeWildcardPairingTimeout-0]
	_ = x[CommTimeoutTypePairingTimeout-1]
	_ = x[CommTimeoutTypeConnectionLost-2]
	_ = x[CommTimeoutTypeConnectionTimeout-3]
	_ = x[CommTimeoutTypeInvalid-65535]
}

const (
	_CommTimeoutType_name_0 = "WildcardPairingTimeoutPairingTimeoutConnectionLostConnectionTimeout"
	_CommTimeoutType_name_1 = "Invalid"
)

var (
	_CommTimeoutType_index_0 = [...]uint8{0, 22, 36, 50, 67}
)

func (i CommTimeoutType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _CommTimeoutType_name_0[_CommTimeoutType_index_0[i]:_CommTimeoutType_index_0[i+1]]
	case i == 65535:
		return _CommTimeoutType_name_1
	default:
		return "CommTimeoutType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ConnectivityCapabilitiesBluetooth-1]
	_ = x[ConnectivityCapabilitiesBluetoothLe-2]
	_ = x[ConnectivityCapabilitiesAnt-4]
	_ = x[ConnectivityCapabilitiesActivityUpload-8]
	_ = x[ConnectivityCapabilitiesCourseDownload-16]
	_ = x[ConnectivityCapabilitiesWorkoutDownload-32]
	_ = x[ConnectivityCapabilitiesLiveTrack-64]
	_ = x[ConnectivityCapabilitiesWeatherConditions-128]
	_ = x[ConnectivityCapabilitiesWeatherAlerts-256]
	_ = x[ConnectivityCapabilitiesGpsEphemerisDownload-512]
	_ = x[ConnectivityCapabilitiesExplicitArchive-1024]
	_ = x[ConnectivityCapabilitiesSetupIncomplete-2048]
	_ = x[ConnectivityCapabilitiesContinueSyncAfterSoftwareUpdate-4096]
	_ = x[ConnectivityCapabilitiesConnectIqAppDownload-8192]
	_ = x[ConnectivityCapabilitiesGolfCourseDownload-16384]
	_ = x[ConnectivityCapabilitiesDeviceInitiatesSync-32768]
	_ = x[ConnectivityCapabilitiesConnectIqWatchAppDownload-65536]
	_ = x[ConnectivityCapabilitiesConnectIqWidgetDownload-131072]
	_ = x[ConnectivityCapabilitiesConnectIqWatchFaceDownload-262144]
	_ = x[ConnectivityCapabilitiesConnectIqDataFieldDownload-524288]
	_ = x[ConnectivityCapabilitiesConnectIqAppManagment-1048576]
	_ = x[ConnectivityCapabilitiesSwingSensor-2097152]
	_ = x[ConnectivityCapabilitiesSwingSensorRemote-4194304]
	_ = x[ConnectivityCapabilitiesIncidentDetection-8388608]
	_ = x[ConnectivityCapabilitiesAudioPrompts-16777216]
	_ = x[ConnectivityCapabilitiesWifiVerification-33554432]
	_ = x[ConnectivityCapabilitiesTrueUp-67108864]
	_ = x[ConnectivityCapabilitiesFindMyWatch-134217728]
	_ = x[ConnectivityCapabilitiesRemoteManualSync-268435456]
	_ = x[ConnectivityCapabilitiesLiveTrackAutoStart-536870912]
	_ = x[ConnectivityCapabilitiesLiveTrackMessaging-1073741824]
	_ = x[ConnectivityCapabilitiesInstantInput-2147483648]
	_ = x[ConnectivityCapabilitiesInvalid-0]
}

const _ConnectivityCapabilities_name = "InvalidBluetoothBluetoothLeAntActivityUploadCourseDownloadWorkoutDownloadLiveTrackWeatherConditionsWeatherAlertsGpsEphemerisDownloadExplicitArchiveSetupIncompleteContinueSyncAfterSoftwareUpdateConnectIqAppDownloadGolfCourseDownloadDeviceInitiatesSyncConnectIqWatchAppDownloadConnectIqWidgetDownloadConnectIqWatchFaceDownloadConnectIqDataFieldDownloadConnectIqAppManagmentSwingSensorSwingSensorRemoteIncidentDetectionAudioPromptsWifiVerificationTrueUpFindMyWatchRemoteManualSyncLiveTrackAutoStartLiveTrackMessagingInstantInput"

var _ConnectivityCapabilities_map = map[ConnectivityCapabilities]string{
	0:          _ConnectivityCapabilities_name[0:7],
	1:          _ConnectivityCapabilities_name[7:16],
	2:          _ConnectivityCapabilities_name[16:27],
	4:          _ConnectivityCapabilities_name[27:30],
	8:          _ConnectivityCapabilities_name[30:44],
	16:         _ConnectivityCapabilities_name[44:58],
	32:         _ConnectivityCapabilities_name[58:73],
	64:         _ConnectivityCapabilities_name[73:82],
	128:        _ConnectivityCapabilities_name[82:99],
	256:        _ConnectivityCapabilities_name[99:112],
	512:        _ConnectivityCapabilities_name[112:132],
	1024:       _ConnectivityCapabilities_name[132:147],
	2048:       _ConnectivityCapabilities_name[147:162],
	4096:       _ConnectivityCapabilities_name[162:193],
	8192:       _ConnectivityCapabilities_name[193:213],
	16384:      _ConnectivityCapabilities_name[213:231],
	32768:      _ConnectivityCapabilities_name[231:250],
	65536:      _ConnectivityCapabilities_name[250:275],
	131072:     _ConnectivityCapabilities_name[275:298],
	262144:     _ConnectivityCapabilities_name[298:324],
	524288:     _ConnectivityCapabilities_name[324:350],
	1048576:    _ConnectivityCapabilities_name[350:371],
	2097152:    _ConnectivityCapabilities_name[371:382],
	4194304:    _ConnectivityCapabilities_name[382:399],
	8388608:    _ConnectivityCapabilities_name[399:416],
	16777216:   _ConnectivityCapabilities_name[416:428],
	33554432:   _ConnectivityCapabilities_name[428:444],
	67108864:   _ConnectivityCapabilities_name[444:450],
	134217728:  _ConnectivityCapabilities_name[450:461],
	268435456:  _ConnectivityCapabilities_name[461:477],
	536870912:  _ConnectivityCapabilities_name[477:495],
	1073741824: _ConnectivityCapabilities_name[495:513],
	2147483648: _ConnectivityCapabilities_name[513:525],
}

func (i ConnectivityCapabilities) String() string {
	if str, ok := _ConnectivityCapabilities_map[i]; ok {
		return str
	}
	return "ConnectivityCapabilities(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CoreExerciseNameAbsJabs-0]
	_ = x[CoreExerciseNameWeightedAbsJabs-1]
	_ = x[CoreExerciseNameAlternatingPlateReach-2]
	_ = x[CoreExerciseNameBarbellRollout-3]
	_ = x[CoreExerciseNameWeightedBarbellRollout-4]
	_ = x[CoreExerciseNameBodyBarObliqueTwist-5]
	_ = x[CoreExerciseNameCableCorePress-6]
	_ = x[CoreExerciseNameCableSideBend-7]
	_ = x[CoreExerciseNameSideBend-8]
	_ = x[CoreExerciseNameWeightedSideBend-9]
	_ = x[CoreExerciseNameCrescentCircle-10]
	_ = x[CoreExerciseNameWeightedCrescentCircle-11]
	_ = x[CoreExerciseNameCyclingRussianTwist-12]
	_ = x[CoreExerciseNameWeightedCyclingRussianTwist-13]
	_ = x[CoreExerciseNameElevatedFeetRussianTwist-14]
	_ = x[CoreExerciseNameWeightedElevatedFeetRussianTwist-15]
	_ = x[CoreExerciseNameHalfTurkishGetUp-16]
	_ = x[CoreExerciseNameKettlebellWindmill-17]
	_ = x[CoreExerciseNameKneelingAbWheel-18]
	_ = x[CoreExerciseNameWeightedKneelingAbWheel-19]
	_ = x[CoreExerciseNameModifiedFrontLever-20]
	_ = x[CoreExerciseNameOpenKneeTucks-21]
	_ = x[CoreExerciseNameWeightedOpenKneeTucks-22]
	_ = x[CoreExerciseNameSideAbsLegLift-23]
	_ = x[CoreExerciseNameWeightedSideAbsLegLift-24]
	_ = x[CoreExerciseNameSwissBallJackknife-25]
	_ = x[CoreExerciseNameWeightedSwissBallJackknife-26]
	_ = x[CoreExerciseNameSwissBallPike-27]
	_ = x[CoreExerciseNameWeightedSwissBallPike-28]
	_ = x[CoreExerciseNameSwissBallRollout-29]
	_ = x[CoreExerciseNameWeightedSwissBallRollout-30]
	_ = x[CoreExerciseNameTriangleHipPress-31]
	_ = x[CoreExerciseNameWeightedTriangleHipPress-32]
	_ = x[CoreExerciseNameTrxSuspendedJackknife-33]
	_ = x[CoreExerciseNameWeightedTrxSuspendedJackknife-34]
	_ = x[CoreExerciseNameUBoat-35]
	_ = x[CoreExerciseNameWeightedUBoat-36]
	_ = x[CoreExerciseNameWindmillSwitches-37]
	_ = x[CoreExerciseNameWeightedWindmillSwitches-38]
	_ = x[CoreExerciseNameAlternatingSlideOut-39]
	_ = x[CoreExerciseNameWeightedAlternatingSlideOut-40]
	_ = x[CoreExerciseNameGhdBackExtensions-41]
	_ = x[CoreExerciseNameWeightedGhdBackExtensions-42]
	_ = x[CoreExerciseNameOverheadWalk-43]
	_ = x[CoreExerciseNameInchworm-44]
	_ = x[CoreExerciseNameWeightedModifiedFrontLever-45]
	_ = x[CoreExerciseNameRussianTwist-46]
	_ = x[CoreExerciseNameAbdominalLegRotations-47]
	_ = x[CoreExerciseNameArmAndLegExtensionOnKnees-48]
	_ = x[CoreExerciseNameBicycle-49]
	_ = x[CoreExerciseNameBicepCurlWithLegExtension-50]
	_ = x[CoreExerciseNameCatCow-51]
	_ = x[CoreExerciseNameCorkscrew-52]
	_ = x[CoreExerciseNameCrissCross-53]
	_ = x[CoreExerciseNameCrissCrossWithBall-54]
	_ = x[CoreExerciseNameDoubleLegStretch-55]
	_ = x[CoreExerciseNameKneeFolds-56]
	_ = x[CoreExerciseNameLowerLift-57]
	_ = x[CoreExerciseNameNeckPull-58]
	_ = x[CoreExerciseNamePelvicClocks-59]
	_ = x[CoreExerciseNameRollOver-60]
	_ = x[CoreExerciseNameRollUp-61]
	_ = x[CoreExerciseNameRolling-62]
	_ = x[CoreExerciseNameRowing1-63]
	_ = x[CoreExerciseNameRowing2-64]
	_ = x[CoreExerciseNameScissors-65]
	_ = x[CoreExerciseNameSingleLegCircles-66]
	_ = x[CoreExerciseNameSingleLegStretch-67]
	_ = x[CoreExerciseNameSnakeTwist1And2-68]
	_ = x[CoreExerciseNameSwan-69]
	_ = x[CoreExerciseNameSwimming-70]
	_ = x[CoreExerciseNameTeaser-71]
	_ = x[CoreExerciseNameTheHundred-72]
	_ = x[CoreExerciseNameInvalid-65535]
}

const (
	_CoreExerciseName_name_0 = "AbsJabsWeightedAbsJabsAlternatingPlateReachBarbellRolloutWeightedBarbellRolloutBodyBarObliqueTwistCableCorePressCableSideBendSideBendWeightedSideBendCrescentCircleWeightedCrescentCircleCyclingRussianTwistWeightedCyclingRussianTwistElevatedFeetRussianTwistWeightedElevatedFeetRussianTwistHalfTurkishGetUpKettlebellWindmillKneelingAbWheelWeightedKneelingAbWheelModifiedFrontLeverOpenKneeTucksWeightedOpenKneeTucksSideAbsLegLiftWeightedSideAbsLegLiftSwissBallJackknifeWeightedSwissBallJackknifeSwissBallPikeWeightedSwissBallPikeSwissBallRolloutWeightedSwissBallRolloutTriangleHipPressWeightedTriangleHipPressTrxSuspendedJackknifeWeightedTrxSuspendedJackknifeUBoatWeightedUBoatWindmillSwitchesWeightedWindmillSwitchesAlternatingSlideOutWeightedAlternatingSlideOutGhdBackExtensionsWeightedGhdBackExtensionsOverheadWalkInchwormWeightedModifiedFrontLeverRussianTwistAbdominalLegRotationsArmAndLegExtensionOnKneesBicycleBicepCurlWithLegExtensionCatCowCorkscrewCrissCrossCrissCrossWithBallDoubleLegStretchKneeFoldsLowerLiftNeckPullPelvicClocksRollOverRollUpRollingRowing1Rowing2ScissorsSingleLegCirclesSingleLegStretchSnakeTwist1And2SwanSwimmingTeaserTheHundred"
	_CoreExerciseName_name_1 = "Invalid"
)

var (
	_CoreExerciseName_index_0 = [...]uint16{0, 7, 22, 43, 57, 79, 98, 112, 125, 133, 149, 163, 185, 204, 231, 255, 287, 303, 321, 336, 359, 377, 390, 411, 425, 447, 465, 491, 504, 525, 541, 565, 581, 605, 626, 655, 660, 673, 689, 713, 732, 759, 776, 801, 813, 821, 847, 859, 880, 905, 912, 937, 943, 952, 962, 980, 996, 1005, 1014, 1022, 1034, 1042, 1048, 1055, 1062, 1069, 1077, 1093, 1109, 1124, 1128, 1136, 1142, 1152}
)

func (i CoreExerciseName) String() string {
	switch {
	case 0 <= i && i <= 72:
		return _CoreExerciseName_name_0[_CoreExerciseName_index_0[i]:_CoreExerciseName_index_0[i+1]]
	case i == 65535:
		return _CoreExerciseName_name_1
	default:
		return "CoreExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CourseCapabilitiesProcessed-1]
	_ = x[CourseCapabilitiesValid-2]
	_ = x[CourseCapabilitiesTime-4]
	_ = x[CourseCapabilitiesDistance-8]
	_ = x[CourseCapabilitiesPosition-16]
	_ = x[CourseCapabilitiesHeartRate-32]
	_ = x[CourseCapabilitiesPower-64]
	_ = x[CourseCapabilitiesCadence-128]
	_ = x[CourseCapabilitiesTraining-256]
	_ = x[CourseCapabilitiesNavigation-512]
	_ = x[CourseCapabilitiesBikeway-1024]
	_ = x[CourseCapabilitiesInvalid-0]
}

const (
	_CourseCapabilities_name_0 = "InvalidProcessedValid"
	_CourseCapabilities_name_1 = "Time"
	_CourseCapabilities_name_2 = "Distance"
	_CourseCapabilities_name_3 = "Position"
	_CourseCapabilities_name_4 = "HeartRate"
	_CourseCapabilities_name_5 = "Power"
	_CourseCapabilities_name_6 = "Cadence"
	_CourseCapabilities_name_7 = "Training"
	_CourseCapabilities_name_8 = "Navigation"
	_CourseCapabilities_name_9 = "Bikeway"
)

var (
	_CourseCapabilities_index_0 = [...]uint8{0, 7, 16, 21}
)

func (i CourseCapabilities) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _CourseCapabilities_name_0[_CourseCapabilities_index_0[i]:_CourseCapabilities_index_0[i+1]]
	case i == 4:
		return _CourseCapabilities_name_1
	case i == 8:
		return _CourseCapabilities_name_2
	case i == 16:
		return _CourseCapabilities_name_3
	case i == 32:
		return _CourseCapabilities_name_4
	case i == 64:
		return _CourseCapabilities_name_5
	case i == 128:
		return _CourseCapabilities_name_6
	case i == 256:
		return _CourseCapabilities_name_7
	case i == 512:
		return _CourseCapabilities_name_8
	case i == 1024:
		return _CourseCapabilities_name_9
	default:
		return "CourseCapabilities(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CoursePointGeneric-0]
	_ = x[CoursePointSummit-1]
	_ = x[CoursePointValley-2]
	_ = x[CoursePointWater-3]
	_ = x[CoursePointFood-4]
	_ = x[CoursePointDanger-5]
	_ = x[CoursePointLeft-6]
	_ = x[CoursePointRight-7]
	_ = x[CoursePointStraight-8]
	_ = x[CoursePointFirstAid-9]
	_ = x[CoursePointFourthCategory-10]
	_ = x[CoursePointThirdCategory-11]
	_ = x[CoursePointSecondCategory-12]
	_ = x[CoursePointFirstCategory-13]
	_ = x[CoursePointHorsCategory-14]
	_ = x[CoursePointSprint-15]
	_ = x[CoursePointLeftFork-16]
	_ = x[CoursePointRightFork-17]
	_ = x[CoursePointMiddleFork-18]
	_ = x[CoursePointSlightLeft-19]
	_ = x[CoursePointSharpLeft-20]
	_ = x[CoursePointSlightRight-21]
	_ = x[CoursePointSharpRight-22]
	_ = x[CoursePointUTurn-23]
	_ = x[CoursePointSegmentStart-24]
	_ = x[CoursePointSegmentEnd-25]
	_ = x[CoursePointInvalid-255]
}

const (
	_CoursePoint_name_0 = "GenericSummitValleyWaterFoodDangerLeftRightStraightFirstAidFourthCategoryThirdCategorySecondCategoryFirstCategoryHorsCategorySprintLeftForkRightForkMiddleForkSlightLeftSharpLeftSlightRightSharpRightUTurnSegmentStartSegmentEnd"
	_CoursePoint_name_1 = "Invalid"
)

var (
	_CoursePoint_index_0 = [...]uint8{0, 7, 13, 19, 24, 28, 34, 38, 43, 51, 59, 73, 86, 100, 113, 125, 131, 139, 148, 158, 168, 177, 188, 198, 203, 215, 225}
)

func (i CoursePoint) String() string {
	switch {
	case 0 <= i && i <= 25:
		return _CoursePoint_name_0[_CoursePoint_index_0[i]:_CoursePoint_index_0[i+1]]
	case i == 255:
		return _CoursePoint_name_1
	default:
		return "CoursePoint(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CrunchExerciseNameBicycleCrunch-0]
	_ = x[CrunchExerciseNameCableCrunch-1]
	_ = x[CrunchExerciseNameCircularArmCrunch-2]
	_ = x[CrunchExerciseNameCrossedArmsCrunch-3]
	_ = x[CrunchExerciseNameWeightedCrossedArmsCrunch-4]
	_ = x[CrunchExerciseNameCrossLegReverseCrunch-5]
	_ = x[CrunchExerciseNameWeightedCrossLegReverseCrunch-6]
	_ = x[CrunchExerciseNameCrunchChop-7]
	_ = x[CrunchExerciseNameWeightedCrunchChop-8]
	_ = x[CrunchExerciseNameDoubleCrunch-9]
	_ = x[CrunchExerciseNameWeightedDoubleCrunch-10]
	_ = x[CrunchExerciseNameElbowToKneeCrunch-11]
	_ = x[CrunchExerciseNameWeightedElbowToKneeCrunch-12]
	_ = x[CrunchExerciseNameFlutterKicks-13]
	_ = x[CrunchExerciseNameWeightedFlutterKicks-14]
	_ = x[CrunchExerciseNameFoamRollerReverseCrunchOnBench-15]
	_ = x[CrunchExerciseNameWeightedFoamRollerReverseCrunchOnBench-16]
	_ = x[CrunchExerciseNameFoamRollerReverseCrunchWithDumbbell-17]
	_ = x[CrunchExerciseNameFoamRollerReverseCrunchWithMedicineBall-18]
	_ = x[CrunchExerciseNameFrogPress-19]
	_ = x[CrunchExerciseNameHangingKneeRaiseObliqueCrunch-20]
	_ = x[CrunchExerciseNameWeightedHangingKneeRaiseObliqueCrunch-21]
	_ = x[CrunchExerciseNameHipCrossover-22]
	_ = x[CrunchExerciseNameWeightedHipCrossover-23]
	_ = x[CrunchExerciseNameHollowRock-24]
	_ = x[CrunchExerciseNameWeightedHollowRock-25]
	_ = x[CrunchExerciseNameInclineReverseCrunch-26]
	_ = x[CrunchExerciseNameWeightedInclineReverseCrunch-27]
	_ = x[CrunchExerciseNameKneelingCableCrunch-28]
	_ = x[CrunchExerciseNameKneelingCrossCrunch-29]
	_ = x[CrunchExerciseNameWeightedKneelingCrossCrunch-30]
	_ = x[CrunchExerciseNameKneelingObliqueCableCrunch-31]
	_ = x[CrunchExerciseNameKneesToElbow-32]
	_ = x[CrunchExerciseNameLegExtensions-33]
	_ = x[CrunchExerciseNameWeightedLegExtensions-34]
	_ = x[CrunchExerciseNameLegLevers-35]
	_ = x[CrunchExerciseNameMcgillCurlUp-36]
	_ = x[CrunchExerciseNameWeightedMcgillCurlUp-37]
	_ = x[CrunchExerciseNameModifiedPilatesRollUpWithBall-38]
	_ = x[CrunchExerciseNameWeightedModifiedPilatesRollUpWithBall-39]
	_ = x[CrunchExerciseNamePilatesCrunch-40]
	_ = x[CrunchExerciseNameWeightedPilatesCrunch-41]
	_ = x[CrunchExerciseNamePilatesRollUpWithBall-42]
	_ = x[CrunchExerciseNameWeightedPilatesRollUpWithBall-43]
	_ = x[CrunchExerciseNameRaisedLegsCrunch-44]
	_ = x[CrunchExerciseNameWeightedRaisedLegsCrunch-45]
	_ = x[CrunchExerciseNameReverseCrunch-46]
	_ = x[CrunchExerciseNameWeightedReverseCrunch-47]
	_ = x[CrunchExerciseNameReverseCrunchOnABench-48]
	_ = x[CrunchExerciseNameWeightedReverseCrunchOnABench-49]
	_ = x[CrunchExerciseNameReverseCurlAndLift-50]
	_ = x[CrunchExerciseNameWeightedReverseCurlAndLift-51]
	_ = x[CrunchExerciseNameRotationalLift-52]
	_ = x[CrunchExerciseNameWeightedRotationalLift-53]
	_ = x[CrunchExerciseNameSeatedAlternatingReverseCrunch-54]
	_ = x[CrunchExerciseNameWeightedSeatedAlternatingReverseCrunch-55]
	_ = x[CrunchExerciseNameSeatedLegU-56]
	_ = x[CrunchExerciseNameWeightedSeatedLegU-57]
	_ = x[CrunchExerciseNameSideToSideCrunchAndWeave-58]
	_ = x[CrunchExerciseNameWeightedSideToSideCrunchAndWeave-59]
	_ = x[CrunchExerciseNameSingleLegReverseCrunch-60]
	_ = x[CrunchExerciseNameWeightedSingleLegReverseCrunch-61]
	_ = x[CrunchExerciseNameSkaterCrunchCross-62]
	_ = x[CrunchExerciseNameWeightedSkaterCrunchCross-63]
	_ = x[CrunchExerciseNameStandingCableCrunch-64]
	_ = x[CrunchExerciseNameStandingSideCrunch-65]
	_ = x[CrunchExerciseNameStepClimb-66]
	_ = x[CrunchExerciseNameWeightedStepClimb-67]
	_ = x[CrunchExerciseNameSwissBallCrunch-68]
	_ = x[CrunchExerciseNameSwissBallReverseCrunch-69]
	_ = x[CrunchExerciseNameWeightedSwissBallReverseCrunch-70]
	_ = x[CrunchExerciseNameSwissBallRussianTwist-71]
	_ = x[CrunchExerciseNameWeightedSwissBallRussianTwist-72]
	_ = x[CrunchExerciseNameSwissBallSideCrunch-73]
	_ = x[CrunchExerciseNameWeightedSwissBallSideCrunch-74]
	_ = x[CrunchExerciseNameThoracicCrunchesOnFoamRoller-75]
	_ = x[CrunchExerciseNameWeightedThoracicCrunchesOnFoamRoller-76]
	_ = x[CrunchExerciseNameTricepsCrunch-77]
	_ = x[CrunchExerciseNameWeightedBicycleCrunch-78]
	_ = x[CrunchExerciseNameWeightedCrunch-79]
	_ = x[CrunchExerciseNameWeightedSwissBallCrunch-80]
	_ = x[CrunchExerciseNameToesToBar-81]
	_ = x[CrunchExerciseNameWeightedToesToBar-82]
	_ = x[CrunchExerciseNameCrunch-83]
	_ = x[CrunchExerciseNameStraightLegCrunchWithBall-84]
	_ = x[CrunchExerciseNameInvalid-65535]
}

const (
	_CrunchExerciseName_name_0 = "BicycleCrunchCableCrunchCircularArmCrunchCrossedArmsCrunchWeightedCrossedArmsCrunchCrossLegReverseCrunchWeightedCrossLegReverseCrunchCrunchChopWeightedCrunchChopDoubleCrunchWeightedDoubleCrunchElbowToKneeCrunchWeightedElbowToKneeCrunchFlutterKicksWeightedFlutterKicksFoamRollerReverseCrunchOnBenchWeightedFoamRollerReverseCrunchOnBenchFoamRollerReverseCrunchWithDumbbellFoamRollerReverseCrunchWithMedicineBallFrogPressHangingKneeRaiseObliqueCrunchWeightedHangingKneeRaiseObliqueCrunchHipCrossoverWeightedHipCrossoverHollowRockWeightedHollowRockInclineReverseCrunchWeightedInclineReverseCrunchKneelingCableCrunchKneelingCrossCrunchWeightedKneelingCrossCrunchKneelingObliqueCableCrunchKneesToElbowLegExtensionsWeightedLegExtensionsLegLeversMcgillCurlUpWeightedMcgillCurlUpModifiedPilatesRollUpWithBallWeightedModifiedPilatesRollUpWithBallPilatesCrunchWeightedPilatesCrunchPilatesRollUpWithBallWeightedPilatesRollUpWithBallRaisedLegsCrunchWeightedRaisedLegsCrunchReverseCrunchWeightedReverseCrunchReverseCrunchOnABenchWeightedReverseCrunchOnABenchReverseCurlAndLiftWeightedReverseCurlAndLiftRotationalLiftWeightedRotationalLiftSeatedAlternatingReverseCrunchWeightedSeatedAlternatingReverseCrunchSeatedLegUWeightedSeatedLegUSideToSideCrunchAndWeaveWeightedSideToSideCrunchAndWeaveSingleLegReverseCrunchWeightedSingleLegReverseCrunchSkaterCrunchCrossWeightedSkaterCrunchCrossStandingCableCrunchStandingSideCrunchStepClimbWeightedStepClimbSwissBallCrunchSwissBallReverseCrunchWeightedSwissBallReverseCrunchSwissBallRussianTwistWeightedSwissBallRussianTwistSwissBallSideCrunchWeightedSwissBallSideCrunchThoracicCrunchesOnFoamRollerWeightedThoracicCrunchesOnFoamRollerTricepsCrunchWeightedBicycleCrunchWeightedCrunchWeightedSwissBallCrunchToesToBarWeightedToesToBarCrunchStraightLegCrunchWithBall"
	_CrunchExerciseName_name_1 = "Invalid"
)

var (
	_CrunchExerciseName_index_0 = [...]uint16{0, 13, 24, 41, 58, 83, 104, 133, 143, 161, 173, 193, 210, 235, 247, 267, 297, 335, 370, 409, 418, 447, 484, 496, 516, 526, 544, 564, 592, 611, 630, 657, 683, 695, 708, 729, 738, 750, 770, 799, 836, 849, 870, 891, 920, 936, 960, 973, 994, 1015, 1044, 1062, 1088, 1102, 1124, 1154, 1192, 1202, 1220, 1244, 1276, 1298, 1328, 1345, 1370, 1389, 1407, 1416, 1433, 1448, 1470, 1500, 1521, 1550, 1569, 1596, 1624, 1660, 1673, 1694, 1708, 1731, 1740, 1757, 1763, 1788}
)

func (i CrunchExerciseName) String() string {
	switch {
	case 0 <= i && i <= 84:
		return _CrunchExerciseName_name_0[_CrunchExerciseName_index_0[i]:_CrunchExerciseName_index_0[i+1]]
	case i == 65535:
		return _CrunchExerciseName_name_1
	default:
		return "CrunchExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CurlExerciseNameAlternatingDumbbellBicepsCurl-0]
	_ = x[CurlExerciseNameAlternatingDumbbellBicepsCurlOnSwissBall-1]
	_ = x[CurlExerciseNameAlternatingInclineDumbbellBicepsCurl-2]
	_ = x[CurlExerciseNameBarbellBicepsCurl-3]
	_ = x[CurlExerciseNameBarbellReverseWristCurl-4]
	_ = x[CurlExerciseNameBarbellWristCurl-5]
	_ = x[CurlExerciseNameBehindTheBackBarbellReverseWristCurl-6]
	_ = x[CurlExerciseNameBehindTheBackOneArmCableCurl-7]
	_ = x[CurlExerciseNameCableBicepsCurl-8]
	_ = x[CurlExerciseNameCableHammerCurl-9]
	_ = x[CurlExerciseNameCheatingBarbellBicepsCurl-10]
	_ = x[CurlExerciseNameCloseGripEzBarBicepsCurl-11]
	_ = x[CurlExerciseNameCrossBodyDumbbellHammerCurl-12]
	_ = x[CurlExerciseNameDeadHangBicepsCurl-13]
	_ = x[CurlExerciseNameDeclineHammerCurl-14]
	_ = x[CurlExerciseNameDumbbellBicepsCurlWithStaticHold-15]
	_ = x[CurlExerciseNameDumbbellHammerCurl-16]
	_ = x[CurlExerciseNameDumbbellReverseWristCurl-17]
	_ = x[CurlExerciseNameDumbbellWristCurl-18]
	_ = x[CurlExerciseNameEzBarPreacherCurl-19]
	_ = x[CurlExerciseNameForwardBendBicepsCurl-20]
	_ = x[CurlExerciseNameHammerCurlToPress-21]
	_ = x[CurlExerciseNameInclineDumbbellBicepsCurl-22]
	_ = x[CurlExerciseNameInclineOffsetThumbDumbbellCurl-23]
	_ = x[CurlExerciseNameKettlebellBicepsCurl-24]
	_ = x[CurlExerciseNameLyingConcentrationCableCurl-25]
	_ = x[CurlExerciseNameOneArmPreacherCurl-26]
	_ = x[CurlExerciseNamePlatePinchCurl-27]
	_ = x[CurlExerciseNamePreacherCurlWithCable-28]
	_ = x[CurlExerciseNameReverseEzBarCurl-29]
	_ = x[CurlExerciseNameReverseGripWristCurl-30]
	_ = x[CurlExerciseNameReverseGripBarbellBicepsCurl-31]
	_ = x[CurlExerciseNameSeatedAlternatingDumbbellBicepsCurl-32]
	_ = x[CurlExerciseNameSeatedDumbbellBicepsCurl-33]
	_ = x[CurlExerciseNameSeatedReverseDumbbellCurl-34]
	_ = x[CurlExerciseNameSplitStanceOffsetPinkyDumbbellCurl-35]
	_ = x[CurlExerciseNameStandingAlternatingDumbbellCurls-36]
	_ = x[CurlExerciseNameStandingDumbbellBicepsCurl-37]
	_ = x[CurlExerciseNameStandingEzBarBicepsCurl-38]
	_ = x[CurlExerciseNameStaticCurl-39]
	_ = x[CurlExerciseNameSwissBallDumbbellOverheadTricepsExtension-40]
	_ = x[CurlExerciseNameSwissBallEzBarPreacherCurl-41]
	_ = x[CurlExerciseNameTwistingStandingDumbbellBicepsCurl-42]
	_ = x[CurlExerciseNameWideGripEzBarBicepsCurl-43]
	_ = x[CurlExerciseNameInvalid-65535]
}

const (
	_CurlExerciseName_name_0 = "AlternatingDumbbellBicepsCurlAlternatingDumbbellBicepsCurlOnSwissBallAlternatingInclineDumbbellBicepsCurlBarbellBicepsCurlBarbellReverseWristCurlBarbellWristCurlBehindTheBackBarbellReverseWristCurlBehindTheBackOneArmCableCurlCableBicepsCurlCableHammerCurlCheatingBarbellBicepsCurlCloseGripEzBarBicepsCurlCrossBodyDumbbellHammerCurlDeadHangBicepsCurlDeclineHammerCurlDumbbellBicepsCurlWithStaticHoldDumbbellHammerCurlDumbbellReverseWristCurlDumbbellWristCurlEzBarPreacherCurlForwardBendBicepsCurlHammerCurlToPressInclineDumbbellBicepsCurlInclineOffsetThumbDumbbellCurlKettlebellBicepsCurlLyingConcentrationCableCurlOneArmPreacherCurlPlatePinchCurlPreacherCurlWithCableReverseEzBarCurlReverseGripWristCurlReverseGripBarbellBicepsCurlSeatedAlternatingDumbbellBicepsCurlSeatedDumbbellBicepsCurlSeatedReverseDumbbellCurlSplitStanceOffsetPinkyDumbbellCurlStandingAlternatingDumbbellCurlsStandingDumbbellBicepsCurlStandingEzBarBicepsCurlStaticCurlSwissBallDumbbellOverheadTricepsExtensionSwissBallEzBarPreacherCurlTwistingStandingDumbbellBicepsCurlWideGripEzBarBicepsCurl"
	_CurlExerciseName_name_1 = "Invalid"
)

var (
	_CurlExerciseName_index_0 = [...]uint16{0, 29, 69, 105, 122, 145, 161, 197, 225, 240, 255, 280, 304, 331, 349, 366, 398, 416, 440, 457, 474, 495, 512, 537, 567, 587, 614, 632, 646, 667, 683, 703, 731, 766, 790, 815, 849, 881, 907, 930, 940, 981, 1007, 1041, 1064}
)

func (i CurlExerciseName) String() string {
	switch {
	case 0 <= i && i <= 43:
		return _CurlExerciseName_name_0[_CurlExerciseName_index_0[i]:_CurlExerciseName_index_0[i+1]]
	case i == 65535:
		return _CurlExerciseName_name_1
	default:
		return "CurlExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DateModeDayMonth-0]
	_ = x[DateModeMonthDay-1]
	_ = x[DateModeInvalid-255]
}

const (
	_DateMode_name_0 = "DayMonthMonthDay"
	_DateMode_name_1 = "Invalid"
)

var (
	_DateMode_index_0 = [...]uint8{0, 8, 16}
)

func (i DateMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DateMode_name_0[_DateMode_index_0[i]:_DateMode_index_0[i+1]]
	case i == 255:
		return _DateMode_name_1
	default:
		return "DateMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DayOfWeekSunday-0]
	_ = x[DayOfWeekMonday-1]
	_ = x[DayOfWeekTuesday-2]
	_ = x[DayOfWeekWednesday-3]
	_ = x[DayOfWeekThursday-4]
	_ = x[DayOfWeekFriday-5]
	_ = x[DayOfWeekSaturday-6]
	_ = x[DayOfWeekInvalid-255]
}

const (
	_DayOfWeek_name_0 = "SundayMondayTuesdayWednesdayThursdayFridaySaturday"
	_DayOfWeek_name_1 = "Invalid"
)

var (
	_DayOfWeek_index_0 = [...]uint8{0, 6, 12, 19, 28, 36, 42, 50}
)

func (i DayOfWeek) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _DayOfWeek_name_0[_DayOfWeek_index_0[i]:_DayOfWeek_index_0[i+1]]
	case i == 255:
		return _DayOfWeek_name_1
	default:
		return "DayOfWeek(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DeadliftExerciseNameBarbellDeadlift-0]
	_ = x[DeadliftExerciseNameBarbellStraightLegDeadlift-1]
	_ = x[DeadliftExerciseNameDumbbellDeadlift-2]
	_ = x[DeadliftExerciseNameDumbbellSingleLegDeadliftToRow-3]
	_ = x[DeadliftExerciseNameDumbbellStraightLegDeadlift-4]
	_ = x[DeadliftExerciseNameKettlebellFloorToShelf-5]
	_ = x[DeadliftExerciseNameOneArmOneLegDeadlift-6]
	_ = x[DeadliftExerciseNameRackPull-7]
	_ = x[DeadliftExerciseNameRotationalDumbbellStraightLegDeadlift-8]
	_ = x[DeadliftExerciseNameSingleArmDeadlift-9]
	_ = x[DeadliftExerciseNameSingleLegBarbellDeadlift-10]
	_ = x[DeadliftExerciseNameSingleLegBarbellStraightLegDeadlift-11]
	_ = x[DeadliftExerciseNameSingleLegDeadliftWithBarbell-12]
	_ = x[DeadliftExerciseNameSingleLegRdlCircuit-13]
	_ = x[DeadliftExerciseNameSingleLegRomanianDeadliftWithDumbbell-14]
	_ = x[DeadliftExerciseNameSumoDeadlift-15]
	_ = x[DeadliftExerciseNameSumoDeadliftHighPull-16]
	_ = x[DeadliftExerciseNameTrapBarDeadlift-17]
	_ = x[DeadliftExerciseNameWideGripBarbellDeadlift-18]
	_ = x[DeadliftExerciseNameInvalid-65535]
}

const (
	_DeadliftExerciseName_name_0 = "BarbellDeadliftBarbellStraightLegDeadliftDumbbellDeadliftDumbbellSingleLegDeadliftToRowDumbbellStraightLegDeadliftKettlebellFloorToShelfOneArmOneLegDeadliftRackPullRotationalDumbbellStraightLegDeadliftSingleArmDeadliftSingleLegBarbellDeadliftSingleLegBarbellStraightLegDeadliftSingleLegDeadliftWithBarbellSingleLegRdlCircuitSingleLegRomanianDeadliftWithDumbbellSumoDeadliftSumoDeadliftHighPullTrapBarDeadliftWideGripBarbellDeadlift"
	_DeadliftExerciseName_name_1 = "Invalid"
)

var (
	_DeadliftExerciseName_index_0 = [...]uint16{0, 15, 41, 57, 87, 114, 136, 156, 164, 201, 218, 242, 277, 305, 324, 361, 373, 393, 408, 431}
)

func (i DeadliftExerciseName) String() string {
	switch {
	case 0 <= i && i <= 18:
		return _DeadliftExerciseName_name_0[_DeadliftExerciseName_index_0[i]:_DeadliftExerciseName_index_0[i+1]]
	case i == 65535:
		return _DeadliftExerciseName_name_1
	default:
		return "DeadliftExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DeviceIndexCreator-0]
	_ = x[DeviceIndexInvalid-255]
}

const (
	_DeviceIndex_name_0 = "Creator"
	_DeviceIndex_name_1 = "Invalid"
)

func (i DeviceIndex) String() string {
	switch {
	case i == 0:
		return _DeviceIndex_name_0
	case i == 255:
		return _DeviceIndex_name_1
	default:
		return "DeviceIndex(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DigitalWatchfaceLayoutTraditional-0]
	_ = x[DigitalWatchfaceLayoutModern-1]
	_ = x[DigitalWatchfaceLayoutBold-2]
	_ = x[DigitalWatchfaceLayoutInvalid-255]
}

const (
	_DigitalWatchfaceLayout_name_0 = "TraditionalModernBold"
	_DigitalWatchfaceLayout_name_1 = "Invalid"
)

var (
	_DigitalWatchfaceLayout_index_0 = [...]uint8{0, 11, 17, 21}
)

func (i DigitalWatchfaceLayout) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DigitalWatchfaceLayout_name_0[_DigitalWatchfaceLayout_index_0[i]:_DigitalWatchfaceLayout_index_0[i+1]]
	case i == 255:
		return _DigitalWatchfaceLayout_name_1
	default:
		return "DigitalWatchfaceLayout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DisplayHeartBpm-0]
	_ = x[DisplayHeartMax-1]
	_ = x[DisplayHeartReserve-2]
	_ = x[DisplayHeartInvalid-255]
}

const (
	_DisplayHeart_name_0 = "BpmMaxReserve"
	_DisplayHeart_name_1 = "Invalid"
)

var (
	_DisplayHeart_index_0 = [...]uint8{0, 3, 6, 13}
)

func (i DisplayHeart) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DisplayHeart_name_0[_DisplayHeart_index_0[i]:_DisplayHeart_index_0[i+1]]
	case i == 255:
		return _DisplayHeart_name_1
	default:
		return "DisplayHeart(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DisplayMeasureMetric-0]
	_ = x[DisplayMeasureStatute-1]
	_ = x[DisplayMeasureNautical-2]
	_ = x[DisplayMeasureInvalid-255]
}

const (
	_DisplayMeasure_name_0 = "MetricStatuteNautical"
	_DisplayMeasure_name_1 = "Invalid"
)

var (
	_DisplayMeasure_index_0 = [...]uint8{0, 6, 13, 21}
)

func (i DisplayMeasure) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DisplayMeasure_name_0[_DisplayMeasure_index_0[i]:_DisplayMeasure_index_0[i+1]]
	case i == 255:
		return _DisplayMeasure_name_1
	default:
		return "DisplayMeasure(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DisplayOrientationAuto-0]
	_ = x[DisplayOrientationPortrait-1]
	_ = x[DisplayOrientationLandscape-2]
	_ = x[DisplayOrientationPortraitFlipped-3]
	_ = x[DisplayOrientationLandscapeFlipped-4]
	_ = x[DisplayOrientationInvalid-255]
}

const (
	_DisplayOrientation_name_0 = "AutoPortraitLandscapePortraitFlippedLandscapeFlipped"
	_DisplayOrientation_name_1 = "Invalid"
)

var (
	_DisplayOrientation_index_0 = [...]uint8{0, 4, 12, 21, 36, 52}
)

func (i DisplayOrientation) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _DisplayOrientation_name_0[_DisplayOrientation_index_0[i]:_DisplayOrientation_index_0[i+1]]
	case i == 255:
		return _DisplayOrientation_name_1
	default:
		return "DisplayOrientation(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DisplayPositionDegree-0]
	_ = x[DisplayPositionDegreeMinute-1]
	_ = x[DisplayPositionDegreeMinuteSecond-2]
	_ = x[DisplayPositionAustrianGrid-3]
	_ = x[DisplayPositionBritishGrid-4]
	_ = x[DisplayPositionDutchGrid-5]
	_ = x[DisplayPositionHungarianGrid-6]
	_ = x[DisplayPositionFinnishGrid-7]
	_ = x[DisplayPositionGermanGrid-8]
	_ = x[DisplayPositionIcelandicGrid-9]
	_ = x[DisplayPositionIndonesianEquatorial-10]
	_ = x[DisplayPositionIndonesianIrian-11]
	_ = x[DisplayPositionIndonesianSouthern-12]
	_ = x[DisplayPositionIndiaZone0-13]
	_ = x[DisplayPositionIndiaZoneIA-14]
	_ = x[DisplayPositionIndiaZoneIB-15]
	_ = x[DisplayPositionIndiaZoneIIA-16]
	_ = x[DisplayPositionIndiaZoneIIB-17]
	_ = x[DisplayPositionIndiaZoneIIIA-18]
	_ = x[DisplayPositionIndiaZoneIIIB-19]
	_ = x[DisplayPositionIndiaZoneIVA-20]
	_ = x[DisplayPositionIndiaZoneIVB-21]
	_ = x[DisplayPositionIrishTransverse-22]
	_ = x[DisplayPositionIrishGrid-23]
	_ = x[DisplayPositionLoran-24]
	_ = x[DisplayPositionMaidenheadGrid-25]
	_ = x[DisplayPositionMgrsGrid-26]
	_ = x[DisplayPositionNewZealandGrid-27]
	_ = x[DisplayPositionNewZealandTransverse-28]
	_ = x[DisplayPositionQatarGrid-29]
	_ = x[DisplayPositionModifiedSwedishGrid-30]
	_ = x[DisplayPositionSwedishGrid-31]
	_ = x[DisplayPositionSouthAfricanGrid-32]
	_ = x[DisplayPositionSwissGrid-33]
	_ = x[DisplayPositionTaiwanGrid-34]
	_ = x[DisplayPositionUnitedStatesGrid-35]
	_ = x[DisplayPositionUtmUpsGrid-36]
	_ = x[DisplayPositionWestMalayan-37]
	_ = x[DisplayPositionBorneoRso-38]
	_ = x[DisplayPositionEstonianGrid-39]
	_ = x[DisplayPositionLatvianGrid-40]
	_ = x[DisplayPositionSwedishRef99Grid-41]
	_ = x[DisplayPositionInvalid-255]
}

const (
	_DisplayPosition_name_0 = "DegreeDegreeMinuteDegreeMinuteSecondAustrianGridBritishGridDutchGridHungarianGridFinnishGridGermanGridIcelandicGridIndonesianEquatorialIndonesianIrianIndonesianSouthernIndiaZone0IndiaZoneIAIndiaZoneIBIndiaZoneIIAIndiaZoneIIBIndiaZoneIIIAIndiaZoneIIIBIndiaZoneIVAIndiaZoneIVBIrishTransverseIrishGridLoranMaidenheadGridMgrsGridNewZealandGridNewZealandTransverseQatarGridModifiedSwedishGridSwedishGridSouthAfricanGridSwissGridTaiwanGridUnitedStatesGridUtmUpsGridWestMalayanBorneoRsoEstonianGridLatvianGridSwedishRef99Grid"
	_DisplayPosition_name_1 = "Invalid"
)

var (
	_DisplayPosition_index_0 = [...]uint16{0, 6, 18, 36, 48, 59, 68, 81, 92, 102, 115, 135, 150, 168, 178, 189, 200, 212, 224, 237, 250, 262, 274, 289, 298, 303, 317, 325, 339, 359, 368, 387, 398, 414, 423, 433, 449, 459, 470, 479, 491, 502, 518}
)

func (i DisplayPosition) String() string {
	switch {
	case 0 <= i && i <= 41:
		return _DisplayPosition_name_0[_DisplayPosition_index_0[i]:_DisplayPosition_index_0[i+1]]
	case i == 255:
		return _DisplayPosition_name_1
	default:
		return "DisplayPosition(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DisplayPowerWatts-0]
	_ = x[DisplayPowerPercentFtp-1]
	_ = x[DisplayPowerInvalid-255]
}

const (
	_DisplayPower_name_0 = "WattsPercentFtp"
	_DisplayPower_name_1 = "Invalid"
)

var (
	_DisplayPower_index_0 = [...]uint8{0, 5, 15}
)

func (i DisplayPower) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DisplayPower_name_0[_DisplayPower_index_0[i]:_DisplayPower_index_0[i+1]]
	case i == 255:
		return _DisplayPower_name_1
	default:
		return "DisplayPower(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DiveAlarmTypeDepth-0]
	_ = x[DiveAlarmTypeTime-1]
	_ = x[DiveAlarmTypeInvalid-255]
}

const (
	_DiveAlarmType_name_0 = "DepthTime"
	_DiveAlarmType_name_1 = "Invalid"
)

var (
	_DiveAlarmType_index_0 = [...]uint8{0, 5, 9}
)

func (i DiveAlarmType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DiveAlarmType_name_0[_DiveAlarmType_index_0[i]:_DiveAlarmType_index_0[i+1]]
	case i == 255:
		return _DiveAlarmType_name_1
	default:
		return "DiveAlarmType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DiveBacklightModeAtDepth-0]
	_ = x[DiveBacklightModeAlwaysOn-1]
	_ = x[DiveBacklightModeInvalid-255]
}

const (
	_DiveBacklightMode_name_0 = "AtDepthAlwaysOn"
	_DiveBacklightMode_name_1 = "Invalid"
)

var (
	_DiveBacklightMode_index_0 = [...]uint8{0, 7, 15}
)

func (i DiveBacklightMode) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _DiveBacklightMode_name_0[_DiveBacklightMode_index_0[i]:_DiveBacklightMode_index_0[i+1]]
	case i == 255:
		return _DiveBacklightMode_name_1
	default:
		return "DiveBacklightMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DiveGasStatusDisabled-0]
	_ = x[DiveGasStatusEnabled-1]
	_ = x[DiveGasStatusBackupOnly-2]
	_ = x[DiveGasStatusInvalid-255]
}

const (
	_DiveGasStatus_name_0 = "DisabledEnabledBackupOnly"
	_DiveGasStatus_name_1 = "Invalid"
)

var (
	_DiveGasStatus_index_0 = [...]uint8{0, 8, 15, 25}
)

func (i DiveGasStatus) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _DiveGasStatus_name_0[_DiveGasStatus_index_0[i]:_DiveGasStatus_index_0[i+1]]
	case i == 255:
		return _DiveGasStatus_name_1
	default:
		return "DiveGasStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EventTimer-0]
	_ = x[EventWorkout-3]
	_ = x[EventWorkoutStep-4]
	_ = x[EventPowerDown-5]
	_ = x[EventPowerUp-6]
	_ = x[EventOffCourse-7]
	_ = x[EventSession-8]
	_ = x[EventLap-9]
	_ = x[EventCoursePoint-10]
	_ = x[EventBattery-11]
	_ = x[EventVirtualPartnerPace-12]
	_ = x[EventHrHighAlert-13]
	_ = x[EventHrLowAlert-14]
	_ = x[EventSpeedHighAlert-15]
	_ = x[EventSpeedLowAlert-16]
	_ = x[EventCadHighAlert-17]
	_ = x[EventCadLowAlert-18]
	_ = x[EventPowerHighAlert-19]
	_ = x[EventPowerLowAlert-20]
	_ = x[EventRecoveryHr-21]
	_ = x[EventBatteryLow-22]
	_ = x[EventTimeDurationAlert-23]
	_ = x[EventDistanceDurationAlert-24]
	_ = x[EventCalorieDurationAlert-25]
	_ = x[EventActivity-26]
	_ = x[EventFitnessEquipment-27]
	_ = x[EventLength-28]
	_ = x[EventUserMarker-32]
	_ = x[EventSportPoint-33]
	_ = x[EventCalibration-36]
	_ = x[EventFrontGearChange-42]
	_ = x[EventRearGearChange-43]
	_ = x[EventRiderPositionChange-44]
	_ = x[EventElevHighAlert-45]
	_ = x[EventElevLowAlert-46]
	_ = x[EventCommTimeout-47]
	_ = x[EventRadarThreatAlert-75]
	_ = x[EventInvalid-255]
}

const (
	_Event_name_0 = "Timer"
	_Event_name_1 = "WorkoutWorkoutStepPowerDownPowerUpOffCourseSessionLapCoursePointBatteryVirtualPartnerPaceHrHighAlertHrLowAlertSpeedHighAlertSpeedLowAlertCadHighAlertCadLowAlertPowerHighAlertPowerLowAlertRecoveryHrBatteryLowTimeDurationAlertDistanceDurationAlertCalorieDurationAlertActivityFitnessEquipmentLength"
	_Event_name_2 = "UserMarkerSportPoint"
	_Event_name_3 = "Calibration"
	_Event_name_4 = "FrontGearChangeRearGearChangeRiderPositionChangeElevHighAlertElevLowAlertCommTimeout"
	_Event_name_5 = "RadarThreatAlert"
	_Event_name_6 = "Invalid"
)

var (
	_Event_index_1 = [...]uint16{0, 7, 18, 27, 34, 43, 50, 53, 64, 71, 89, 100, 110, 124, 137, 149, 160, 174, 187, 197, 207, 224, 245, 265, 273, 289, 295}
	_Event_index_2 = [...]uint8{0, 10, 20}
	_Event_index_4 = [...]uint8{0, 15, 29, 48, 61, 73, 84}
)

func (i Event) String() string {
	switch {
	case i == 0:
		return _Event_name_0
	case 3 <= i && i <= 28:
		i -= 3
		return _Event_name_1[_Event_index_1[i]:_Event_index_1[i+1]]
	case 32 <= i && i <= 33:
		i -= 32
		return _Event_name_2[_Event_index_2[i]:_Event_index_2[i+1]]
	case i == 36:
		return _Event_name_3
	case 42 <= i && i <= 47:
		i -= 42
		return _Event_name_4[_Event_index_4[i]:_Event_index_4[i+1]]
	case i == 75:
		return _Event_name_5
	case i == 255:
		return _Event_name_6
	default:
		return "Event(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EventTypeStart-0]
	_ = x[EventTypeStop-1]
	_ = x[EventTypeConsecutiveDepreciated-2]
	_ = x[EventTypeMarker-3]
	_ = x[EventTypeStopAll-4]
	_ = x[EventTypeBeginDepreciated-5]
	_ = x[EventTypeEndDepreciated-6]
	_ = x[EventTypeEndAllDepreciated-7]
	_ = x[EventTypeStopDisable-8]
	_ = x[EventTypeStopDisableAll-9]
	_ = x[EventTypeInvalid-255]
}

const (
	_EventType_name_0 = "StartStopConsecutiveDepreciatedMarkerStopAllBeginDepreciatedEndDepreciatedEndAllDepreciatedStopDisableStopDisableAll"
	_EventType_name_1 = "Invalid"
)

var (
	_EventType_index_0 = [...]uint8{0, 5, 9, 31, 37, 44, 60, 74, 91, 102, 116}
)

func (i EventType) String() string {
	switch {
	case 0 <= i && i <= 9:
		return _EventType_name_0[_EventType_index_0[i]:_EventType_index_0[i+1]]
	case i == 255:
		return _EventType_name_1
	default:
		return "EventType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExdDataUnitsNoUnits-0]
	_ = x[ExdDataUnitsLaps-1]
	_ = x[ExdDataUnitsMilesPerHour-2]
	_ = x[ExdDataUnitsKilometersPerHour-3]
	_ = x[ExdDataUnitsFeetPerHour-4]
	_ = x[ExdDataUnitsMetersPerHour-5]
	_ = x[ExdDataUnitsDegreesCelsius-6]
	_ = x[ExdDataUnitsDegreesFarenheit-7]
	_ = x[ExdDataUnitsZone-8]
	_ = x[ExdDataUnitsGear-9]
	_ = x[ExdDataUnitsRpm-10]
	_ = x[ExdDataUnitsBpm-11]
	_ = x[ExdDataUnitsDegrees-12]
	_ = x[ExdDataUnitsMillimeters-13]
	_ = x[ExdDataUnitsMeters-14]
	_ = x[ExdDataUnitsKilometers-15]
	_ = x[ExdDataUnitsFeet-16]
	_ = x[ExdDataUnitsYards-17]
	_ = x[ExdDataUnitsKilofeet-18]
	_ = x[ExdDataUnitsMiles-19]
	_ = x[ExdDataUnitsTime-20]
	_ = x[ExdDataUnitsEnumTurnType-21]
	_ = x[ExdDataUnitsPercent-22]
	_ = x[ExdDataUnitsWatts-23]
	_ = x[ExdDataUnitsWattsPerKilogram-24]
	_ = x[ExdDataUnitsEnumBatteryStatus-25]
	_ = x[ExdDataUnitsEnumBikeLightBeamAngleMode-26]
	_ = x[ExdDataUnitsEnumBikeLightBatteryStatus-27]
	_ = x[ExdDataUnitsEnumBikeLightNetworkConfigType-28]
	_ = x[ExdDataUnitsLights-29]
	_ = x[ExdDataUnitsSeconds-30]
	_ = x[ExdDataUnitsMinutes-31]
	_ = x[ExdDataUnitsHours-32]
	_ = x[ExdDataUnitsCalories-33]
	_ = x[ExdDataUnitsKilojoules-34]
	_ = x[ExdDataUnitsMilliseconds-35]
	_ = x[ExdDataUnitsSecondPerMile-36]
	_ = x[ExdDataUnitsSecondPerKilometer-37]
	_ = x[ExdDataUnitsCentimeter-38]
	_ = x[ExdDataUnitsEnumCoursePoint-39]
	_ = x[ExdDataUnitsBradians-40]
	_ = x[ExdDataUnitsEnumSport-41]
	_ = x[ExdDataUnitsInchesHg-42]
	_ = x[ExdDataUnitsMmHg-43]
	_ = x[ExdDataUnitsMbars-44]
	_ = x[ExdDataUnitsHectoPascals-45]
	_ = x[ExdDataUnitsFeetPerMin-46]
	_ = x[ExdDataUnitsMetersPerMin-47]
	_ = x[ExdDataUnitsMetersPerSec-48]
	_ = x[ExdDataUnitsEightCardinal-49]
	_ = x[ExdDataUnitsInvalid-255]
}

const (
	_ExdDataUnits_name_0 = "NoUnitsLapsMilesPerHourKilometersPerHourFeetPerHourMetersPerHourDegreesCelsiusDegreesFarenheitZoneGearRpmBpmDegreesMillimetersMetersKilometersFeetYardsKilofeetMilesTimeEnumTurnTypePercentWattsWattsPerKilogramEnumBatteryStatusEnumBikeLightBeamAngleModeEnumBikeLightBatteryStatusEnumBikeLightNetworkConfigTypeLightsSecondsMinutesHoursCaloriesKilojoulesMillisecondsSecondPerMileSecondPerKilometerCentimeterEnumCoursePointBradiansEnumSportInchesHgMmHgMbarsHectoPascalsFeetPerMinMetersPerMinMetersPerSecEightCardinal"
	_ExdDataUnits_name_1 = "Invalid"
)

var (
	_ExdDataUnits_index_0 = [...]uint16{0, 7, 11, 23, 40, 51, 64, 78, 94, 98, 102, 105, 108, 115, 126, 132, 142, 146, 151, 159, 164, 168, 180, 187, 192, 208, 225, 251, 277, 307, 313, 320, 327, 332, 340, 350, 362, 375, 393, 403, 418, 426, 435, 443, 447, 452, 464, 474, 486, 498, 511}
)

func (i ExdDataUnits) String() string {
	switch {
	case 0 <= i && i <= 49:
		return _ExdDataUnits_name_0[_ExdDataUnits_index_0[i]:_ExdDataUnits_index_0[i+1]]
	case i == 255:
		return _ExdDataUnits_name_1
	default:
		return "ExdDataUnits(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExdDescriptorsBikeLightBatteryStatus-0]
	_ = x[ExdDescriptorsBeamAngleStatus-1]
	_ = x[ExdDescriptorsBateryLevel-2]
	_ = x[ExdDescriptorsLightNetworkMode-3]
	_ = x[ExdDescriptorsNumberLightsConnected-4]
	_ = x[ExdDescriptorsCadence-5]
	_ = x[ExdDescriptorsDistance-6]
	_ = x[ExdDescriptorsEstimatedTimeOfArrival-7]
	_ = x[ExdDescriptorsHeading-8]
	_ = x[ExdDescriptorsTime-9]
	_ = x[ExdDescriptorsBatteryLevel-10]
	_ = x[ExdDescriptorsTrainerResistance-11]
	_ = x[ExdDescriptorsTrainerTargetPower-12]
	_ = x[ExdDescriptorsTimeSeated-13]
	_ = x[ExdDescriptorsTimeStanding-14]
	_ = x[ExdDescriptorsElevation-15]
	_ = x[ExdDescriptorsGrade-16]
	_ = x[ExdDescriptorsAscent-17]
	_ = x[ExdDescriptorsDescent-18]
	_ = x[ExdDescriptorsVerticalSpeed-19]
	_ = x[ExdDescriptorsDi2BatteryLevel-20]
	_ = x[ExdDescriptorsFrontGear-21]
	_ = x[ExdDescriptorsRearGear-22]
	_ = x[ExdDescriptorsGearRatio-23]
	_ = x[ExdDescriptorsHeartRate-24]
	_ = x[ExdDescriptorsHeartRateZone-25]
	_ = x[ExdDescriptorsTimeInHeartRateZone-26]
	_ = x[ExdDescriptorsHeartRateReserve-27]
	_ = x[ExdDescriptorsCalories-28]
	_ = x[ExdDescriptorsGpsAccuracy-29]
	_ = x[ExdDescriptorsGpsSignalStrength-30]
	_ = x[ExdDescriptorsTemperature-31]
	_ = x[ExdDescriptorsTimeOfDay-32]
	_ = x[ExdDescriptorsBalance-33]
	_ = x[ExdDescriptorsPedalSmoothness-34]
	_ = x[ExdDescriptorsPower-35]
	_ = x[ExdDescriptorsFunctionalThresholdPower-36]
	_ = x[ExdDescriptorsIntensityFactor-37]
	_ = x[ExdDescriptorsWork-38]
	_ = x[ExdDescriptorsPowerRatio-39]
	_ = x[ExdDescriptorsNormalizedPower-40]
	_ = x[ExdDescriptorsTrainingStressScore-41]
	_ = x[ExdDescriptorsTimeOnZone-42]
	_ = x[ExdDescriptorsSpeed-43]
	_ = x[ExdDescriptorsLaps-44]
	_ = x[ExdDescriptorsReps-45]
	_ = x[ExdDescriptorsWorkoutStep-46]
	_ = x[ExdDescriptorsCourseDistance-47]
	_ = x[ExdDescriptorsNavigationDistance-48]
	_ = x[ExdDescriptorsCourseEstimatedTimeOfArrival-49]
	_ = x[ExdDescriptorsNavigationEstimatedTimeOfArrival-50]
	_ = x[ExdDescriptorsCourseTime-51]
	_ = x[ExdDescriptorsNavigationTime-52]
	_ = x[ExdDescriptorsCourseHeading-53]
	_ = x[ExdDescriptorsNavigationHeading-54]
	_ = x[ExdDescriptorsPowerZone-55]
	_ = x[ExdDescriptorsTorqueEffectiveness-56]
	_ = x[ExdDescriptorsTimerTime-57]
	_ = x[ExdDescriptorsPowerWeightRatio-58]
	_ = x[ExdDescriptorsLeftPlatformCenterOffset-59]
	_ = x[ExdDescriptorsRightPlatformCenterOffset-60]
	_ = x[ExdDescriptorsLeftPowerPhaseStartAngle-61]
	_ = x[ExdDescriptorsRightPowerPhaseStartAngle-62]
	_ = x[ExdDescriptorsLeftPowerPhaseFinishAngle-63]
	_ = x[ExdDescriptorsRightPowerPhaseFinishAngle-64]
	_ = x[ExdDescriptorsGears-65]
	_ = x[ExdDescriptorsPace-66]
	_ = x[ExdDescriptorsTrainingEffect-67]
	_ = x[ExdDescriptorsVerticalOscillation-68]
	_ = x[ExdDescriptorsVerticalRatio-69]
	_ = x[ExdDescriptorsGroundContactTime-70]
	_ = x[ExdDescriptorsLeftGroundContactTimeBalance-71]
	_ = x[ExdDescriptorsRightGroundContactTimeBalance-72]
	_ = x[ExdDescriptorsStrideLength-73]
	_ = x[ExdDescriptorsRunningCadence-74]
	_ = x[ExdDescriptorsPerformanceCondition-75]
	_ = x[ExdDescriptorsCourseType-76]
	_ = x[ExdDescriptorsTimeInPowerZone-77]
	_ = x[ExdDescriptorsNavigationTurn-78]
	_ = x[ExdDescriptorsCourseLocation-79]
	_ = x[ExdDescriptorsNavigationLocation-80]
	_ = x[ExdDescriptorsCompass-81]
	_ = x[ExdDescriptorsGearCombo-82]
	_ = x[ExdDescriptorsMuscleOxygen-83]
	_ = x[ExdDescriptorsIcon-84]
	_ = x[ExdDescriptorsCompassHeading-85]
	_ = x[ExdDescriptorsGpsHeading-86]
	_ = x[ExdDescriptorsGpsElevation-87]
	_ = x[ExdDescriptorsAnaerobicTrainingEffect-88]
	_ = x[ExdDescriptorsCourse-89]
	_ = x[ExdDescriptorsOffCourse-90]
	_ = x[ExdDescriptorsGlideRatio-91]
	_ = x[ExdDescriptorsVerticalDistance-92]
	_ = x[ExdDescriptorsVmg-93]
	_ = x[ExdDescriptorsAmbientPressure-94]
	_ = x[ExdDescriptorsPressure-95]
	_ = x[ExdDescriptorsVam-96]
	_ = x[ExdDescriptorsInvalid-255]
}

const (
	_ExdDescriptors_name_0 = "BikeLightBatteryStatusBeamAngleStatusBateryLevelLightNetworkModeNumberLightsConnectedCadenceDistanceEstimatedTimeOfArrivalHeadingTimeBatteryLevelTrainerResistanceTrainerTargetPowerTimeSeatedTimeStandingElevationGradeAscentDescentVerticalSpeedDi2BatteryLevelFrontGearRearGearGearRatioHeartRateHeartRateZoneTimeInHeartRateZoneHeartRateReserveCaloriesGpsAccuracyGpsSignalStrengthTemperatureTimeOfDayBalancePedalSmoothnessPowerFunctionalThresholdPowerIntensityFactorWorkPowerRatioNormalizedPowerTrainingStressScoreTimeOnZoneSpeedLapsRepsWorkoutStepCourseDistanceNavigationDistanceCourseEstimatedTimeOfArrivalNavigationEstimatedTimeOfArrivalCourseTimeNavigationTimeCourseHeadingNavigationHeadingPowerZoneTorqueEffectivenessTimerTimePowerWeightRatioLeftPlatformCenterOffsetRightPlatformCenterOffsetLeftPowerPhaseStartAngleRightPowerPhaseStartAngleLeftPowerPhaseFinishAngleRightPowerPhaseFinishAngleGearsPaceTrainingEffectVerticalOscillationVerticalRatioGroundContactTimeLeftGroundContactTimeBalanceRightGroundContactTimeBalanceStrideLengthRunningCadencePerformanceConditionCourseTypeTimeInPowerZoneNavigationTurnCourseLocationNavigationLocationCompassGearComboMuscleOxygenIconCompassHeadingGpsHeadingGpsElevationAnaerobicTrainingEffectCourseOffCourseGlideRatioVerticalDistanceVmgAmbientPressurePressureVam"
	_ExdDescriptors_name_1 = "Invalid"
)

var (
	_ExdDescriptors_index_0 = [...]uint16{0, 22, 37, 48, 64, 85, 92, 100, 122, 129, 133, 145, 162, 180, 190, 202, 211, 216, 222, 229, 242, 257, 266, 274, 283, 292, 305, 324, 340, 348, 359, 376, 387, 396, 403, 418, 423, 447, 462, 466, 476, 491, 510, 520, 525, 529, 533, 544, 558, 576, 604, 636, 646, 660, 673, 690, 699, 718, 727, 743, 767, 792, 816, 841, 866, 892, 897, 901, 915, 934, 947, 964, 992, 1021, 1033, 1047, 1067, 1077, 1092, 1106, 1120, 1138, 1145, 1154, 1166, 1170, 1184, 1194, 1206, 1229, 1235, 1244, 1254, 1270, 1273, 1288, 1296, 1299}
)

func (i ExdDescriptors) String() string {
	switch {
	case 0 <= i && i <= 96:
		return _ExdDescriptors_name_0[_ExdDescriptors_index_0[i]:_ExdDescriptors_index_0[i+1]]
	case i == 255:
		return _ExdDescriptors_name_1
	default:
		return "ExdDescriptors(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExdDisplayTypeNumerical-0]
	_ = x[ExdDisplayTypeSimple-1]
	_ = x[ExdDisplayTypeGraph-2]
	_ = x[ExdDisplayTypeBar-3]
	_ = x[ExdDisplayTypeCircleGraph-4]
	_ = x[ExdDisplayTypeVirtualPartner-5]
	_ = x[ExdDisplayTypeBalance-6]
	_ = x[ExdDisplayTypeStringList-7]
	_ = x[ExdDisplayTypeString-8]
	_ = x[ExdDisplayTypeSimpleDynamicIcon-9]
	_ = x[ExdDisplayTypeGauge-10]
	_ = x[ExdDisplayTypeInvalid-255]
}

const (
	_ExdDisplayType_name_0 = "NumericalSimpleGraphBarCircleGraphVirtualPartnerBalanceStringListStringSimpleDynamicIconGauge"
	_ExdDisplayType_name_1 = "Invalid"
)

var (
	_ExdDisplayType_index_0 = [...]uint8{0, 9, 15, 20, 23, 34, 48, 55, 65, 71, 88, 93}
)

func (i ExdDisplayType) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _ExdDisplayType_name_0[_ExdDisplayType_index_0[i]:_ExdDisplayType_index_0[i+1]]
	case i == 255:
		return _ExdDisplayType_name_1
	default:
		return "ExdDisplayType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExdLayoutFullScreen-0]
	_ = x[ExdLayoutHalfVertical-1]
	_ = x[ExdLayoutHalfHorizontal-2]
	_ = x[ExdLayoutHalfVerticalRightSplit-3]
	_ = x[ExdLayoutHalfHorizontalBottomSplit-4]
	_ = x[ExdLayoutFullQuarterSplit-5]
	_ = x[ExdLayoutHalfVerticalLeftSplit-6]
	_ = x[ExdLayoutHalfHorizontalTopSplit-7]
	_ = x[ExdLayoutDynamic-8]
	_ = x[ExdLayoutInvalid-255]
}

const (
	_ExdLayout_name_0 = "FullScreenHalfVerticalHalfHorizontalHalfVerticalRightSplitHalfHorizontalBottomSplitFullQuarterSplitHalfVerticalLeftSplitHalfHorizontalTopSplitDynamic"
	_ExdLayout_name_1 = "Invalid"
)

var (
	_ExdLayout_index_0 = [...]uint8{0, 10, 22, 36, 58, 83, 99, 120, 142, 149}
)

func (i ExdLayout) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _ExdLayout_name_0[_ExdLayout_index_0[i]:_ExdLayout_index_0[i+1]]
	case i == 255:
		return _ExdLayout_name_1
	default:
		return "ExdLayout(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExdQualifiersNoQualifier-0]
	_ = x[ExdQualifiersInstantaneous-1]
	_ = x[ExdQualifiersAverage-2]
	_ = x[ExdQualifiersLap-3]
	_ = x[ExdQualifiersMaximum-4]
	_ = x[ExdQualifiersMaximumAverage-5]
	_ = x[ExdQualifiersMaximumLap-6]
	_ = x[ExdQualifiersLastLap-7]
	_ = x[ExdQualifiersAverageLap-8]
	_ = x[ExdQualifiersToDestination-9]
	_ = x[ExdQualifiersToGo-10]
	_ = x[ExdQualifiersToNext-11]
	_ = x[ExdQualifiersNextCoursePoint-12]
	_ = x[ExdQualifiersTotal-13]
	_ = x[ExdQualifiersThreeSecondAverage-14]
	_ = x[ExdQualifiersTenSecondAverage-15]
	_ = x[ExdQualifiersThirtySecondAverage-16]
	_ = x[ExdQualifiersPercentMaximum-17]
	_ = x[ExdQualifiersPercentMaximumAverage-18]
	_ = x[ExdQualifiersLapPercentMaximum-19]
	_ = x[ExdQualifiersElapsed-20]
	_ = x[ExdQualifiersSunrise-21]
	_ = x[ExdQualifiersSunset-22]
	_ = x[ExdQualifiersComparedToVirtualPartner-23]
	_ = x[ExdQualifiersMaximum24h-24]
	_ = x[ExdQualifiersMinimum24h-25]
	_ = x[ExdQualifiersMinimum-26]
	_ = x[ExdQualifiersFirst-27]
	_ = x[ExdQualifiersSecond-28]
	_ = x[ExdQualifiersThird-29]
	_ = x[ExdQualifiersShifter-30]
	_ = x[ExdQualifiersLastSport-31]
	_ = x[ExdQualifiersMoving-32]
	_ = x[ExdQualifiersStopped-33]
	_ = x[ExdQualifiersEstimatedTotal-34]
	_ = x[ExdQualifiersZone9-242]
	_ = x[ExdQualifiersZone8-243]
	_ = x[ExdQualifiersZone7-244]
	_ = x[ExdQualifiersZone6-245]
	_ = x[ExdQualifiersZone5-246]
	_ = x[ExdQualifiersZone4-247]
	_ = x[ExdQualifiersZone3-248]
	_ = x[ExdQualifiersZone2-249]
	_ = x[ExdQualifiersZone1-250]
	_ = x[ExdQualifiersInvalid-255]
}

const (
	_ExdQualifiers_name_0 = "NoQualifierInstantaneousAverageLapMaximumMaximumAverageMaximumLapLastLapAverageLapToDestinationToGoToNextNextCoursePointTotalThreeSecondAverageTenSecondAverageThirtySecondAveragePercentMaximumPercentMaximumAverageLapPercentMaximumElapsedSunriseSunsetComparedToVirtualPartnerMaximum24hMinimum24hMinimumFirstSecondThirdShifterLastSportMovingStoppedEstimatedTotal"
	_ExdQualifiers_name_1 = "Zone9Zone8Zone7Zone6Zone5Zone4Zone3Zone2Zone1"
	_ExdQualifiers_name_2 = "Invalid"
)

var (
	_ExdQualifiers_index_0 = [...]uint16{0, 11, 24, 31, 34, 41, 55, 65, 72, 82, 95, 99, 105, 120, 125, 143, 159, 178, 192, 213, 230, 237, 244, 250, 274, 284, 294, 301, 306, 312, 317, 324, 333, 339, 346, 360}
	_ExdQualifiers_index_1 = [...]uint8{0, 5, 10, 15, 20, 25, 30, 35, 40, 45}
)

func (i ExdQualifiers) String() string {
	switch {
	case 0 <= i && i <= 34:
		return _ExdQualifiers_name_0[_ExdQualifiers_index_0[i]:_ExdQualifiers_index_0[i+1]]
	case 242 <= i && i <= 250:
		i -= 242
		return _ExdQualifiers_name_1[_ExdQualifiers_index_1[i]:_ExdQualifiers_index_1[i+1]]
	case i == 255:
		return _ExdQualifiers_name_2
	default:
		return "ExdQualifiers(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ExerciseCategoryBenchPress-0]
	_ = x[ExerciseCategoryCalfRaise-1]
	_ = x[ExerciseCategoryCardio-2]
	_ = x[ExerciseCategoryCarry-3]
	_ = x[ExerciseCategoryChop-4]
	_ = x[ExerciseCategoryCore-5]
	_ = x[ExerciseCategoryCrunch-6]
	_ = x[ExerciseCategoryCurl-7]
	_ = x[ExerciseCategoryDeadlift-8]
	_ = x[ExerciseCategoryFlye-9]
	_ = x[ExerciseCategoryHipRaise-10]
	_ = x[ExerciseCategoryHipStability-11]
	_ = x[ExerciseCategoryHipSwing-12]
	_ = x[ExerciseCategoryHyperextension-13]
	_ = x[ExerciseCategoryLateralRaise-14]
	_ = x[ExerciseCategoryLegCurl-15]
	_ = x[ExerciseCategoryLegRaise-16]
	_ = x[ExerciseCategoryLunge-17]
	_ = x[ExerciseCategoryOlympicLift-18]
	_ = x[ExerciseCategoryPlank-19]
	_ = x[ExerciseCategoryPlyo-20]
	_ = x[ExerciseCategoryPullUp-21]
	_ = x[ExerciseCategoryPushUp-22]
	_ = x[ExerciseCategoryRow-23]
	_ = x[ExerciseCategoryShoulderPress-24]
	_ = x[ExerciseCategoryShoulderStability-25]
	_ = x[ExerciseCategoryShrug-26]
	_ = x[ExerciseCategorySitUp-27]
	_ = x[ExerciseCategorySquat-28]
	_ = x[ExerciseCategoryTotalBody-29]
	_ = x[ExerciseCategoryTricepsExtension-30]
	_ = x[ExerciseCategoryWarmUp-31]
	_ = x[ExerciseCategoryRun-32]
	_ = x[ExerciseCategoryUnknown-65534]
	_ = x[ExerciseCategoryInvalid-65535]
}

const (
	_ExerciseCategory_name_0 = "BenchPressCalfRaiseCardioCarryChopCoreCrunchCurlDeadliftFlyeHipRaiseHipStabilityHipSwingHyperextensionLateralRaiseLegCurlLegRaiseLungeOlympicLiftPlankPlyoPullUpPushUpRowShoulderPressShoulderStabilityShrugSitUpSquatTotalBodyTricepsExtensionWarmUpRun"
	_ExerciseCategory_name_1 = "UnknownInvalid"
)

var (
	_ExerciseCategory_index_0 = [...]uint8{0, 10, 19, 25, 30, 34, 38, 44, 48, 56, 60, 68, 80, 88, 102, 114, 121, 129, 134, 145, 150, 154, 160, 166, 169, 182, 199, 204, 209, 214, 223, 239, 245, 248}
	_ExerciseCategory_index_1 = [...]uint8{0, 7, 14}
)

func (i ExerciseCategory) String() string {
	switch {
	case 0 <= i && i <= 32:
		return _ExerciseCategory_name_0[_ExerciseCategory_index_0[i]:_ExerciseCategory_index_0[i+1]]
	case 65534 <= i && i <= 65535:
		i -= 65534
		return _ExerciseCategory_name_1[_ExerciseCategory_index_1[i]:_ExerciseCategory_index_1[i+1]]
	default:
		return "ExerciseCategory(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FaveroProductAssiomaUno-10]
	_ = x[FaveroProductAssiomaDuo-12]
	_ = x[FaveroProductInvalid-65535]
}

const (
	_FaveroProduct_name_0 = "AssiomaUno"
	_FaveroProduct_name_1 = "AssiomaDuo"
	_FaveroProduct_name_2 = "Invalid"
)

func (i FaveroProduct) String() string {
	switch {
	case i == 10:
		return _FaveroProduct_name_0
	case i == 12:
		return _FaveroProduct_name_1
	case i == 65535:
		return _FaveroProduct_name_2
	default:
		return "FaveroProduct(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FileFlagsRead-2]
	_ = x[FileFlagsWrite-4]
	_ = x[FileFlagsErase-8]
	_ = x[FileFlagsInvalid-0]
}

const (
	_FileFlags_name_0 = "Invalid"
	_FileFlags_name_1 = "Read"
	_FileFlags_name_2 = "Write"
	_FileFlags_name_3 = "Erase"
)

func (i FileFlags) String() string {
	switch {
	case i == 0:
		return _FileFlags_name_0
	case i == 2:
		return _FileFlags_name_1
	case i == 4:
		return _FileFlags_name_2
	case i == 8:
		return _FileFlags_name_3
	default:
		return "FileFlags(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FileTypeDevice-1]
	_ = x[FileTypeSettings-2]
	_ = x[FileTypeSport-3]
	_ = x[FileTypeActivity-4]
	_ = x[FileTypeWorkout-5]
	_ = x[FileTypeCourse-6]
	_ = x[FileTypeSchedules-7]
	_ = x[FileTypeWeight-9]
	_ = x[FileTypeTotals-10]
	_ = x[FileTypeGoals-11]
	_ = x[FileTypeBloodPressure-14]
	_ = x[FileTypeMonitoringA-15]
	_ = x[FileTypeActivitySummary-20]
	_ = x[FileTypeMonitoringDaily-28]
	_ = x[FileTypeMonitoringB-32]
	_ = x[FileTypeSegment-34]
	_ = x[FileTypeSegmentList-35]
	_ = x[FileTypeExdConfiguration-40]
	_ = x[FileTypeMfgRangeMin-247]
	_ = x[FileTypeMfgRangeMax-254]
	_ = x[FileTypeInvalid-255]
}

const (
	_FileType_name_0 = "DeviceSettingsSportActivityWorkoutCourseSchedules"
	_FileType_name_1 = "WeightTotalsGoals"
	_FileType_name_2 = "BloodPressureMonitoringA"
	_FileType_name_3 = "ActivitySummary"
	_FileType_name_4 = "MonitoringDaily"
	_FileType_name_5 = "MonitoringB"
	_FileType_name_6 = "SegmentSegmentList"
	_FileType_name_7 = "ExdConfiguration"
	_FileType_name_8 = "MfgRangeMin"
	_FileType_name_9 = "MfgRangeMaxInvalid"
)

var (
	_FileType_index_0 = [...]uint8{0, 6, 14, 19, 27, 34, 40, 49}
	_FileType_index_1 = [...]uint8{0, 6, 12, 17}
	_FileType_index_2 = [...]uint8{0, 13, 24}
	_FileType_index_6 = [...]uint8{0, 7, 18}
	_FileType_index_9 = [...]uint8{0, 11, 18}
)

func (i FileType) String() string {
	switch {
	case 1 <= i && i <= 7:
		i -= 1
		return _FileType_name_0[_FileType_index_0[i]:_FileType_index_0[i+1]]
	case 9 <= i && i <= 11:
		i -= 9
		return _FileType_name_1[_FileType_index_1[i]:_FileType_index_1[i+1]]
	case 14 <= i && i <= 15:
		i -= 14
		return _FileType_name_2[_FileType_index_2[i]:_FileType_index_2[i+1]]
	case i == 20:
		return _FileType_name_3
	case i == 28:
		return _FileType_name_4
	case i == 32:
		return _FileType_name_5
	case 34 <= i && i <= 35:
		i -= 34
		return _FileType_name_6[_FileType_index_6[i]:_FileType_index_6[i+1]]
	case i == 40:
		return _FileType_name_7
	case i == 247:
		return _FileType_name_8
	case 254 <= i && i <= 255:
		i -= 254
		return _FileType_name_9[_FileType_index_9[i]:_FileType_index_9[i+1]]
	default:
		return "FileType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FitBaseTypeEnum-0]
	_ = x[FitBaseTypeSint8-1]
	_ = x[FitBaseTypeUint8-2]
	_ = x[FitBaseTypeSint16-131]
	_ = x[FitBaseTypeUint16-132]
	_ = x[FitBaseTypeSint32-133]
	_ = x[FitBaseTypeUint32-134]
	_ = x[FitBaseTypeString-7]
	_ = x[FitBaseTypeFloat32-136]
	_ = x[FitBaseTypeFloat64-137]
	_ = x[FitBaseTypeUint8z-10]
	_ = x[FitBaseTypeUint16z-139]
	_ = x[FitBaseTypeUint32z-140]
	_ = x[FitBaseTypeByte-13]
	_ = x[FitBaseTypeSint64-142]
	_ = x[FitBaseTypeUint64-143]
	_ = x[FitBaseTypeUint64z-144]
	_ = x[FitBaseTypeInvalid-255]
}

const (
	_FitBaseType_name_0 = "EnumSint8Uint8"
	_FitBaseType_name_1 = "String"
	_FitBaseType_name_2 = "Uint8z"
	_FitBaseType_name_3 = "Byte"
	_FitBaseType_name_4 = "Sint16Uint16Sint32Uint32"
	_FitBaseType_name_5 = "Float32Float64"
	_FitBaseType_name_6 = "Uint16zUint32z"
	_FitBaseType_name_7 = "Sint64Uint64Uint64z"
	_FitBaseType_name_8 = "Invalid"
)

var (
	_FitBaseType_index_0 = [...]uint8{0, 4, 9, 14}
	_FitBaseType_index_4 = [...]uint8{0, 6, 12, 18, 24}
	_FitBaseType_index_5 = [...]uint8{0, 7, 14}
	_FitBaseType_index_6 = [...]uint8{0, 7, 14}
	_FitBaseType_index_7 = [...]uint8{0, 6, 12, 19}
)

func (i FitBaseType) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _FitBaseType_name_0[_FitBaseType_index_0[i]:_FitBaseType_index_0[i+1]]
	case i == 7:
		return _FitBaseType_name_1
	case i == 10:
		return _FitBaseType_name_2
	case i == 13:
		return _FitBaseType_name_3
	case 131 <= i && i <= 134:
		i -= 131
		return _FitBaseType_name_4[_FitBaseType_index_4[i]:_FitBaseType_index_4[i+1]]
	case 136 <= i && i <= 137:
		i -= 136
		return _FitBaseType_name_5[_FitBaseType_index_5[i]:_FitBaseType_index_5[i+1]]
	case 139 <= i && i <= 140:
		i -= 139
		return _FitBaseType_name_6[_FitBaseType_index_6[i]:_FitBaseType_index_6[i+1]]
	case 142 <= i && i <= 144:
		i -= 142
		return _FitBaseType_name_7[_FitBaseType_index_7[i]:_FitBaseType_index_7[i+1]]
	case i == 255:
		return _FitBaseType_name_8
	default:
		return "FitBaseType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FitBaseUnitOther-0]
	_ = x[FitBaseUnitKilogram-1]
	_ = x[FitBaseUnitPound-2]
	_ = x[FitBaseUnitInvalid-65535]
}

const (
	_FitBaseUnit_name_0 = "OtherKilogramPound"
	_FitBaseUnit_name_1 = "Invalid"
)

var (
	_FitBaseUnit_index_0 = [...]uint8{0, 5, 13, 18}
)

func (i FitBaseUnit) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _FitBaseUnit_name_0[_FitBaseUnit_index_0[i]:_FitBaseUnit_index_0[i+1]]
	case i == 65535:
		return _FitBaseUnit_name_1
	default:
		return "FitBaseUnit(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FitnessEquipmentStateReady-0]
	_ = x[FitnessEquipmentStateInUse-1]
	_ = x[FitnessEquipmentStatePaused-2]
	_ = x[FitnessEquipmentStateUnknown-3]
	_ = x[FitnessEquipmentStateInvalid-255]
}

const (
	_FitnessEquipmentState_name_0 = "ReadyInUsePausedUnknown"
	_FitnessEquipmentState_name_1 = "Invalid"
)

var (
	_FitnessEquipmentState_index_0 = [...]uint8{0, 5, 10, 16, 23}
)

func (i FitnessEquipmentState) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _FitnessEquipmentState_name_0[_FitnessEquipmentState_index_0[i]:_FitnessEquipmentState_index_0[i+1]]
	case i == 255:
		return _FitnessEquipmentState_name_1
	default:
		return "FitnessEquipmentState(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FlyeExerciseNameCableCrossover-0]
	_ = x[FlyeExerciseNameDeclineDumbbellFlye-1]
	_ = x[FlyeExerciseNameDumbbellFlye-2]
	_ = x[FlyeExerciseNameInclineDumbbellFlye-3]
	_ = x[FlyeExerciseNameKettlebellFlye-4]
	_ = x[FlyeExerciseNameKneelingRearFlye-5]
	_ = x[FlyeExerciseNameSingleArmStandingCableReverseFlye-6]
	_ = x[FlyeExerciseNameSwissBallDumbbellFlye-7]
	_ = x[FlyeExerciseNameArmRotations-8]
	_ = x[FlyeExerciseNameHugATree-9]
	_ = x[FlyeExerciseNameInvalid-65535]
}

const (
	_FlyeExerciseName_name_0 = "CableCrossoverDeclineDumbbellFlyeDumbbellFlyeInclineDumbbellFlyeKettlebellFlyeKneelingRearFlyeSingleArmStandingCableReverseFlyeSwissBallDumbbellFlyeArmRotationsHugATree"
	_FlyeExerciseName_name_1 = "Invalid"
)

var (
	_FlyeExerciseName_index_0 = [...]uint8{0, 14, 33, 45, 64, 78, 94, 127, 148, 160, 168}
)

func (i FlyeExerciseName) String() string {
	switch {
	case 0 <= i && i <= 9:
		return _FlyeExerciseName_name_0[_FlyeExerciseName_index_0[i]:_FlyeExerciseName_index_0[i+1]]
	case i == 65535:
		return _FlyeExerciseName_name_1
	default:
		return "FlyeExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GarminProductHrm1-1]
	_ = x[GarminProductAxh01-2]
	_ = x[GarminProductAxb01-3]
	_ = x[GarminProductAxb02-4]
	_ = x[GarminProductHrm2ss-5]
	_ = x[GarminProductDsiAlf02-6]
	_ = x[GarminProductHrm3ss-7]
	_ = x[GarminProductHrmRunSingleByteProductId-8]
	_ = x[GarminProductBsm-9]
	_ = x[GarminProductBcm-10]
	_ = x[GarminProductAxs01-11]
	_ = x[GarminProductHrmTriSingleByteProductId-12]
	_ = x[GarminProductHrm4RunSingleByteProductId-13]
	_ = x[GarminProductFr225SingleByteProductId-14]
	_ = x[GarminProductGen3BsmSingleByteProductId-15]
	_ = x[GarminProductGen3BcmSingleByteProductId-16]
	_ = x[GarminProductFr301China-473]
	_ = x[GarminProductFr301Japan-474]
	_ = x[GarminProductFr301Korea-475]
	_ = x[GarminProductFr301Taiwan-494]
	_ = x[GarminProductFr405-717]
	_ = x[GarminProductFr50-782]
	_ = x[GarminProductFr405Japan-987]
	_ = x[GarminProductFr60-988]
	_ = x[GarminProductDsiAlf01-1011]
	_ = x[GarminProductFr310xt-1018]
	_ = x[GarminProductEdge500-1036]
	_ = x[GarminProductFr110-1124]
	_ = x[GarminProductEdge800-1169]
	_ = x[GarminProductEdge500Taiwan-1199]
	_ = x[GarminProductEdge500Japan-1213]
	_ = x[GarminProductChirp-1253]
	_ = x[GarminProductFr110Japan-1274]
	_ = x[GarminProductEdge200-1325]
	_ = x[GarminProductFr910xt-1328]
	_ = x[GarminProductEdge800Taiwan-1333]
	_ = x[GarminProductEdge800Japan-1334]
	_ = x[GarminProductAlf04-1341]
	_ = x[GarminProductFr610-1345]
	_ = x[GarminProductFr210Japan-1360]
	_ = x[GarminProductVectorSs-1380]
	_ = x[GarminProductVectorCp-1381]
	_ = x[GarminProductEdge800China-1386]
	_ = x[GarminProductEdge500China-1387]
	_ = x[GarminProductApproachG10-1405]
	_ = x[GarminProductFr610Japan-1410]
	_ = x[GarminProductEdge500Korea-1422]
	_ = x[GarminProductFr70-1436]
	_ = x[GarminProductFr310xt4t-1446]
	_ = x[GarminProductAmx-1461]
	_ = x[GarminProductFr10-1482]
	_ = x[GarminProductEdge800Korea-1497]
	_ = x[GarminProductSwim-1499]
	_ = x[GarminProductFr910xtChina-1537]
	_ = x[GarminProductFenix-1551]
	_ = x[GarminProductEdge200Taiwan-1555]
	_ = x[GarminProductEdge510-1561]
	_ = x[GarminProductEdge810-1567]
	_ = x[GarminProductTempe-1570]
	_ = x[GarminProductFr910xtJapan-1600]
	_ = x[GarminProductFr620-1623]
	_ = x[GarminProductFr220-1632]
	_ = x[GarminProductFr910xtKorea-1664]
	_ = x[GarminProductFr10Japan-1688]
	_ = x[GarminProductEdge810Japan-1721]
	_ = x[GarminProductVirbElite-1735]
	_ = x[GarminProductEdgeTouring-1736]
	_ = x[GarminProductEdge510Japan-1742]
	_ = x[GarminProductHrmTri-1743]
	_ = x[GarminProductHrmRun-1752]
	_ = x[GarminProductFr920xt-1765]
	_ = x[GarminProductEdge510Asia-1821]
	_ = x[GarminProductEdge810China-1822]
	_ = x[GarminProductEdge810Taiwan-1823]
	_ = x[GarminProductEdge1000-1836]
	_ = x[GarminProductVivoFit-1837]
	_ = x[GarminProductVirbRemote-1853]
	_ = x[GarminProductVivoKi-1885]
	_ = x[GarminProductFr15-1903]
	_ = x[GarminProductVivoActive-1907]
	_ = x[GarminProductEdge510Korea-1918]
	_ = x[GarminProductFr620Japan-1928]
	_ = x[GarminProductFr620China-1929]
	_ = x[GarminProductFr220Japan-1930]
	_ = x[GarminProductFr220China-1931]
	_ = x[GarminProductApproachS6-1936]
	_ = x[GarminProductVivoSmart-1956]
	_ = x[GarminProductFenix2-1967]
	_ = x[GarminProductEpix-1988]
	_ = x[GarminProductFenix3-2050]
	_ = x[GarminProductEdge1000Taiwan-2052]
	_ = x[GarminProductEdge1000Japan-2053]
	_ = x[GarminProductFr15Japan-2061]
	_ = x[GarminProductEdge520-2067]
	_ = x[GarminProductEdge1000China-2070]
	_ = x[GarminProductFr620Russia-2072]
	_ = x[GarminProductFr220Russia-2073]
	_ = x[GarminProductVectorS-2079]
	_ = x[GarminProductEdge1000Korea-2100]
	_ = x[GarminProductFr920xtTaiwan-2130]
	_ = x[GarminProductFr920xtChina-2131]
	_ = x[GarminProductFr920xtJapan-2132]
	_ = x[GarminProductVirbx-2134]
	_ = x[GarminProductVivoSmartApac-2135]
	_ = x[GarminProductEtrexTouch-2140]
	_ = x[GarminProductEdge25-2147]
	_ = x[GarminProductFr25-2148]
	_ = x[GarminProductVivoFit2-2150]
	_ = x[GarminProductFr225-2153]
	_ = x[GarminProductFr630-2156]
	_ = x[GarminProductFr230-2157]
	_ = x[GarminProductFr735xt-2158]
	_ = x[GarminProductVivoActiveApac-2160]
	_ = x[GarminProductVector2-2161]
	_ = x[GarminProductVector2s-2162]
	_ = x[GarminProductVirbxe-2172]
	_ = x[GarminProductFr620Taiwan-2173]
	_ = x[GarminProductFr220Taiwan-2174]
	_ = x[GarminProductTruswing-2175]
	_ = x[GarminProductD2airvenu-2187]
	_ = x[GarminProductFenix3China-2188]
	_ = x[GarminProductFenix3Twn-2189]
	_ = x[GarminProductVariaHeadlight-2192]
	_ = x[GarminProductVariaTaillightOld-2193]
	_ = x[GarminProductEdgeExplore1000-2204]
	_ = x[GarminProductFr225Asia-2219]
	_ = x[GarminProductVariaRadarTaillight-2225]
	_ = x[GarminProductVariaRadarDisplay-2226]
	_ = x[GarminProductEdge20-2238]
	_ = x[GarminProductEdge520Asia-2260]
	_ = x[GarminProductEdge520Japan-2261]
	_ = x[GarminProductD2Bravo-2262]
	_ = x[GarminProductApproachS20-2266]
	_ = x[GarminProductVivoSmart2-2271]
	_ = x[GarminProductEdge1000Thai-2274]
	_ = x[GarminProductVariaRemote-2276]
	_ = x[GarminProductEdge25Asia-2288]
	_ = x[GarminProductEdge25Jpn-2289]
	_ = x[GarminProductEdge20Asia-2290]
	_ = x[GarminProductApproachX40-2292]
	_ = x[GarminProductFenix3Japan-2293]
	_ = x[GarminProductVivoSmartEmea-2294]
	_ = x[GarminProductFr630Asia-2310]
	_ = x[GarminProductFr630Jpn-2311]
	_ = x[GarminProductFr230Jpn-2313]
	_ = x[GarminProductHrm4Run-2327]
	_ = x[GarminProductEpixJapan-2332]
	_ = x[GarminProductVivoActiveHr-2337]
	_ = x[GarminProductVivoSmartGpsHr-2347]
	_ = x[GarminProductVivoSmartHr-2348]
	_ = x[GarminProductVivoSmartHrAsia-2361]
	_ = x[GarminProductVivoSmartGpsHrAsia-2362]
	_ = x[GarminProductVivoMove-2368]
	_ = x[GarminProductVariaTaillight-2379]
	_ = x[GarminProductFr235Asia-2396]
	_ = x[GarminProductFr235Japan-2397]
	_ = x[GarminProductVariaVision-2398]
	_ = x[GarminProductVivoFit3-2406]
	_ = x[GarminProductFenix3Korea-2407]
	_ = x[GarminProductFenix3Sea-2408]
	_ = x[GarminProductFenix3Hr-2413]
	_ = x[GarminProductVirbUltra30-2417]
	_ = x[GarminProductIndexSmartScale-2429]
	_ = x[GarminProductFr235-2431]
	_ = x[GarminProductFenix3Chronos-2432]
	_ = x[GarminProductOregon7xx-2441]
	_ = x[GarminProductRino7xx-2444]
	_ = x[GarminProductEpixKorea-2457]
	_ = x[GarminProductFenix3HrChn-2473]
	_ = x[GarminProductFenix3HrTwn-2474]
	_ = x[GarminProductFenix3HrJpn-2475]
	_ = x[GarminProductFenix3HrSea-2476]
	_ = x[GarminProductFenix3HrKor-2477]
	_ = x[GarminProductNautix-2496]
	_ = x[GarminProductVivoActiveHrApac-2497]
	_ = x[GarminProductOregon7xxWw-2512]
	_ = x[GarminProductEdge820-2530]
	_ = x[GarminProductEdgeExplore820-2531]
	_ = x[GarminProductFr735xtApac-2533]
	_ = x[GarminProductFr735xtJapan-2534]
	_ = x[GarminProductFenix5s-2544]
	_ = x[GarminProductD2BravoTitanium-2547]
	_ = x[GarminProductVariaUt800-2567]
	_ = x[GarminProductRunningDynamicsPod-2593]
	_ = x[GarminProductEdge820China-2599]
	_ = x[GarminProductEdge820Japan-2600]
	_ = x[GarminProductFenix5x-2604]
	_ = x[GarminProductVivoFitJr-2606]
	_ = x[GarminProductVivoSmart3-2622]
	_ = x[GarminProductVivoSport-2623]
	_ = x[GarminProductEdge820Taiwan-2628]
	_ = x[GarminProductEdge820Korea-2629]
	_ = x[GarminProductEdge820Sea-2630]
	_ = x[GarminProductFr35Hebrew-2650]
	_ = x[GarminProductApproachS60-2656]
	_ = x[GarminProductFr35Apac-2667]
	_ = x[GarminProductFr35Japan-2668]
	_ = x[GarminProductFenix3ChronosAsia-2675]
	_ = x[GarminProductVirb360-2687]
	_ = x[GarminProductFr935-2691]
	_ = x[GarminProductFenix5-2697]
	_ = x[GarminProductVivoactive3-2700]
	_ = x[GarminProductFr235ChinaNfc-2733]
	_ = x[GarminProductForetrex601701-2769]
	_ = x[GarminProductVivoMoveHr-2772]
	_ = x[GarminProductEdge1030-2713]
	_ = x[GarminProductVector3-2787]
	_ = x[GarminProductFenix5Asia-2796]
	_ = x[GarminProductFenix5sAsia-2797]
	_ = x[GarminProductFenix5xAsia-2798]
	_ = x[GarminProductApproachZ80-2806]
	_ = x[GarminProductFr35Korea-2814]
	_ = x[GarminProductD2charlie-2819]
	_ = x[GarminProductVivoSmart3Apac-2831]
	_ = x[GarminProductVivoSportApac-2832]
	_ = x[GarminProductFr935Asia-2833]
	_ = x[GarminProductDescent-2859]
	_ = x[GarminProductVivoFit4-2878]
	_ = x[GarminProductFr645-2886]
	_ = x[GarminProductFr645m-2888]
	_ = x[GarminProductFr30-2891]
	_ = x[GarminProductFenix5sPlus-2900]
	_ = x[GarminProductEdge130-2909]
	_ = x[GarminProductEdge1030Asia-2924]
	_ = x[GarminProductVivosmart4-2927]
	_ = x[GarminProductVivoMoveHrAsia-2945]
	_ = x[GarminProductApproachX10-2962]
	_ = x[GarminProductFr30Asia-2977]
	_ = x[GarminProductVivoactive3mW-2988]
	_ = x[GarminProductFr645Asia-3003]
	_ = x[GarminProductFr645mAsia-3004]
	_ = x[GarminProductEdgeExplore-3011]
	_ = x[GarminProductGpsmap66-3028]
	_ = x[GarminProductApproachS10-3049]
	_ = x[GarminProductVivoactive3mL-3066]
	_ = x[GarminProductApproachG80-3085]
	_ = x[GarminProductEdge130Asia-3092]
	_ = x[GarminProductEdge1030Bontrager-3095]
	_ = x[GarminProductFenix5Plus-3110]
	_ = x[GarminProductFenix5xPlus-3111]
	_ = x[GarminProductEdge520Plus-3112]
	_ = x[GarminProductFr945-3113]
	_ = x[GarminProductEdge530-3121]
	_ = x[GarminProductEdge830-3122]
	_ = x[GarminProductInstinctEsports-3126]
	_ = x[GarminProductFenix5sPlusApac-3134]
	_ = x[GarminProductFenix5xPlusApac-3135]
	_ = x[GarminProductEdge520PlusApac-3142]
	_ = x[GarminProductFr235lAsia-3144]
	_ = x[GarminProductFr245Asia-3145]
	_ = x[GarminProductVivoActive3mApac-3163]
	_ = x[GarminProductGen3Bsm-3192]
	_ = x[GarminProductGen3Bcm-3193]
	_ = x[GarminProductVivoSmart4Asia-3218]
	_ = x[GarminProductVivoactive4Small-3224]
	_ = x[GarminProductVivoactive4Large-3225]
	_ = x[GarminProductVenu-3226]
	_ = x[GarminProductMarqDriver-3246]
	_ = x[GarminProductMarqAviator-3247]
	_ = x[GarminProductMarqCaptain-3248]
	_ = x[GarminProductMarqCommander-3249]
	_ = x[GarminProductMarqExpedition-3250]
	_ = x[GarminProductMarqAthlete-3251]
	_ = x[GarminProductDescentMk2-3258]
	_ = x[GarminProductGpsmap66i-3284]
	_ = x[GarminProductFenix6SSport-3287]
	_ = x[GarminProductFenix6S-3288]
	_ = x[GarminProductFenix6Sport-3289]
	_ = x[GarminProductFenix6-3290]
	_ = x[GarminProductFenix6x-3291]
	_ = x[GarminProductHrmDual-3299]
	_ = x[GarminProductHrmPro-3300]
	_ = x[GarminProductVivoMove3Premium-3308]
	_ = x[GarminProductApproachS40-3314]
	_ = x[GarminProductFr245mAsia-3321]
	_ = x[GarminProductEdge530Apac-3349]
	_ = x[GarminProductEdge830Apac-3350]
	_ = x[GarminProductVivoMove3-3378]
	_ = x[GarminProductVivoActive4SmallAsia-3387]
	_ = x[GarminProductVivoActive4LargeAsia-3388]
	_ = x[GarminProductVivoActive4OledAsia-3389]
	_ = x[GarminProductSwim2-3405]
	_ = x[GarminProductMarqDriverAsia-3420]
	_ = x[GarminProductMarqAviatorAsia-3421]
	_ = x[GarminProductVivoMove3Asia-3422]
	_ = x[GarminProductFr945Asia-3441]
	_ = x[GarminProductVivoActive3tChn-3446]
	_ = x[GarminProductMarqCaptainAsia-3448]
	_ = x[GarminProductMarqCommanderAsia-3449]
	_ = x[GarminProductMarqExpeditionAsia-3450]
	_ = x[GarminProductMarqAthleteAsia-3451]
	_ = x[GarminProductFr45Asia-3469]
	_ = x[GarminProductVivoactive3Daimler-3473]
	_ = x[GarminProductLegacyRey-3498]
	_ = x[GarminProductLegacyDarthVader-3499]
	_ = x[GarminProductLegacyCaptainMarvel-3500]
	_ = x[GarminProductLegacyFirstAvenger-3501]
	_ = x[GarminProductFenix6sSportAsia-3512]
	_ = x[GarminProductFenix6sAsia-3513]
	_ = x[GarminProductFenix6SportAsia-3514]
	_ = x[GarminProductFenix6Asia-3515]
	_ = x[GarminProductFenix6xAsia-3516]
	_ = x[GarminProductLegacyCaptainMarvelAsia-3535]
	_ = x[GarminProductLegacyFirstAvengerAsia-3536]
	_ = x[GarminProductLegacyReyAsia-3537]
	_ = x[GarminProductLegacyDarthVaderAsia-3538]
	_ = x[GarminProductDescentMk2s-3542]
	_ = x[GarminProductEdge130Plus-3558]
	_ = x[GarminProductEdge1030Plus-3570]
	_ = x[GarminProductRally200-3578]
	_ = x[GarminProductFr745-3589]
	_ = x[GarminProductVenusq-3600]
	_ = x[GarminProductLily-3615]
	_ = x[GarminProductMarqAdventurer-3624]
	_ = x[GarminProductEnduro-3638]
	_ = x[GarminProductSwim2Apac-3639]
	_ = x[GarminProductMarqAdventurerAsia-3648]
	_ = x[GarminProductFr945Lte-3652]
	_ = x[GarminProductDescentMk2Asia-3702]
	_ = x[GarminProductVenu2-3703]
	_ = x[GarminProductVenu2s-3704]
	_ = x[GarminProductVenuDaimlerAsia-3737]
	_ = x[GarminProductMarqGolfer-3739]
	_ = x[GarminProductVenuDaimler-3740]
	_ = x[GarminProductFr745Asia-3794]
	_ = x[GarminProductLilyAsia-3809]
	_ = x[GarminProductEdge1030PlusAsia-3812]
	_ = x[GarminProductEdge130PlusAsia-3813]
	_ = x[GarminProductApproachS12-3823]
	_ = x[GarminProductEnduroAsia-3872]
	_ = x[GarminProductVenusqAsia-3837]
	_ = x[GarminProductMarqGolferAsia-3850]
	_ = x[GarminProductFr55-3869]
	_ = x[GarminProductApproachG12-3927]
	_ = x[GarminProductDescentMk2sAsia-3930]
	_ = x[GarminProductApproachS42-3934]
	_ = x[GarminProductVenu2sAsia-3949]
	_ = x[GarminProductVenu2Asia-3950]
	_ = x[GarminProductFr945LteAsia-3978]
	_ = x[GarminProductApproachS12Asia-3986]
	_ = x[GarminProductApproachG12Asia-4001]
	_ = x[GarminProductApproachS42Asia-4002]
	_ = x[GarminProductFr55Asia-4033]
	_ = x[GarminProductSdm4-10007]
	_ = x[GarminProductEdgeRemote-10014]
	_ = x[GarminProductTacxTrainingAppWin-20533]
	_ = x[GarminProductTacxTrainingAppMac-20534]
	_ = x[GarminProductTrainingCenter-20119]
	_ = x[GarminProductTacxTrainingAppAndroid-30045]
	_ = x[GarminProductTacxTrainingAppIos-30046]
	_ = x[GarminProductTacxTrainingAppLegacy-30047]
	_ = x[GarminProductConnectiqSimulator-65531]
	_ = x[GarminProductAndroidAntplusPlugin-65532]
	_ = x[GarminProductConnect-65534]
	_ = x[GarminProductInvalid-65535]
}

const _GarminProduct_name = "Hrm1Axh01Axb01Axb02Hrm2ssDsiAlf02Hrm3ssHrmRunSingleByteProductIdBsmBcmAxs01HrmTriSingleByteProductIdHrm4RunSingleByteProductIdFr225SingleByteProductIdGen3BsmSingleByteProductIdGen3BcmSingleByteProductIdFr301ChinaFr301JapanFr301KoreaFr301TaiwanFr405Fr50Fr405JapanFr60DsiAlf01Fr310xtEdge500Fr110Edge800Edge500TaiwanEdge500JapanChirpFr110JapanEdge200Fr910xtEdge800TaiwanEdge800JapanAlf04Fr610Fr210JapanVectorSsVectorCpEdge800ChinaEdge500ChinaApproachG10Fr610JapanEdge500KoreaFr70Fr310xt4tAmxFr10Edge800KoreaSwimFr910xtChinaFenixEdge200TaiwanEdge510Edge810TempeFr910xtJapanFr620Fr220Fr910xtKoreaFr10JapanEdge810JapanVirbEliteEdgeTouringEdge510JapanHrmTriHrmRunFr920xtEdge510AsiaEdge810ChinaEdge810TaiwanEdge1000VivoFitVirbRemoteVivoKiFr15VivoActiveEdge510KoreaFr620JapanFr620ChinaFr220JapanFr220ChinaApproachS6VivoSmartFenix2EpixFenix3Edge1000TaiwanEdge1000JapanFr15JapanEdge520Edge1000ChinaFr620RussiaFr220RussiaVectorSEdge1000KoreaFr920xtTaiwanFr920xtChinaFr920xtJapanVirbxVivoSmartApacEtrexTouchEdge25Fr25VivoFit2Fr225Fr630Fr230Fr735xtVivoActiveApacVector2Vector2sVirbxeFr620TaiwanFr220TaiwanTruswingD2airvenuFenix3ChinaFenix3TwnVariaHeadlightVariaTaillightOldEdgeExplore1000Fr225AsiaVariaRadarTaillightVariaRadarDisplayEdge20Edge520AsiaEdge520JapanD2BravoApproachS20VivoSmart2Edge1000ThaiVariaRemoteEdge25AsiaEdge25JpnEdge20AsiaApproachX40Fenix3JapanVivoSmartEmeaFr630AsiaFr630JpnFr230JpnHrm4RunEpixJapanVivoActiveHrVivoSmartGpsHrVivoSmartHrVivoSmartHrAsiaVivoSmartGpsHrAsiaVivoMoveVariaTaillightFr235AsiaFr235JapanVariaVisionVivoFit3Fenix3KoreaFenix3SeaFenix3HrVirbUltra30IndexSmartScaleFr235Fenix3ChronosOregon7xxRino7xxEpixKoreaFenix3HrChnFenix3HrTwnFenix3HrJpnFenix3HrSeaFenix3HrKorNautixVivoActiveHrApacOregon7xxWwEdge820EdgeExplore820Fr735xtApacFr735xtJapanFenix5sD2BravoTitaniumVariaUt800RunningDynamicsPodEdge820ChinaEdge820JapanFenix5xVivoFitJrVivoSmart3VivoSportEdge820TaiwanEdge820KoreaEdge820SeaFr35HebrewApproachS60Fr35ApacFr35JapanFenix3ChronosAsiaVirb360Fr935Fenix5Vivoactive3Edge1030Fr235ChinaNfcForetrex601701VivoMoveHrVector3Fenix5AsiaFenix5sAsiaFenix5xAsiaApproachZ80Fr35KoreaD2charlieVivoSmart3ApacVivoSportApacFr935AsiaDescentVivoFit4Fr645Fr645mFr30Fenix5sPlusEdge130Edge1030AsiaVivosmart4VivoMoveHrAsiaApproachX10Fr30AsiaVivoactive3mWFr645AsiaFr645mAsiaEdgeExploreGpsmap66ApproachS10Vivoactive3mLApproachG80Edge130AsiaEdge1030BontragerFenix5PlusFenix5xPlusEdge520PlusFr945Edge530Edge830InstinctEsportsFenix5sPlusApacFenix5xPlusApacEdge520PlusApacFr235lAsiaFr245AsiaVivoActive3mApacGen3BsmGen3BcmVivoSmart4AsiaVivoactive4SmallVivoactive4LargeVenuMarqDriverMarqAviatorMarqCaptainMarqCommanderMarqExpeditionMarqAthleteDescentMk2Gpsmap66iFenix6SSportFenix6SFenix6SportFenix6Fenix6xHrmDualHrmProVivoMove3PremiumApproachS40Fr245mAsiaEdge530ApacEdge830ApacVivoMove3VivoActive4SmallAsiaVivoActive4LargeAsiaVivoActive4OledAsiaSwim2MarqDriverAsiaMarqAviatorAsiaVivoMove3AsiaFr945AsiaVivoActive3tChnMarqCaptainAsiaMarqCommanderAsiaMarqExpeditionAsiaMarqAthleteAsiaFr45AsiaVivoactive3DaimlerLegacyReyLegacyDarthVaderLegacyCaptainMarvelLegacyFirstAvengerFenix6sSportAsiaFenix6sAsiaFenix6SportAsiaFenix6AsiaFenix6xAsiaLegacyCaptainMarvelAsiaLegacyFirstAvengerAsiaLegacyReyAsiaLegacyDarthVaderAsiaDescentMk2sEdge130PlusEdge1030PlusRally200Fr745VenusqLilyMarqAdventurerEnduroSwim2ApacMarqAdventurerAsiaFr945LteDescentMk2AsiaVenu2Venu2sVenuDaimlerAsiaMarqGolferVenuDaimlerFr745AsiaLilyAsiaEdge1030PlusAsiaEdge130PlusAsiaApproachS12VenusqAsiaMarqGolferAsiaFr55EnduroAsiaApproachG12DescentMk2sAsiaApproachS42Venu2sAsiaVenu2AsiaFr945LteAsiaApproachS12AsiaApproachG12AsiaApproachS42AsiaFr55AsiaSdm4EdgeRemoteTrainingCenterTacxTrainingAppWinTacxTrainingAppMacTacxTrainingAppAndroidTacxTrainingAppIosTacxTrainingAppLegacyConnectiqSimulatorAndroidAntplusPluginConnectInvalid"

var _GarminProduct_map = map[GarminProduct]string{
	1:     _GarminProduct_name[0:4],
	2:     _GarminProduct_name[4:9],
	3:     _GarminProduct_name[9:14],
	4:     _GarminProduct_name[14:19],
	5:     _GarminProduct_name[19:25],
	6:     _GarminProduct_name[25:33],
	7:     _GarminProduct_name[33:39],
	8:     _GarminProduct_name[39:64],
	9:     _GarminProduct_name[64:67],
	10:    _GarminProduct_name[67:70],
	11:    _GarminProduct_name[70:75],
	12:    _GarminProduct_name[75:100],
	13:    _GarminProduct_name[100:126],
	14:    _GarminProduct_name[126:150],
	15:    _GarminProduct_name[150:176],
	16:    _GarminProduct_name[176:202],
	473:   _GarminProduct_name[202:212],
	474:   _GarminProduct_name[212:222],
	475:   _GarminProduct_name[222:232],
	494:   _GarminProduct_name[232:243],
	717:   _GarminProduct_name[243:248],
	782:   _GarminProduct_name[248:252],
	987:   _GarminProduct_name[252:262],
	988:   _GarminProduct_name[262:266],
	1011:  _GarminProduct_name[266:274],
	1018:  _GarminProduct_name[274:281],
	1036:  _GarminProduct_name[281:288],
	1124:  _GarminProduct_name[288:293],
	1169:  _GarminProduct_name[293:300],
	1199:  _GarminProduct_name[300:313],
	1213:  _GarminProduct_name[313:325],
	1253:  _GarminProduct_name[325:330],
	1274:  _GarminProduct_name[330:340],
	1325:  _GarminProduct_name[340:347],
	1328:  _GarminProduct_name[347:354],
	1333:  _GarminProduct_name[354:367],
	1334:  _GarminProduct_name[367:379],
	1341:  _GarminProduct_name[379:384],
	1345:  _GarminProduct_name[384:389],
	1360:  _GarminProduct_name[389:399],
	1380:  _GarminProduct_name[399:407],
	1381:  _GarminProduct_name[407:415],
	1386:  _GarminProduct_name[415:427],
	1387:  _GarminProduct_name[427:439],
	1405:  _GarminProduct_name[439:450],
	1410:  _GarminProduct_name[450:460],
	1422:  _GarminProduct_name[460:472],
	1436:  _GarminProduct_name[472:476],
	1446:  _GarminProduct_name[476:485],
	1461:  _GarminProduct_name[485:488],
	1482:  _GarminProduct_name[488:492],
	1497:  _GarminProduct_name[492:504],
	1499:  _GarminProduct_name[504:508],
	1537:  _GarminProduct_name[508:520],
	1551:  _GarminProduct_name[520:525],
	1555:  _GarminProduct_name[525:538],
	1561:  _GarminProduct_name[538:545],
	1567:  _GarminProduct_name[545:552],
	1570:  _GarminProduct_name[552:557],
	1600:  _GarminProduct_name[557:569],
	1623:  _GarminProduct_name[569:574],
	1632:  _GarminProduct_name[574:579],
	1664:  _GarminProduct_name[579:591],
	1688:  _GarminProduct_name[591:600],
	1721:  _GarminProduct_name[600:612],
	1735:  _GarminProduct_name[612:621],
	1736:  _GarminProduct_name[621:632],
	1742:  _GarminProduct_name[632:644],
	1743:  _GarminProduct_name[644:650],
	1752:  _GarminProduct_name[650:656],
	1765:  _GarminProduct_name[656:663],
	1821:  _GarminProduct_name[663:674],
	1822:  _GarminProduct_name[674:686],
	1823:  _GarminProduct_name[686:699],
	1836:  _GarminProduct_name[699:707],
	1837:  _GarminProduct_name[707:714],
	1853:  _GarminProduct_name[714:724],
	1885:  _GarminProduct_name[724:730],
	1903:  _GarminProduct_name[730:734],
	1907:  _GarminProduct_name[734:744],
	1918:  _GarminProduct_name[744:756],
	1928:  _GarminProduct_name[756:766],
	1929:  _GarminProduct_name[766:776],
	1930:  _GarminProduct_name[776:786],
	1931:  _GarminProduct_name[786:796],
	1936:  _GarminProduct_name[796:806],
	1956:  _GarminProduct_name[806:815],
	1967:  _GarminProduct_name[815:821],
	1988:  _GarminProduct_name[821:825],
	2050:  _GarminProduct_name[825:831],
	2052:  _GarminProduct_name[831:845],
	2053:  _GarminProduct_name[845:858],
	2061:  _GarminProduct_name[858:867],
	2067:  _GarminProduct_name[867:874],
	2070:  _GarminProduct_name[874:887],
	2072:  _GarminProduct_name[887:898],
	2073:  _GarminProduct_name[898:909],
	2079:  _GarminProduct_name[909:916],
	2100:  _GarminProduct_name[916:929],
	2130:  _GarminProduct_name[929:942],
	2131:  _GarminProduct_name[942:954],
	2132:  _GarminProduct_name[954:966],
	2134:  _GarminProduct_name[966:971],
	2135:  _GarminProduct_name[971:984],
	2140:  _GarminProduct_name[984:994],
	2147:  _GarminProduct_name[994:1000],
	2148:  _GarminProduct_name[1000:1004],
	2150:  _GarminProduct_name[1004:1012],
	2153:  _GarminProduct_name[1012:1017],
	2156:  _GarminProduct_name[1017:1022],
	2157:  _GarminProduct_name[1022:1027],
	2158:  _GarminProduct_name[1027:1034],
	2160:  _GarminProduct_name[1034:1048],
	2161:  _GarminProduct_name[1048:1055],
	2162:  _GarminProduct_name[1055:1063],
	2172:  _GarminProduct_name[1063:1069],
	2173:  _GarminProduct_name[1069:1080],
	2174:  _GarminProduct_name[1080:1091],
	2175:  _GarminProduct_name[1091:1099],
	2187:  _GarminProduct_name[1099:1108],
	2188:  _GarminProduct_name[1108:1119],
	2189:  _GarminProduct_name[1119:1128],
	2192:  _GarminProduct_name[1128:1142],
	2193:  _GarminProduct_name[1142:1159],
	2204:  _GarminProduct_name[1159:1174],
	2219:  _GarminProduct_name[1174:1183],
	2225:  _GarminProduct_name[1183:1202],
	2226:  _GarminProduct_name[1202:1219],
	2238:  _GarminProduct_name[1219:1225],
	2260:  _GarminProduct_name[1225:1236],
	2261:  _GarminProduct_name[1236:1248],
	2262:  _GarminProduct_name[1248:1255],
	2266:  _GarminProduct_name[1255:1266],
	2271:  _GarminProduct_name[1266:1276],
	2274:  _GarminProduct_name[1276:1288],
	2276:  _GarminProduct_name[1288:1299],
	2288:  _GarminProduct_name[1299:1309],
	2289:  _GarminProduct_name[1309:1318],
	2290:  _GarminProduct_name[1318:1328],
	2292:  _GarminProduct_name[1328:1339],
	2293:  _GarminProduct_name[1339:1350],
	2294:  _GarminProduct_name[1350:1363],
	2310:  _GarminProduct_name[1363:1372],
	2311:  _GarminProduct_name[1372:1380],
	2313:  _GarminProduct_name[1380:1388],
	2327:  _GarminProduct_name[1388:1395],
	2332:  _GarminProduct_name[1395:1404],
	2337:  _GarminProduct_name[1404:1416],
	2347:  _GarminProduct_name[1416:1430],
	2348:  _GarminProduct_name[1430:1441],
	2361:  _GarminProduct_name[1441:1456],
	2362:  _GarminProduct_name[1456:1474],
	2368:  _GarminProduct_name[1474:1482],
	2379:  _GarminProduct_name[1482:1496],
	2396:  _GarminProduct_name[1496:1505],
	2397:  _GarminProduct_name[1505:1515],
	2398:  _GarminProduct_name[1515:1526],
	2406:  _GarminProduct_name[1526:1534],
	2407:  _GarminProduct_name[1534:1545],
	2408:  _GarminProduct_name[1545:1554],
	2413:  _GarminProduct_name[1554:1562],
	2417:  _GarminProduct_name[1562:1573],
	2429:  _GarminProduct_name[1573:1588],
	2431:  _GarminProduct_name[1588:1593],
	2432:  _GarminProduct_name[1593:1606],
	2441:  _GarminProduct_name[1606:1615],
	2444:  _GarminProduct_name[1615:1622],
	2457:  _GarminProduct_name[1622:1631],
	2473:  _GarminProduct_name[1631:1642],
	2474:  _GarminProduct_name[1642:1653],
	2475:  _GarminProduct_name[1653:1664],
	2476:  _GarminProduct_name[1664:1675],
	2477:  _GarminProduct_name[1675:1686],
	2496:  _GarminProduct_name[1686:1692],
	2497:  _GarminProduct_name[1692:1708],
	2512:  _GarminProduct_name[1708:1719],
	2530:  _GarminProduct_name[1719:1726],
	2531:  _GarminProduct_name[1726:1740],
	2533:  _GarminProduct_name[1740:1751],
	2534:  _GarminProduct_name[1751:1763],
	2544:  _GarminProduct_name[1763:1770],
	2547:  _GarminProduct_name[1770:1785],
	2567:  _GarminProduct_name[1785:1795],
	2593:  _GarminProduct_name[1795:1813],
	2599:  _GarminProduct_name[1813:1825],
	2600:  _GarminProduct_name[1825:1837],
	2604:  _GarminProduct_name[1837:1844],
	2606:  _GarminProduct_name[1844:1853],
	2622:  _GarminProduct_name[1853:1863],
	2623:  _GarminProduct_name[1863:1872],
	2628:  _GarminProduct_name[1872:1885],
	2629:  _GarminProduct_name[1885:1897],
	2630:  _GarminProduct_name[1897:1907],
	2650:  _GarminProduct_name[1907:1917],
	2656:  _GarminProduct_name[1917:1928],
	2667:  _GarminProduct_name[1928:1936],
	2668:  _GarminProduct_name[1936:1945],
	2675:  _GarminProduct_name[1945:1962],
	2687:  _GarminProduct_name[1962:1969],
	2691:  _GarminProduct_name[1969:1974],
	2697:  _GarminProduct_name[1974:1980],
	2700:  _GarminProduct_name[1980:1991],
	2713:  _GarminProduct_name[1991:1999],
	2733:  _GarminProduct_name[1999:2012],
	2769:  _GarminProduct_name[2012:2026],
	2772:  _GarminProduct_name[2026:2036],
	2787:  _GarminProduct_name[2036:2043],
	2796:  _GarminProduct_name[2043:2053],
	2797:  _GarminProduct_name[2053:2064],
	2798:  _GarminProduct_name[2064:2075],
	2806:  _GarminProduct_name[2075:2086],
	2814:  _GarminProduct_name[2086:2095],
	2819:  _GarminProduct_name[2095:2104],
	2831:  _GarminProduct_name[2104:2118],
	2832:  _GarminProduct_name[2118:2131],
	2833:  _GarminProduct_name[2131:2140],
	2859:  _GarminProduct_name[2140:2147],
	2878:  _GarminProduct_name[2147:2155],
	2886:  _GarminProduct_name[2155:2160],
	2888:  _GarminProduct_name[2160:2166],
	2891:  _GarminProduct_name[2166:2170],
	2900:  _GarminProduct_name[2170:2181],
	2909:  _GarminProduct_name[2181:2188],
	2924:  _GarminProduct_name[2188:2200],
	2927:  _GarminProduct_name[2200:2210],
	2945:  _GarminProduct_name[2210:2224],
	2962:  _GarminProduct_name[2224:2235],
	2977:  _GarminProduct_name[2235:2243],
	2988:  _GarminProduct_name[2243:2256],
	3003:  _GarminProduct_name[2256:2265],
	3004:  _GarminProduct_name[2265:2275],
	3011:  _GarminProduct_name[2275:2286],
	3028:  _GarminProduct_name[2286:2294],
	3049:  _GarminProduct_name[2294:2305],
	3066:  _GarminProduct_name[2305:2318],
	3085:  _GarminProduct_name[2318:2329],
	3092:  _GarminProduct_name[2329:2340],
	3095:  _GarminProduct_name[2340:2357],
	3110:  _GarminProduct_name[2357:2367],
	3111:  _GarminProduct_name[2367:2378],
	3112:  _GarminProduct_name[2378:2389],
	3113:  _GarminProduct_name[2389:2394],
	3121:  _GarminProduct_name[2394:2401],
	3122:  _GarminProduct_name[2401:2408],
	3126:  _GarminProduct_name[2408:2423],
	3134:  _GarminProduct_name[2423:2438],
	3135:  _GarminProduct_name[2438:2453],
	3142:  _GarminProduct_name[2453:2468],
	3144:  _GarminProduct_name[2468:2478],
	3145:  _GarminProduct_name[2478:2487],
	3163:  _GarminProduct_name[2487:2503],
	3192:  _GarminProduct_name[2503:2510],
	3193:  _GarminProduct_name[2510:2517],
	3218:  _GarminProduct_name[2517:2531],
	3224:  _GarminProduct_name[2531:2547],
	3225:  _GarminProduct_name[2547:2563],
	3226:  _GarminProduct_name[2563:2567],
	3246:  _GarminProduct_name[2567:2577],
	3247:  _GarminProduct_name[2577:2588],
	3248:  _GarminProduct_name[2588:2599],
	3249:  _GarminProduct_name[2599:2612],
	3250:  _GarminProduct_name[2612:2626],
	3251:  _GarminProduct_name[2626:2637],
	3258:  _GarminProduct_name[2637:2647],
	3284:  _GarminProduct_name[2647:2656],
	3287:  _GarminProduct_name[2656:2668],
	3288:  _GarminProduct_name[2668:2675],
	3289:  _GarminProduct_name[2675:2686],
	3290:  _GarminProduct_name[2686:2692],
	3291:  _GarminProduct_name[2692:2699],
	3299:  _GarminProduct_name[2699:2706],
	3300:  _GarminProduct_name[2706:2712],
	3308:  _GarminProduct_name[2712:2728],
	3314:  _GarminProduct_name[2728:2739],
	3321:  _GarminProduct_name[2739:2749],
	3349:  _GarminProduct_name[2749:2760],
	3350:  _GarminProduct_name[2760:2771],
	3378:  _GarminProduct_name[2771:2780],
	3387:  _GarminProduct_name[2780:2800],
	3388:  _GarminProduct_name[2800:2820],
	3389:  _GarminProduct_name[2820:2839],
	3405:  _GarminProduct_name[2839:2844],
	3420:  _GarminProduct_name[2844:2858],
	3421:  _GarminProduct_name[2858:2873],
	3422:  _GarminProduct_name[2873:2886],
	3441:  _GarminProduct_name[2886:2895],
	3446:  _GarminProduct_name[2895:2910],
	3448:  _GarminProduct_name[2910:2925],
	3449:  _GarminProduct_name[2925:2942],
	3450:  _GarminProduct_name[2942:2960],
	3451:  _GarminProduct_name[2960:2975],
	3469:  _GarminProduct_name[2975:2983],
	3473:  _GarminProduct_name[2983:3001],
	3498:  _GarminProduct_name[3001:3010],
	3499:  _GarminProduct_name[3010:3026],
	3500:  _GarminProduct_name[3026:3045],
	3501:  _GarminProduct_name[3045:3063],
	3512:  _GarminProduct_name[3063:3079],
	3513:  _GarminProduct_name[3079:3090],
	3514:  _GarminProduct_name[3090:3105],
	3515:  _GarminProduct_name[3105:3115],
	3516:  _GarminProduct_name[3115:3126],
	3535:  _GarminProduct_name[3126:3149],
	3536:  _GarminProduct_name[3149:3171],
	3537:  _GarminProduct_name[3171:3184],
	3538:  _GarminProduct_name[3184:3204],
	3542:  _GarminProduct_name[3204:3215],
	3558:  _GarminProduct_name[3215:3226],
	3570:  _GarminProduct_name[3226:3238],
	3578:  _GarminProduct_name[3238:3246],
	3589:  _GarminProduct_name[3246:3251],
	3600:  _GarminProduct_name[3251:3257],
	3615:  _GarminProduct_name[3257:3261],
	3624:  _GarminProduct_name[3261:3275],
	3638:  _GarminProduct_name[3275:3281],
	3639:  _GarminProduct_name[3281:3290],
	3648:  _GarminProduct_name[3290:3308],
	3652:  _GarminProduct_name[3308:3316],
	3702:  _GarminProduct_name[3316:3330],
	3703:  _GarminProduct_name[3330:3335],
	3704:  _GarminProduct_name[3335:3341],
	3737:  _GarminProduct_name[3341:3356],
	3739:  _GarminProduct_name[3356:3366],
	3740:  _GarminProduct_name[3366:3377],
	3794:  _GarminProduct_name[3377:3386],
	3809:  _GarminProduct_name[3386:3394],
	3812:  _GarminProduct_name[3394:3410],
	3813:  _GarminProduct_name[3410:3425],
	3823:  _GarminProduct_name[3425:3436],
	3837:  _GarminProduct_name[3436:3446],
	3850:  _GarminProduct_name[3446:3460],
	3869:  _GarminProduct_name[3460:3464],
	3872:  _GarminProduct_name[3464:3474],
	3927:  _GarminProduct_name[3474:3485],
	3930:  _GarminProduct_name[3485:3500],
	3934:  _GarminProduct_name[3500:3511],
	3949:  _GarminProduct_name[3511:3521],
	3950:  _GarminProduct_name[3521:3530],
	3978:  _GarminProduct_name[3530:3542],
	3986:  _GarminProduct_name[3542:3557],
	4001:  _GarminProduct_name[3557:3572],
	4002:  _GarminProduct_name[3572:3587],
	4033:  _GarminProduct_name[3587:3595],
	10007: _GarminProduct_name[3595:3599],
	10014: _GarminProduct_name[3599:3609],
	20119: _GarminProduct_name[3609:3623],
	20533: _GarminProduct_name[3623:3641],
	20534: _GarminProduct_name[3641:3659],
	30045: _GarminProduct_name[3659:3681],
	30046: _GarminProduct_name[3681:3699],
	30047: _GarminProduct_name[3699:3720],
	65531: _GarminProduct_name[3720:3738],
	65532: _GarminProduct_name[3738:3758],
	65534: _GarminProduct_name[3758:3765],
	65535: _GarminProduct_name[3765:3772],
}

func (i GarminProduct) String() string {
	if str, ok := _GarminProduct_map[i]; ok {
		return str
	}
	return "GarminProduct(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GenderFemale-0]
	_ = x[GenderMale-1]
	_ = x[GenderInvalid-255]
}

const (
	_Gender_name_0 = "FemaleMale"
	_Gender_name_1 = "Invalid"
)

var (
	_Gender_index_0 = [...]uint8{0, 6, 10}
)

func (i Gender) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Gender_name_0[_Gender_index_0[i]:_Gender_index_0[i+1]]
	case i == 255:
		return _Gender_name_1
	default:
		return "Gender(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GoalTime-0]
	_ = x[GoalDistance-1]
	_ = x[GoalCalories-2]
	_ = x[GoalFrequency-3]
	_ = x[GoalSteps-4]
	_ = x[GoalAscent-5]
	_ = x[GoalActiveMinutes-6]
	_ = x[GoalInvalid-255]
}

const (
	_Goal_name_0 = "TimeDistanceCaloriesFrequencyStepsAscentActiveMinutes"
	_Goal_name_1 = "Invalid"
)

var (
	_Goal_index_0 = [...]uint8{0, 4, 12, 20, 29, 34, 40, 53}
)

func (i Goal) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _Goal_name_0[_Goal_index_0[i]:_Goal_index_0[i+1]]
	case i == 255:
		return _Goal_name_1
	default:
		return "Goal(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GoalRecurrenceOff-0]
	_ = x[GoalRecurrenceDaily-1]
	_ = x[GoalRecurrenceWeekly-2]
	_ = x[GoalRecurrenceMonthly-3]
	_ = x[GoalRecurrenceYearly-4]
	_ = x[GoalRecurrenceCustom-5]
	_ = x[GoalRecurrenceInvalid-255]
}

const (
	_GoalRecurrence_name_0 = "OffDailyWeeklyMonthlyYearlyCustom"
	_GoalRecurrence_name_1 = "Invalid"
)

var (
	_GoalRecurrence_index_0 = [...]uint8{0, 3, 8, 14, 21, 27, 33}
)

func (i GoalRecurrence) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _GoalRecurrence_name_0[_GoalRecurrence_index_0[i]:_GoalRecurrence_index_0[i+1]]
	case i == 255:
		return _GoalRecurrence_name_1
	default:
		return "GoalRecurrence(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GoalSourceAuto-0]
	_ = x[GoalSourceCommunity-1]
	_ = x[GoalSourceUser-2]
	_ = x[GoalSourceInvalid-255]
}

const (
	_GoalSource_name_0 = "AutoCommunityUser"
	_GoalSource_name_1 = "Invalid"
)

var (
	_GoalSource_index_0 = [...]uint8{0, 4, 13, 17}
)

func (i GoalSource) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _GoalSource_name_0[_GoalSource_index_0[i]:_GoalSource_index_0[i+1]]
	case i == 255:
		return _GoalSource_name_1
	default:
		return "GoalSource(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HipRaiseExerciseNameBarbellHipThrustOnFloor-0]
	_ = x[HipRaiseExerciseNameBarbellHipThrustWithBench-1]
	_ = x[HipRaiseExerciseNameBentKneeSwissBallReverseHipRaise-2]
	_ = x[HipRaiseExerciseNameWeightedBentKneeSwissBallReverseHipRaise-3]
	_ = x[HipRaiseExerciseNameBridgeWithLegExtension-4]
	_ = x[HipRaiseExerciseNameWeightedBridgeWithLegExtension-5]
	_ = x[HipRaiseExerciseNameClamBridge-6]
	_ = x[HipRaiseExerciseNameFrontKickTabletop-7]
	_ = x[HipRaiseExerciseNameWeightedFrontKickTabletop-8]
	_ = x[HipRaiseExerciseNameHipExtensionAndCross-9]
	_ = x[HipRaiseExerciseNameWeightedHipExtensionAndCross-10]
	_ = x[HipRaiseExerciseNameHipRaise-11]
	_ = x[HipRaiseExerciseNameWeightedHipRaise-12]
	_ = x[HipRaiseExerciseNameHipRaiseWithFeetOnSwissBall-13]
	_ = x[HipRaiseExerciseNameWeightedHipRaiseWithFeetOnSwissBall-14]
	_ = x[HipRaiseExerciseNameHipRaiseWithHeadOnBosuBall-15]
	_ = x[HipRaiseExerciseNameWeightedHipRaiseWithHeadOnBosuBall-16]
	_ = x[HipRaiseExerciseNameHipRaiseWithHeadOnSwissBall-17]
	_ = x[HipRaiseExerciseNameWeightedHipRaiseWithHeadOnSwissBall-18]
	_ = x[HipRaiseExerciseNameHipRaiseWithKneeSqueeze-19]
	_ = x[HipRaiseExerciseNameWeightedHipRaiseWithKneeSqueeze-20]
	_ = x[HipRaiseExerciseNameInclineRearLegExtension-21]
	_ = x[HipRaiseExerciseNameWeightedInclineRearLegExtension-22]
	_ = x[HipRaiseExerciseNameKettlebellSwing-23]
	_ = x[HipRaiseExerciseNameMarchingHipRaise-24]
	_ = x[HipRaiseExerciseNameWeightedMarchingHipRaise-25]
	_ = x[HipRaiseExerciseNameMarchingHipRaiseWithFeetOnASwissBall-26]
	_ = x[HipRaiseExerciseNameWeightedMarchingHipRaiseWithFeetOnASwissBall-27]
	_ = x[HipRaiseExerciseNameReverseHipRaise-28]
	_ = x[HipRaiseExerciseNameWeightedReverseHipRaise-29]
	_ = x[HipRaiseExerciseNameSingleLegHipRaise-30]
	_ = x[HipRaiseExerciseNameWeightedSingleLegHipRaise-31]
	_ = x[HipRaiseExerciseNameSingleLegHipRaiseWithFootOnBench-32]
	_ = x[HipRaiseExerciseNameWeightedSingleLegHipRaiseWithFootOnBench-33]
	_ = x[HipRaiseExerciseNameSingleLegHipRaiseWithFootOnBosuBall-34]
	_ = x[HipRaiseExerciseNameWeightedSingleLegHipRaiseWithFootOnBosuBall-35]
	_ = x[HipRaiseExerciseNameSingleLegHipRaiseWithFootOnFoamRoller-36]
	_ = x[HipRaiseExerciseNameWeightedSingleLegHipRaiseWithFootOnFoamRoller-37]
	_ = x[HipRaiseExerciseNameSingleLegHipRaiseWithFootOnMedicineBall-38]
	_ = x[HipRaiseExerciseNameWeightedSingleLegHipRaiseWithFootOnMedicineBall-39]
	_ = x[HipRaiseExerciseNameSingleLegHipRaiseWithHeadOnBosuBall-40]
	_ = x[HipRaiseExerciseNameWeightedSingleLegHipRaiseWithHeadOnBosuBall-41]
	_ = x[HipRaiseExerciseNameWeightedClamBridge-42]
	_ = x[HipRaiseExerciseNameSingleLegSwissBallHipRaiseAndLegCurl-43]
	_ = x[HipRaiseExerciseNameClams-44]
	_ = x[HipRaiseExerciseNameInnerThighCircles-45]
	_ = x[HipRaiseExerciseNameInnerThighSideLift-46]
	_ = x[HipRaiseExerciseNameLegCircles-47]
	_ = x[HipRaiseExerciseNameLegLift-48]
	_ = x[HipRaiseExerciseNameLegLiftInExternalRotation-49]
	_ = x[HipRaiseExerciseNameInvalid-65535]
}

const (
	_HipRaiseExerciseName_name_0 = "BarbellHipThrustOnFloorBarbellHipThrustWithBenchBentKneeSwissBallReverseHipRaiseWeightedBentKneeSwissBallReverseHipRaiseBridgeWithLegExtensionWeightedBridgeWithLegExtensionClamBridgeFrontKickTabletopWeightedFrontKickTabletopHipExtensionAndCrossWeightedHipExtensionAndCrossHipRaiseWeightedHipRaiseHipRaiseWithFeetOnSwissBallWeightedHipRaiseWithFeetOnSwissBallHipRaiseWithHeadOnBosuBallWeightedHipRaiseWithHeadOnBosuBallHipRaiseWithHeadOnSwissBallWeightedHipRaiseWithHeadOnSwissBallHipRaiseWithKneeSqueezeWeightedHipRaiseWithKneeSqueezeInclineRearLegExtensionWeightedInclineRearLegExtensionKettlebellSwingMarchingHipRaiseWeightedMarchingHipRaiseMarchingHipRaiseWithFeetOnASwissBallWeightedMarchingHipRaiseWithFeetOnASwissBallReverseHipRaiseWeightedReverseHipRaiseSingleLegHipRaiseWeightedSingleLegHipRaiseSingleLegHipRaiseWithFootOnBenchWeightedSingleLegHipRaiseWithFootOnBenchSingleLegHipRaiseWithFootOnBosuBallWeightedSingleLegHipRaiseWithFootOnBosuBallSingleLegHipRaiseWithFootOnFoamRollerWeightedSingleLegHipRaiseWithFootOnFoamRollerSingleLegHipRaiseWithFootOnMedicineBallWeightedSingleLegHipRaiseWithFootOnMedicineBallSingleLegHipRaiseWithHeadOnBosuBallWeightedSingleLegHipRaiseWithHeadOnBosuBallWeightedClamBridgeSingleLegSwissBallHipRaiseAndLegCurlClamsInnerThighCirclesInnerThighSideLiftLegCirclesLegLiftLegLiftInExternalRotation"
	_HipRaiseExerciseName_name_1 = "Invalid"
)

var (
	_HipRaiseExerciseName_index_0 = [...]uint16{0, 23, 48, 80, 120, 142, 172, 182, 199, 224, 244, 272, 280, 296, 323, 358, 384, 418, 445, 480, 503, 534, 557, 588, 603, 619, 643, 679, 723, 738, 761, 778, 803, 835, 875, 910, 953, 990, 1035, 1074, 1121, 1156, 1199, 1217, 1253, 1258, 1275, 1293, 1303, 1310, 1335}
)

func (i HipRaiseExerciseName) String() string {
	switch {
	case 0 <= i && i <= 49:
		return _HipRaiseExerciseName_name_0[_HipRaiseExerciseName_index_0[i]:_HipRaiseExerciseName_index_0[i+1]]
	case i == 65535:
		return _HipRaiseExerciseName_name_1
	default:
		return "HipRaiseExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HipStabilityExerciseNameBandSideLyingLegRaise-0]
	_ = x[HipStabilityExerciseNameDeadBug-1]
	_ = x[HipStabilityExerciseNameWeightedDeadBug-2]
	_ = x[HipStabilityExerciseNameExternalHipRaise-3]
	_ = x[HipStabilityExerciseNameWeightedExternalHipRaise-4]
	_ = x[HipStabilityExerciseNameFireHydrantKicks-5]
	_ = x[HipStabilityExerciseNameWeightedFireHydrantKicks-6]
	_ = x[HipStabilityExerciseNameHipCircles-7]
	_ = x[HipStabilityExerciseNameWeightedHipCircles-8]
	_ = x[HipStabilityExerciseNameInnerThighLift-9]
	_ = x[HipStabilityExerciseNameWeightedInnerThighLift-10]
	_ = x[HipStabilityExerciseNameLateralWalksWithBandAtAnkles-11]
	_ = x[HipStabilityExerciseNamePretzelSideKick-12]
	_ = x[HipStabilityExerciseNameWeightedPretzelSideKick-13]
	_ = x[HipStabilityExerciseNameProneHipInternalRotation-14]
	_ = x[HipStabilityExerciseNameWeightedProneHipInternalRotation-15]
	_ = x[HipStabilityExerciseNameQuadruped-16]
	_ = x[HipStabilityExerciseNameQuadrupedHipExtension-17]
	_ = x[HipStabilityExerciseNameWeightedQuadrupedHipExtension-18]
	_ = x[HipStabilityExerciseNameQuadrupedWithLegLift-19]
	_ = x[HipStabilityExerciseNameWeightedQuadrupedWithLegLift-20]
	_ = x[HipStabilityExerciseNameSideLyingLegRaise-21]
	_ = x[HipStabilityExerciseNameWeightedSideLyingLegRaise-22]
	_ = x[HipStabilityExerciseNameSlidingHipAdduction-23]
	_ = x[HipStabilityExerciseNameWeightedSlidingHipAdduction-24]
	_ = x[HipStabilityExerciseNameStandingAdduction-25]
	_ = x[HipStabilityExerciseNameWeightedStandingAdduction-26]
	_ = x[HipStabilityExerciseNameStandingCableHipAbduction-27]
	_ = x[HipStabilityExerciseNameStandingHipAbduction-28]
	_ = x[HipStabilityExerciseNameWeightedStandingHipAbduction-29]
	_ = x[HipStabilityExerciseNameStandingRearLegRaise-30]
	_ = x[HipStabilityExerciseNameWeightedStandingRearLegRaise-31]
	_ = x[HipStabilityExerciseNameSupineHipInternalRotation-32]
	_ = x[HipStabilityExerciseNameWeightedSupineHipInternalRotation-33]
	_ = x[HipStabilityExerciseNameInvalid-65535]
}

const (
	_HipStabilityExerciseName_name_0 = "BandSideLyingLegRaiseDeadBugWeightedDeadBugExternalHipRaiseWeightedExternalHipRaiseFireHydrantKicksWeightedFireHydrantKicksHipCirclesWeightedHipCirclesInnerThighLiftWeightedInnerThighLiftLateralWalksWithBandAtAnklesPretzelSideKickWeightedPretzelSideKickProneHipInternalRotationWeightedProneHipInternalRotationQuadrupedQuadrupedHipExtensionWeightedQuadrupedHipExtensionQuadrupedWithLegLiftWeightedQuadrupedWithLegLiftSideLyingLegRaiseWeightedSideLyingLegRaiseSlidingHipAdductionWeightedSlidingHipAdductionStandingAdductionWeightedStandingAdductionStandingCableHipAbductionStandingHipAbductionWeightedStandingHipAbductionStandingRearLegRaiseWeightedStandingRearLegRaiseSupineHipInternalRotationWeightedSupineHipInternalRotation"
	_HipStabilityExerciseName_name_1 = "Invalid"
)

var (
	_HipStabilityExerciseName_index_0 = [...]uint16{0, 21, 28, 43, 59, 83, 99, 123, 133, 151, 165, 187, 215, 230, 253, 277, 309, 318, 339, 368, 388, 416, 433, 458, 477, 504, 521, 546, 571, 591, 619, 639, 667, 692, 725}
)

func (i HipStabilityExerciseName) String() string {
	switch {
	case 0 <= i && i <= 33:
		return _HipStabilityExerciseName_name_0[_HipStabilityExerciseName_index_0[i]:_HipStabilityExerciseName_index_0[i+1]]
	case i == 65535:
		return _HipStabilityExerciseName_name_1
	default:
		return "HipStabilityExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HipSwingExerciseNameSingleArmKettlebellSwing-0]
	_ = x[HipSwingExerciseNameSingleArmDumbbellSwing-1]
	_ = x[HipSwingExerciseNameStepOutSwing-2]
	_ = x[HipSwingExerciseNameInvalid-65535]
}

const (
	_HipSwingExerciseName_name_0 = "SingleArmKettlebellSwingSingleArmDumbbellSwingStepOutSwing"
	_HipSwingExerciseName_name_1 = "Invalid"
)

var (
	_HipSwingExerciseName_index_0 = [...]uint8{0, 24, 46, 58}
)

func (i HipSwingExerciseName) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _HipSwingExerciseName_name_0[_HipSwingExerciseName_index_0[i]:_HipSwingExerciseName_index_0[i+1]]
	case i == 65535:
		return _HipSwingExerciseName_name_1
	default:
		return "HipSwingExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HrTypeNormal-0]
	_ = x[HrTypeIrregular-1]
	_ = x[HrTypeInvalid-255]
}

const (
	_HrType_name_0 = "NormalIrregular"
	_HrType_name_1 = "Invalid"
)

var (
	_HrType_index_0 = [...]uint8{0, 6, 15}
)

func (i HrType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _HrType_name_0[_HrType_index_0[i]:_HrType_index_0[i+1]]
	case i == 255:
		return _HrType_name_1
	default:
		return "HrType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HrZoneCalcCustom-0]
	_ = x[HrZoneCalcPercentMaxHr-1]
	_ = x[HrZoneCalcPercentHrr-2]
	_ = x[HrZoneCalcInvalid-255]
}

const (
	_HrZoneCalc_name_0 = "CustomPercentMaxHrPercentHrr"
	_HrZoneCalc_name_1 = "Invalid"
)

var (
	_HrZoneCalc_index_0 = [...]uint8{0, 6, 18, 28}
)

func (i HrZoneCalc) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _HrZoneCalc_name_0[_HrZoneCalc_index_0[i]:_HrZoneCalc_index_0[i+1]]
	case i == 255:
		return _HrZoneCalc_name_1
	default:
		return "HrZoneCalc(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HyperextensionExerciseNameBackExtensionWithOppositeArmAndLegReach-0]
	_ = x[HyperextensionExerciseNameWeightedBackExtensionWithOppositeArmAndLegReach-1]
	_ = x[HyperextensionExerciseNameBaseRotations-2]
	_ = x[HyperextensionExerciseNameWeightedBaseRotations-3]
	_ = x[HyperextensionExerciseNameBentKneeReverseHyperextension-4]
	_ = x[HyperextensionExerciseNameWeightedBentKneeReverseHyperextension-5]
	_ = x[HyperextensionExerciseNameHollowHoldAndRoll-6]
	_ = x[HyperextensionExerciseNameWeightedHollowHoldAndRoll-7]
	_ = x[HyperextensionExerciseNameKicks-8]
	_ = x[HyperextensionExerciseNameWeightedKicks-9]
	_ = x[HyperextensionExerciseNameKneeRaises-10]
	_ = x[HyperextensionExerciseNameWeightedKneeRaises-11]
	_ = x[HyperextensionExerciseNameKneelingSuperman-12]
	_ = x[HyperextensionExerciseNameWeightedKneelingSuperman-13]
	_ = x[HyperextensionExerciseNameLatPullDownWithRow-14]
	_ = x[HyperextensionExerciseNameMedicineBallDeadliftToReach-15]
	_ = x[HyperextensionExerciseNameOneArmOneLegRow-16]
	_ = x[HyperextensionExerciseNameOneArmRowWithBand-17]
	_ = x[HyperextensionExerciseNameOverheadLungeWithMedicineBall-18]
	_ = x[HyperextensionExerciseNamePlankKneeTucks-19]
	_ = x[HyperextensionExerciseNameWeightedPlankKneeTucks-20]
	_ = x[HyperextensionExerciseNameSideStep-21]
	_ = x[HyperextensionExerciseNameWeightedSideStep-22]
	_ = x[HyperextensionExerciseNameSingleLegBackExtension-23]
	_ = x[HyperextensionExerciseNameWeightedSingleLegBackExtension-24]
	_ = x[HyperextensionExerciseNameSpineExtension-25]
	_ = x[HyperextensionExerciseNameWeightedSpineExtension-26]
	_ = x[HyperextensionExerciseNameStaticBackExtension-27]
	_ = x[HyperextensionExerciseNameWeightedStaticBackExtension-28]
	_ = x[HyperextensionExerciseNameSupermanFromFloor-29]
	_ = x[HyperextensionExerciseNameWeightedSupermanFromFloor-30]
	_ = x[HyperextensionExerciseNameSwissBallBackExtension-31]
	_ = x[HyperextensionExerciseNameWeightedSwissBallBackExtension-32]
	_ = x[HyperextensionExerciseNameSwissBallHyperextension-33]
	_ = x[HyperextensionExerciseNameWeightedSwissBallHyperextension-34]
	_ = x[HyperextensionExerciseNameSwissBallOppositeArmAndLegLift-35]
	_ = x[HyperextensionExerciseNameWeightedSwissBallOppositeArmAndLegLift-36]
	_ = x[HyperextensionExerciseNameSupermanOnSwissBall-37]
	_ = x[HyperextensionExerciseNameCobra-38]
	_ = x[HyperextensionExerciseNameSupineFloorBarre-39]
	_ = x[HyperextensionExerciseNameInvalid-65535]
}

const (
	_HyperextensionExerciseName_name_0 = "BackExtensionWithOppositeArmAndLegReachWeightedBackExtensionWithOppositeArmAndLegReachBaseRotationsWeightedBaseRotationsBentKneeReverseHyperextensionWeightedBentKneeReverseHyperextensionHollowHoldAndRollWeightedHollowHoldAndRollKicksWeightedKicksKneeRaisesWeightedKneeRaisesKneelingSupermanWeightedKneelingSupermanLatPullDownWithRowMedicineBallDeadliftToReachOneArmOneLegRowOneArmRowWithBandOverheadLungeWithMedicineBallPlankKneeTucksWeightedPlankKneeTucksSideStepWeightedSideStepSingleLegBackExtensionWeightedSingleLegBackExtensionSpineExtensionWeightedSpineExtensionStaticBackExtensionWeightedStaticBackExtensionSupermanFromFloorWeightedSupermanFromFloorSwissBallBackExtensionWeightedSwissBallBackExtensionSwissBallHyperextensionWeightedSwissBallHyperextensionSwissBallOppositeArmAndLegLiftWeightedSwissBallOppositeArmAndLegLiftSupermanOnSwissBallCobraSupineFloorBarre"
	_HyperextensionExerciseName_name_1 = "Invalid"
)

var (
	_HyperextensionExerciseName_index_0 = [...]uint16{0, 39, 86, 99, 120, 149, 186, 203, 228, 233, 246, 256, 274, 290, 314, 332, 359, 374, 391, 420, 434, 456, 464, 480, 502, 532, 546, 568, 587, 614, 631, 656, 678, 708, 731, 762, 792, 830, 849, 854, 870}
)

func (i HyperextensionExerciseName) String() string {
	switch {
	case 0 <= i && i <= 39:
		return _HyperextensionExerciseName_name_0[_HyperextensionExerciseName_index_0[i]:_HyperextensionExerciseName_index_0[i+1]]
	case i == 65535:
		return _HyperextensionExerciseName_name_1
	default:
		return "HyperextensionExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[IntensityActive-0]
	_ = x[IntensityRest-1]
	_ = x[IntensityWarmup-2]
	_ = x[IntensityCooldown-3]
	_ = x[IntensityRecovery-4]
	_ = x[IntensityInterval-5]
	_ = x[IntensityOther-6]
	_ = x[IntensityInvalid-255]
}

const (
	_Intensity_name_0 = "ActiveRestWarmupCooldownRecoveryIntervalOther"
	_Intensity_name_1 = "Invalid"
)

var (
	_Intensity_index_0 = [...]uint8{0, 6, 10, 16, 24, 32, 40, 45}
)

func (i Intensity) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _Intensity_name_0[_Intensity_index_0[i]:_Intensity_index_0[i+1]]
	case i == 255:
		return _Intensity_name_1
	default:
		return "Intensity(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageEnglish-0]
	_ = x[LanguageFrench-1]
	_ = x[LanguageItalian-2]
	_ = x[LanguageGerman-3]
	_ = x[LanguageSpanish-4]
	_ = x[LanguageCroatian-5]
	_ = x[LanguageCzech-6]
	_ = x[LanguageDanish-7]
	_ = x[LanguageDutch-8]
	_ = x[LanguageFinnish-9]
	_ = x[LanguageGreek-10]
	_ = x[LanguageHungarian-11]
	_ = x[LanguageNorwegian-12]
	_ = x[LanguagePolish-13]
	_ = x[LanguagePortuguese-14]
	_ = x[LanguageSlovakian-15]
	_ = x[LanguageSlovenian-16]
	_ = x[LanguageSwedish-17]
	_ = x[LanguageRussian-18]
	_ = x[LanguageTurkish-19]
	_ = x[LanguageLatvian-20]
	_ = x[LanguageUkrainian-21]
	_ = x[LanguageArabic-22]
	_ = x[LanguageFarsi-23]
	_ = x[LanguageBulgarian-24]
	_ = x[LanguageRomanian-25]
	_ = x[LanguageChinese-26]
	_ = x[LanguageJapanese-27]
	_ = x[LanguageKorean-28]
	_ = x[LanguageTaiwanese-29]
	_ = x[LanguageThai-30]
	_ = x[LanguageHebrew-31]
	_ = x[LanguageBrazilianPortuguese-32]
	_ = x[LanguageIndonesian-33]
	_ = x[LanguageMalaysian-34]
	_ = x[LanguageVietnamese-35]
	_ = x[LanguageBurmese-36]
	_ = x[LanguageMongolian-37]
	_ = x[LanguageCustom-254]
	_ = x[LanguageInvalid-255]
}

const (
	_Language_name_0 = "EnglishFrenchItalianGermanSpanishCroatianCzechDanishDutchFinnishGreekHungarianNorwegianPolishPortugueseSlovakianSlovenianSwedishRussianTurkishLatvianUkrainianArabicFarsiBulgarianRomanianChineseJapaneseKoreanTaiwaneseThaiHebrewBrazilianPortugueseIndonesianMalaysianVietnameseBurmeseMongolian"
	_Language_name_1 = "CustomInvalid"
)

var (
	_Language_index_0 = [...]uint16{0, 7, 13, 20, 26, 33, 41, 46, 52, 57, 64, 69, 78, 87, 93, 103, 112, 121, 128, 135, 142, 149, 158, 164, 169, 178, 186, 193, 201, 207, 216, 220, 226, 245, 255, 264, 274, 281, 290}
	_Language_index_1 = [...]uint8{0, 6, 13}
)

func (i Language) String() string {
	switch {
	case 0 <= i && i <= 37:
		return _Language_name_0[_Language_index_0[i]:_Language_index_0[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _Language_name_1[_Language_index_1[i]:_Language_index_1[i+1]]
	default:
		return "Language(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageBits0English-1]
	_ = x[LanguageBits0French-2]
	_ = x[LanguageBits0Italian-4]
	_ = x[LanguageBits0German-8]
	_ = x[LanguageBits0Spanish-16]
	_ = x[LanguageBits0Croatian-32]
	_ = x[LanguageBits0Czech-64]
	_ = x[LanguageBits0Danish-128]
	_ = x[LanguageBits0Invalid-0]
}

const (
	_LanguageBits0_name_0 = "InvalidEnglishFrench"
	_LanguageBits0_name_1 = "Italian"
	_LanguageBits0_name_2 = "German"
	_LanguageBits0_name_3 = "Spanish"
	_LanguageBits0_name_4 = "Croatian"
	_LanguageBits0_name_5 = "Czech"
	_LanguageBits0_name_6 = "Danish"
)

var (
	_LanguageBits0_index_0 = [...]uint8{0, 7, 14, 20}
)

func (i LanguageBits0) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits0_name_0[_LanguageBits0_index_0[i]:_LanguageBits0_index_0[i+1]]
	case i == 4:
		return _LanguageBits0_name_1
	case i == 8:
		return _LanguageBits0_name_2
	case i == 16:
		return _LanguageBits0_name_3
	case i == 32:
		return _LanguageBits0_name_4
	case i == 64:
		return _LanguageBits0_name_5
	case i == 128:
		return _LanguageBits0_name_6
	default:
		return "LanguageBits0(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageBits1Dutch-1]
	_ = x[LanguageBits1Finnish-2]
	_ = x[LanguageBits1Greek-4]
	_ = x[LanguageBits1Hungarian-8]
	_ = x[LanguageBits1Norwegian-16]
	_ = x[LanguageBits1Polish-32]
	_ = x[LanguageBits1Portuguese-64]
	_ = x[LanguageBits1Slovakian-128]
	_ = x[LanguageBits1Invalid-0]
}

const (
	_LanguageBits1_name_0 = "InvalidDutchFinnish"
	_LanguageBits1_name_1 = "Greek"
	_LanguageBits1_name_2 = "Hungarian"
	_LanguageBits1_name_3 = "Norwegian"
	_LanguageBits1_name_4 = "Polish"
	_LanguageBits1_name_5 = "Portuguese"
	_LanguageBits1_name_6 = "Slovakian"
)

var (
	_LanguageBits1_index_0 = [...]uint8{0, 7, 12, 19}
)

func (i LanguageBits1) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits1_name_0[_LanguageBits1_index_0[i]:_LanguageBits1_index_0[i+1]]
	case i == 4:
		return _LanguageBits1_name_1
	case i == 8:
		return _LanguageBits1_name_2
	case i == 16:
		return _LanguageBits1_name_3
	case i == 32:
		return _LanguageBits1_name_4
	case i == 64:
		return _LanguageBits1_name_5
	case i == 128:
		return _LanguageBits1_name_6
	default:
		return "LanguageBits1(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageBits2Slovenian-1]
	_ = x[LanguageBits2Swedish-2]
	_ = x[LanguageBits2Russian-4]
	_ = x[LanguageBits2Turkish-8]
	_ = x[LanguageBits2Latvian-16]
	_ = x[LanguageBits2Ukrainian-32]
	_ = x[LanguageBits2Arabic-64]
	_ = x[LanguageBits2Farsi-128]
	_ = x[LanguageBits2Invalid-0]
}

const (
	_LanguageBits2_name_0 = "InvalidSlovenianSwedish"
	_LanguageBits2_name_1 = "Russian"
	_LanguageBits2_name_2 = "Turkish"
	_LanguageBits2_name_3 = "Latvian"
	_LanguageBits2_name_4 = "Ukrainian"
	_LanguageBits2_name_5 = "Arabic"
	_LanguageBits2_name_6 = "Farsi"
)

var (
	_LanguageBits2_index_0 = [...]uint8{0, 7, 16, 23}
)

func (i LanguageBits2) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits2_name_0[_LanguageBits2_index_0[i]:_LanguageBits2_index_0[i+1]]
	case i == 4:
		return _LanguageBits2_name_1
	case i == 8:
		return _LanguageBits2_name_2
	case i == 16:
		return _LanguageBits2_name_3
	case i == 32:
		return _LanguageBits2_name_4
	case i == 64:
		return _LanguageBits2_name_5
	case i == 128:
		return _LanguageBits2_name_6
	default:
		return "LanguageBits2(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageBits3Bulgarian-1]
	_ = x[LanguageBits3Romanian-2]
	_ = x[LanguageBits3Chinese-4]
	_ = x[LanguageBits3Japanese-8]
	_ = x[LanguageBits3Korean-16]
	_ = x[LanguageBits3Taiwanese-32]
	_ = x[LanguageBits3Thai-64]
	_ = x[LanguageBits3Hebrew-128]
	_ = x[LanguageBits3Invalid-0]
}

const (
	_LanguageBits3_name_0 = "InvalidBulgarianRomanian"
	_LanguageBits3_name_1 = "Chinese"
	_LanguageBits3_name_2 = "Japanese"
	_LanguageBits3_name_3 = "Korean"
	_LanguageBits3_name_4 = "Taiwanese"
	_LanguageBits3_name_5 = "Thai"
	_LanguageBits3_name_6 = "Hebrew"
)

var (
	_LanguageBits3_index_0 = [...]uint8{0, 7, 16, 24}
)

func (i LanguageBits3) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits3_name_0[_LanguageBits3_index_0[i]:_LanguageBits3_index_0[i+1]]
	case i == 4:
		return _LanguageBits3_name_1
	case i == 8:
		return _LanguageBits3_name_2
	case i == 16:
		return _LanguageBits3_name_3
	case i == 32:
		return _LanguageBits3_name_4
	case i == 64:
		return _LanguageBits3_name_5
	case i == 128:
		return _LanguageBits3_name_6
	default:
		return "LanguageBits3(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LanguageBits4BrazilianPortuguese-1]
	_ = x[LanguageBits4Indonesian-2]
	_ = x[LanguageBits4Malaysian-4]
	_ = x[LanguageBits4Vietnamese-8]
	_ = x[LanguageBits4Burmese-16]
	_ = x[LanguageBits4Mongolian-32]
	_ = x[LanguageBits4Invalid-0]
}

const (
	_LanguageBits4_name_0 = "InvalidBrazilianPortugueseIndonesian"
	_LanguageBits4_name_1 = "Malaysian"
	_LanguageBits4_name_2 = "Vietnamese"
	_LanguageBits4_name_3 = "Burmese"
	_LanguageBits4_name_4 = "Mongolian"
)

var (
	_LanguageBits4_index_0 = [...]uint8{0, 7, 26, 36}
)

func (i LanguageBits4) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _LanguageBits4_name_0[_LanguageBits4_index_0[i]:_LanguageBits4_index_0[i+1]]
	case i == 4:
		return _LanguageBits4_name_1
	case i == 8:
		return _LanguageBits4_name_2
	case i == 16:
		return _LanguageBits4_name_3
	case i == 32:
		return _LanguageBits4_name_4
	default:
		return "LanguageBits4(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LapTriggerManual-0]
	_ = x[LapTriggerTime-1]
	_ = x[LapTriggerDistance-2]
	_ = x[LapTriggerPositionStart-3]
	_ = x[LapTriggerPositionLap-4]
	_ = x[LapTriggerPositionWaypoint-5]
	_ = x[LapTriggerPositionMarked-6]
	_ = x[LapTriggerSessionEnd-7]
	_ = x[LapTriggerFitnessEquipment-8]
	_ = x[LapTriggerInvalid-255]
}

const (
	_LapTrigger_name_0 = "ManualTimeDistancePositionStartPositionLapPositionWaypointPositionMarkedSessionEndFitnessEquipment"
	_LapTrigger_name_1 = "Invalid"
)

var (
	_LapTrigger_index_0 = [...]uint8{0, 6, 10, 18, 31, 42, 58, 72, 82, 98}
)

func (i LapTrigger) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _LapTrigger_name_0[_LapTrigger_index_0[i]:_LapTrigger_index_0[i+1]]
	case i == 255:
		return _LapTrigger_name_1
	default:
		return "LapTrigger(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LateralRaiseExerciseName45DegreeCableExternalRotation-0]
	_ = x[LateralRaiseExerciseNameAlternatingLateralRaiseWithStaticHold-1]
	_ = x[LateralRaiseExerciseNameBarMuscleUp-2]
	_ = x[LateralRaiseExerciseNameBentOverLateralRaise-3]
	_ = x[LateralRaiseExerciseNameCableDiagonalRaise-4]
	_ = x[LateralRaiseExerciseNameCableFrontRaise-5]
	_ = x[LateralRaiseExerciseNameCalorieRow-6]
	_ = x[LateralRaiseExerciseNameComboShoulderRaise-7]
	_ = x[LateralRaiseExerciseNameDumbbellDiagonalRaise-8]
	_ = x[LateralRaiseExerciseNameDumbbellVRaise-9]
	_ = x[LateralRaiseExerciseNameFrontRaise-10]
	_ = x[LateralRaiseExerciseNameLeaningDumbbellLateralRaise-11]
	_ = x[LateralRaiseExerciseNameLyingDumbbellRaise-12]
	_ = x[LateralRaiseExerciseNameMuscleUp-13]
	_ = x[LateralRaiseExerciseNameOneArmCableLateralRaise-14]
	_ = x[LateralRaiseExerciseNameOverhandGripRearLateralRaise-15]
	_ = x[LateralRaiseExerciseNamePlateRaises-16]
	_ = x[LateralRaiseExerciseNameRingDip-17]
	_ = x[LateralRaiseExerciseNameWeightedRingDip-18]
	_ = x[LateralRaiseExerciseNameRingMuscleUp-19]
	_ = x[LateralRaiseExerciseNameWeightedRingMuscleUp-20]
	_ = x[LateralRaiseExerciseNameRopeClimb-21]
	_ = x[LateralRaiseExerciseNameWeightedRopeClimb-22]
	_ = x[LateralRaiseExerciseNameScaption-23]
	_ = x[LateralRaiseExerciseNameSeatedLateralRaise-24]
	_ = x[LateralRaiseExerciseNameSeatedRearLateralRaise-25]
	_ = x[LateralRaiseExerciseNameSideLyingLateralRaise-26]
	_ = x[LateralRaiseExerciseNameStandingLift-27]
	_ = x[LateralRaiseExerciseNameSuspendedRow-28]
	_ = x[LateralRaiseExerciseNameUnderhandGripRearLateralRaise-29]
	_ = x[LateralRaiseExerciseNameWallSlide-30]
	_ = x[LateralRaiseExerciseNameWeightedWallSlide-31]
	_ = x[LateralRaiseExerciseNameArmCircles-32]
	_ = x[LateralRaiseExerciseNameShavingTheHead-33]
	_ = x[LateralRaiseExerciseNameInvalid-65535]
}

const (
	_LateralRaiseExerciseName_name_0 = "45DegreeCableExternalRotationAlternatingLateralRaiseWithStaticHoldBarMuscleUpBentOverLateralRaiseCableDiagonalRaiseCableFrontRaiseCalorieRowComboShoulderRaiseDumbbellDiagonalRaiseDumbbellVRaiseFrontRaiseLeaningDumbbellLateralRaiseLyingDumbbellRaiseMuscleUpOneArmCableLateralRaiseOverhandGripRearLateralRaisePlateRaisesRingDipWeightedRingDipRingMuscleUpWeightedRingMuscleUpRopeClimbWeightedRopeClimbScaptionSeatedLateralRaiseSeatedRearLateralRaiseSideLyingLateralRaiseStandingLiftSuspendedRowUnderhandGripRearLateralRaiseWallSlideWeightedWallSlideArmCirclesShavingTheHead"
	_LateralRaiseExerciseName_name_1 = "Invalid"
)

var (
	_LateralRaiseExerciseName_index_0 = [...]uint16{0, 29, 66, 77, 97, 115, 130, 140, 158, 179, 193, 203, 230, 248, 256, 279, 307, 318, 325, 340, 352, 372, 381, 398, 406, 424, 446, 467, 479, 491, 520, 529, 546, 556, 570}
)

func (i LateralRaiseExerciseName) String() string {
	switch {
	case 0 <= i && i <= 33:
		return _LateralRaiseExerciseName_name_0[_LateralRaiseExerciseName_index_0[i]:_LateralRaiseExerciseName_index_0[i+1]]
	case i == 65535:
		return _LateralRaiseExerciseName_name_1
	default:
		return "LateralRaiseExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LeftRightBalanceMask-127]
	_ = x[LeftRightBalanceRight-128]
	_ = x[LeftRightBalanceInvalid-255]
}

const (
	_LeftRightBalance_name_0 = "MaskRight"
	_LeftRightBalance_name_1 = "Invalid"
)

var (
	_LeftRightBalance_index_0 = [...]uint8{0, 4, 9}
)

func (i LeftRightBalance) String() string {
	switch {
	case 127 <= i && i <= 128:
		i -= 127
		return _LeftRightBalance_name_0[_LeftRightBalance_index_0[i]:_LeftRightBalance_index_0[i+1]]
	case i == 255:
		return _LeftRightBalance_name_1
	default:
		return "LeftRightBalance(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LeftRightBalance100Mask-16383]
	_ = x[LeftRightBalance100Right-32768]
	_ = x[LeftRightBalance100Invalid-65535]
}

const (
	_LeftRightBalance100_name_0 = "Mask"
	_LeftRightBalance100_name_1 = "Right"
	_LeftRightBalance100_name_2 = "Invalid"
)

func (i LeftRightBalance100) String() string {
	switch {
	case i == 16383:
		return _LeftRightBalance100_name_0
	case i == 32768:
		return _LeftRightBalance100_name_1
	case i == 65535:
		return _LeftRightBalance100_name_2
	default:
		return "LeftRightBalance100(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LegCurlExerciseNameLegCurl-0]
	_ = x[LegCurlExerciseNameWeightedLegCurl-1]
	_ = x[LegCurlExerciseNameGoodMorning-2]
	_ = x[LegCurlExerciseNameSeatedBarbellGoodMorning-3]
	_ = x[LegCurlExerciseNameSingleLegBarbellGoodMorning-4]
	_ = x[LegCurlExerciseNameSingleLegSlidingLegCurl-5]
	_ = x[LegCurlExerciseNameSlidingLegCurl-6]
	_ = x[LegCurlExerciseNameSplitBarbellGoodMorning-7]
	_ = x[LegCurlExerciseNameSplitStanceExtension-8]
	_ = x[LegCurlExerciseNameStaggeredStanceGoodMorning-9]
	_ = x[LegCurlExerciseNameSwissBallHipRaiseAndLegCurl-10]
	_ = x[LegCurlExerciseNameZercherGoodMorning-11]
	_ = x[LegCurlExerciseNameInvalid-65535]
}

const (
	_LegCurlExerciseName_name_0 = "LegCurlWeightedLegCurlGoodMorningSeatedBarbellGoodMorningSingleLegBarbellGoodMorningSingleLegSlidingLegCurlSlidingLegCurlSplitBarbellGoodMorningSplitStanceExtensionStaggeredStanceGoodMorningSwissBallHipRaiseAndLegCurlZercherGoodMorning"
	_LegCurlExerciseName_name_1 = "Invalid"
)

var (
	_LegCurlExerciseName_index_0 = [...]uint8{0, 7, 22, 33, 57, 84, 107, 121, 144, 164, 190, 217, 235}
)

func (i LegCurlExerciseName) String() string {
	switch {
	case 0 <= i && i <= 11:
		return _LegCurlExerciseName_name_0[_LegCurlExerciseName_index_0[i]:_LegCurlExerciseName_index_0[i+1]]
	case i == 65535:
		return _LegCurlExerciseName_name_1
	default:
		return "LegCurlExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LegRaiseExerciseNameHangingKneeRaise-0]
	_ = x[LegRaiseExerciseNameHangingLegRaise-1]
	_ = x[LegRaiseExerciseNameWeightedHangingLegRaise-2]
	_ = x[LegRaiseExerciseNameHangingSingleLegRaise-3]
	_ = x[LegRaiseExerciseNameWeightedHangingSingleLegRaise-4]
	_ = x[LegRaiseExerciseNameKettlebellLegRaises-5]
	_ = x[LegRaiseExerciseNameLegLoweringDrill-6]
	_ = x[LegRaiseExerciseNameWeightedLegLoweringDrill-7]
	_ = x[LegRaiseExerciseNameLyingStraightLegRaise-8]
	_ = x[LegRaiseExerciseNameWeightedLyingStraightLegRaise-9]
	_ = x[LegRaiseExerciseNameMedicineBallLegDrops-10]
	_ = x[LegRaiseExerciseNameQuadrupedLegRaise-11]
	_ = x[LegRaiseExerciseNameWeightedQuadrupedLegRaise-12]
	_ = x[LegRaiseExerciseNameReverseLegRaise-13]
	_ = x[LegRaiseExerciseNameWeightedReverseLegRaise-14]
	_ = x[LegRaiseExerciseNameReverseLegRaiseOnSwissBall-15]
	_ = x[LegRaiseExerciseNameWeightedReverseLegRaiseOnSwissBall-16]
	_ = x[LegRaiseExerciseNameSingleLegLoweringDrill-17]
	_ = x[LegRaiseExerciseNameWeightedSingleLegLoweringDrill-18]
	_ = x[LegRaiseExerciseNameWeightedHangingKneeRaise-19]
	_ = x[LegRaiseExerciseNameLateralStepover-20]
	_ = x[LegRaiseExerciseNameWeightedLateralStepover-21]
	_ = x[LegRaiseExerciseNameInvalid-65535]
}

const (
	_LegRaiseExerciseName_name_0 = "HangingKneeRaiseHangingLegRaiseWeightedHangingLegRaiseHangingSingleLegRaiseWeightedHangingSingleLegRaiseKettlebellLegRaisesLegLoweringDrillWeightedLegLoweringDrillLyingStraightLegRaiseWeightedLyingStraightLegRaiseMedicineBallLegDropsQuadrupedLegRaiseWeightedQuadrupedLegRaiseReverseLegRaiseWeightedReverseLegRaiseReverseLegRaiseOnSwissBallWeightedReverseLegRaiseOnSwissBallSingleLegLoweringDrillWeightedSingleLegLoweringDrillWeightedHangingKneeRaiseLateralStepoverWeightedLateralStepover"
	_LegRaiseExerciseName_name_1 = "Invalid"
)

var (
	_LegRaiseExerciseName_index_0 = [...]uint16{0, 16, 31, 54, 75, 104, 123, 139, 163, 184, 213, 233, 250, 275, 290, 313, 339, 373, 395, 425, 449, 464, 487}
)

func (i LegRaiseExerciseName) String() string {
	switch {
	case 0 <= i && i <= 21:
		return _LegRaiseExerciseName_name_0[_LegRaiseExerciseName_index_0[i]:_LegRaiseExerciseName_index_0[i+1]]
	case i == 65535:
		return _LegRaiseExerciseName_name_1
	default:
		return "LegRaiseExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LengthTypeIdle-0]
	_ = x[LengthTypeActive-1]
	_ = x[LengthTypeInvalid-255]
}

const (
	_LengthType_name_0 = "IdleActive"
	_LengthType_name_1 = "Invalid"
)

var (
	_LengthType_index_0 = [...]uint8{0, 4, 10}
)

func (i LengthType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _LengthType_name_0[_LengthType_index_0[i]:_LengthType_index_0[i+1]]
	case i == 255:
		return _LengthType_name_1
	default:
		return "LengthType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LocalDeviceTypeInvalid-255]
}

const _LocalDeviceType_name = "Invalid"

var _LocalDeviceType_index = [...]uint8{0, 7}

func (i LocalDeviceType) String() string {
	i -= 255
	if i >= LocalDeviceType(len(_LocalDeviceType_index)-1) {
		return "LocalDeviceType(" + strconv.FormatInt(int64(i+255), 10) + ")"
	}
	return _LocalDeviceType_name[_LocalDeviceType_index[i]:_LocalDeviceType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LocaltimeIntoDayInvalid-4294967295]
}

const _LocaltimeIntoDay_name = "Invalid"

var _LocaltimeIntoDay_index = [...]uint8{0, 7}

func (i LocaltimeIntoDay) String() string {
	i -= 4294967295
	if i >= LocaltimeIntoDay(len(_LocaltimeIntoDay_index)-1) {
		return "LocaltimeIntoDay(" + strconv.FormatInt(int64(i+4294967295), 10) + ")"
	}
	return _LocaltimeIntoDay_name[_LocaltimeIntoDay_index[i]:_LocaltimeIntoDay_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LungeExerciseNameOverheadLunge-0]
	_ = x[LungeExerciseNameLungeMatrix-1]
	_ = x[LungeExerciseNameWeightedLungeMatrix-2]
	_ = x[LungeExerciseNameAlternatingBarbellForwardLunge-3]
	_ = x[LungeExerciseNameAlternatingDumbbellLungeWithReach-4]
	_ = x[LungeExerciseNameBackFootElevatedDumbbellSplitSquat-5]
	_ = x[LungeExerciseNameBarbellBoxLunge-6]
	_ = x[LungeExerciseNameBarbellBulgarianSplitSquat-7]
	_ = x[LungeExerciseNameBarbellCrossoverLunge-8]
	_ = x[LungeExerciseNameBarbellFrontSplitSquat-9]
	_ = x[LungeExerciseNameBarbellLunge-10]
	_ = x[LungeExerciseNameBarbellReverseLunge-11]
	_ = x[LungeExerciseNameBarbellSideLunge-12]
	_ = x[LungeExerciseNameBarbellSplitSquat-13]
	_ = x[LungeExerciseNameCoreControlRearLunge-14]
	_ = x[LungeExerciseNameDiagonalLunge-15]
	_ = x[LungeExerciseNameDropLunge-16]
	_ = x[LungeExerciseNameDumbbellBoxLunge-17]
	_ = x[LungeExerciseNameDumbbellBulgarianSplitSquat-18]
	_ = x[LungeExerciseNameDumbbellCrossoverLunge-19]
	_ = x[LungeExerciseNameDumbbellDiagonalLunge-20]
	_ = x[LungeExerciseNameDumbbellLunge-21]
	_ = x[LungeExerciseNameDumbbellLungeAndRotation-22]
	_ = x[LungeExerciseNameDumbbellOverheadBulgarianSplitSquat-23]
	_ = x[LungeExerciseNameDumbbellReverseLungeToHighKneeAndPress-24]
	_ = x[LungeExerciseNameDumbbellSideLunge-25]
	_ = x[LungeExerciseNameElevatedFrontFootBarbellSplitSquat-26]
	_ = x[LungeExerciseNameFrontFootElevatedDumbbellSplitSquat-27]
	_ = x[LungeExerciseNameGunslingerLunge-28]
	_ = x[LungeExerciseNameLawnmowerLunge-29]
	_ = x[LungeExerciseNameLowLungeWithIsometricAdduction-30]
	_ = x[LungeExerciseNameLowSideToSideLunge-31]
	_ = x[LungeExerciseNameLunge-32]
	_ = x[LungeExerciseNameWeightedLunge-33]
	_ = x[LungeExerciseNameLungeWithArmReach-34]
	_ = x[LungeExerciseNameLungeWithDiagonalReach-35]
	_ = x[LungeExerciseNameLungeWithSideBend-36]
	_ = x[LungeExerciseNameOffsetDumbbellLunge-37]
	_ = x[LungeExerciseNameOffsetDumbbellReverseLunge-38]
	_ = x[LungeExerciseNameOverheadBulgarianSplitSquat-39]
	_ = x[LungeExerciseNameOverheadDumbbellReverseLunge-40]
	_ = x[LungeExerciseNameOverheadDumbbellSplitSquat-41]
	_ = x[LungeExerciseNameOverheadLungeWithRotation-42]
	_ = x[LungeExerciseNameReverseBarbellBoxLunge-43]
	_ = x[LungeExerciseNameReverseBoxLunge-44]
	_ = x[LungeExerciseNameReverseDumbbellBoxLunge-45]
	_ = x[LungeExerciseNameReverseDumbbellCrossoverLunge-46]
	_ = x[LungeExerciseNameReverseDumbbellDiagonalLunge-47]
	_ = x[LungeExerciseNameReverseLungeWithReachBack-48]
	_ = x[LungeExerciseNameWeightedReverseLungeWithReachBack-49]
	_ = x[LungeExerciseNameReverseLungeWithTwistAndOverheadReach-50]
	_ = x[LungeExerciseNameWeightedReverseLungeWithTwistAndOverheadReach-51]
	_ = x[LungeExerciseNameReverseSlidingBoxLunge-52]
	_ = x[LungeExerciseNameWeightedReverseSlidingBoxLunge-53]
	_ = x[LungeExerciseNameReverseSlidingLunge-54]
	_ = x[LungeExerciseNameWeightedReverseSlidingLunge-55]
	_ = x[LungeExerciseNameRunnersLungeToBalance-56]
	_ = x[LungeExerciseNameWeightedRunnersLungeToBalance-57]
	_ = x[LungeExerciseNameShiftingSideLunge-58]
	_ = x[LungeExerciseNameSideAndCrossoverLunge-59]
	_ = x[LungeExerciseNameWeightedSideAndCrossoverLunge-60]
	_ = x[LungeExerciseNameSideLunge-61]
	_ = x[LungeExerciseNameWeightedSideLunge-62]
	_ = x[LungeExerciseNameSideLungeAndPress-63]
	_ = x[LungeExerciseNameSideLungeJumpOff-64]
	_ = x[LungeExerciseNameSideLungeSweep-65]
	_ = x[LungeExerciseNameWeightedSideLungeSweep-66]
	_ = x[LungeExerciseNameSideLungeToCrossoverTap-67]
	_ = x[LungeExerciseNameWeightedSideLungeToCrossoverTap-68]
	_ = x[LungeExerciseNameSideToSideLungeChops-69]
	_ = x[LungeExerciseNameWeightedSideToSideLungeChops-70]
	_ = x[LungeExerciseNameSiffJumpLunge-71]
	_ = x[LungeExerciseNameWeightedSiffJumpLunge-72]
	_ = x[LungeExerciseNameSingleArmReverseLungeAndPress-73]
	_ = x[LungeExerciseNameSlidingLateralLunge-74]
	_ = x[LungeExerciseNameWeightedSlidingLateralLunge-75]
	_ = x[LungeExerciseNameWalkingBarbellLunge-76]
	_ = x[LungeExerciseNameWalkingDumbbellLunge-77]
	_ = x[LungeExerciseNameWalkingLunge-78]
	_ = x[LungeExerciseNameWeightedWalkingLunge-79]
	_ = x[LungeExerciseNameWideGripOverheadBarbellSplitSquat-80]
	_ = x[LungeExerciseNameInvalid-65535]
}

const (
	_LungeExerciseName_name_0 = "OverheadLungeLungeMatrixWeightedLungeMatrixAlternatingBarbellForwardLungeAlternatingDumbbellLungeWithReachBackFootElevatedDumbbellSplitSquatBarbellBoxLungeBarbellBulgarianSplitSquatBarbellCrossoverLungeBarbellFrontSplitSquatBarbellLungeBarbellReverseLungeBarbellSideLungeBarbellSplitSquatCoreControlRearLungeDiagonalLungeDropLungeDumbbellBoxLungeDumbbellBulgarianSplitSquatDumbbellCrossoverLungeDumbbellDiagonalLungeDumbbellLungeDumbbellLungeAndRotationDumbbellOverheadBulgarianSplitSquatDumbbellReverseLungeToHighKneeAndPressDumbbellSideLungeElevatedFrontFootBarbellSplitSquatFrontFootElevatedDumbbellSplitSquatGunslingerLungeLawnmowerLungeLowLungeWithIsometricAdductionLowSideToSideLungeLungeWeightedLungeLungeWithArmReachLungeWithDiagonalReachLungeWithSideBendOffsetDumbbellLungeOffsetDumbbellReverseLungeOverheadBulgarianSplitSquatOverheadDumbbellReverseLungeOverheadDumbbellSplitSquatOverheadLungeWithRotationReverseBarbellBoxLungeReverseBoxLungeReverseDumbbellBoxLungeReverseDumbbellCrossoverLungeReverseDumbbellDiagonalLungeReverseLungeWithReachBackWeightedReverseLungeWithReachBackReverseLungeWithTwistAndOverheadReachWeightedReverseLungeWithTwistAndOverheadReachReverseSlidingBoxLungeWeightedReverseSlidingBoxLungeReverseSlidingLungeWeightedReverseSlidingLungeRunnersLungeToBalanceWeightedRunnersLungeToBalanceShiftingSideLungeSideAndCrossoverLungeWeightedSideAndCrossoverLungeSideLungeWeightedSideLungeSideLungeAndPressSideLungeJumpOffSideLungeSweepWeightedSideLungeSweepSideLungeToCrossoverTapWeightedSideLungeToCrossoverTapSideToSideLungeChopsWeightedSideToSideLungeChopsSiffJumpLungeWeightedSiffJumpLungeSingleArmReverseLungeAndPressSlidingLateralLungeWeightedSlidingLateralLungeWalkingBarbellLungeWalkingDumbbellLungeWalkingLungeWeightedWalkingLungeWideGripOverheadBarbellSplitSquat"
	_LungeExerciseName_name_1 = "Invalid"
)

var (
	_LungeExerciseName_index_0 = [...]uint16{0, 13, 24, 43, 73, 106, 140, 155, 181, 202, 224, 236, 255, 271, 288, 308, 321, 330, 346, 373, 395, 416, 429, 453, 488, 526, 543, 577, 612, 627, 641, 671, 689, 694, 707, 724, 746, 763, 782, 808, 835, 863, 889, 914, 936, 951, 974, 1003, 1031, 1056, 1089, 1126, 1171, 1193, 1223, 1242, 1269, 1290, 1319, 1336, 1357, 1386, 1395, 1412, 1429, 1445, 1459, 1481, 1504, 1535, 1555, 1583, 1596, 1617, 1646, 1665, 1692, 1711, 1731, 1743, 1763, 1796}
)

func (i LungeExerciseName) String() string {
	switch {
	case 0 <= i && i <= 80:
		return _LungeExerciseName_name_0[_LungeExerciseName_index_0[i]:_LungeExerciseName_index_0[i+1]]
	case i == 65535:
		return _LungeExerciseName_name_1
	default:
		return "LungeExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ManufacturerGarmin-1]
	_ = x[ManufacturerGarminFr405Antfs-2]
	_ = x[ManufacturerZephyr-3]
	_ = x[ManufacturerDayton-4]
	_ = x[ManufacturerIdt-5]
	_ = x[ManufacturerSrm-6]
	_ = x[ManufacturerQuarq-7]
	_ = x[ManufacturerIbike-8]
	_ = x[ManufacturerSaris-9]
	_ = x[ManufacturerSparkHk-10]
	_ = x[ManufacturerTanita-11]
	_ = x[ManufacturerEchowell-12]
	_ = x[ManufacturerDynastreamOem-13]
	_ = x[ManufacturerNautilus-14]
	_ = x[ManufacturerDynastream-15]
	_ = x[ManufacturerTimex-16]
	_ = x[ManufacturerMetrigear-17]
	_ = x[ManufacturerXelic-18]
	_ = x[ManufacturerBeurer-19]
	_ = x[ManufacturerCardiosport-20]
	_ = x[ManufacturerAAndD-21]
	_ = x[ManufacturerHmm-22]
	_ = x[ManufacturerSuunto-23]
	_ = x[ManufacturerThitaElektronik-24]
	_ = x[ManufacturerGpulse-25]
	_ = x[ManufacturerCleanMobile-26]
	_ = x[ManufacturerPedalBrain-27]
	_ = x[ManufacturerPeaksware-28]
	_ = x[ManufacturerSaxonar-29]
	_ = x[ManufacturerLemondFitness-30]
	_ = x[ManufacturerDexcom-31]
	_ = x[ManufacturerWahooFitness-32]
	_ = x[ManufacturerOctaneFitness-33]
	_ = x[ManufacturerArchinoetics-34]
	_ = x[ManufacturerTheHurtBox-35]
	_ = x[ManufacturerCitizenSystems-36]
	_ = x[ManufacturerMagellan-37]
	_ = x[ManufacturerOsynce-38]
	_ = x[ManufacturerHolux-39]
	_ = x[ManufacturerConcept2-40]
	_ = x[ManufacturerShimano-41]
	_ = x[ManufacturerOneGiantLeap-42]
	_ = x[ManufacturerAceSensor-43]
	_ = x[ManufacturerBrimBrothers-44]
	_ = x[ManufacturerXplova-45]
	_ = x[ManufacturerPerceptionDigital-46]
	_ = x[ManufacturerBf1systems-47]
	_ = x[ManufacturerPioneer-48]
	_ = x[ManufacturerSpantec-49]
	_ = x[ManufacturerMetalogics-50]
	_ = x[Manufacturer4iiiis-51]
	_ = x[ManufacturerSeikoEpson-52]
	_ = x[ManufacturerSeikoEpsonOem-53]
	_ = x[ManufacturerIforPowell-54]
	_ = x[ManufacturerMaxwellGuider-55]
	_ = x[ManufacturerStarTrac-56]
	_ = x[ManufacturerBreakaway-57]
	_ = x[ManufacturerAlatechTechnologyLtd-58]
	_ = x[ManufacturerMioTechnologyEurope-59]
	_ = x[ManufacturerRotor-60]
	_ = x[ManufacturerGeonaute-61]
	_ = x[ManufacturerIdBike-62]
	_ = x[ManufacturerSpecialized-63]
	_ = x[ManufacturerWtek-64]
	_ = x[ManufacturerPhysicalEnterprises-65]
	_ = x[ManufacturerNorthPoleEngineering-66]
	_ = x[ManufacturerBkool-67]
	_ = x[ManufacturerCateye-68]
	_ = x[ManufacturerStagesCycling-69]
	_ = x[ManufacturerSigmasport-70]
	_ = x[ManufacturerTomtom-71]
	_ = x[ManufacturerPeripedal-72]
	_ = x[ManufacturerWattbike-73]
	_ = x[ManufacturerMoxy-76]
	_ = x[ManufacturerCiclosport-77]
	_ = x[ManufacturerPowerbahn-78]
	_ = x[ManufacturerAcornProjectsAps-79]
	_ = x[ManufacturerLifebeam-80]
	_ = x[ManufacturerBontrager-81]
	_ = x[ManufacturerWellgo-82]
	_ = x[ManufacturerScosche-83]
	_ = x[ManufacturerMagura-84]
	_ = x[ManufacturerWoodway-85]
	_ = x[ManufacturerElite-86]
	_ = x[ManufacturerNielsenKellerman-87]
	_ = x[ManufacturerDkCity-88]
	_ = x[ManufacturerTacx-89]
	_ = x[ManufacturerDirectionTechnology-90]
	_ = x[ManufacturerMagtonic-91]
	_ = x[Manufacturer1partcarbon-92]
	_ = x[ManufacturerInsideRideTechnologies-93]
	_ = x[ManufacturerSoundOfMotion-94]
	_ = x[ManufacturerStryd-95]
	_ = x[ManufacturerIcg-96]
	_ = x[ManufacturerMiPulse-97]
	_ = x[ManufacturerBsxAthletics-98]
	_ = x[ManufacturerLook-99]
	_ = x[ManufacturerCampagnoloSrl-100]
	_ = x[ManufacturerBodyBikeSmart-101]
	_ = x[ManufacturerPraxisworks-102]
	_ = x[ManufacturerLimitsTechnology-103]
	_ = x[ManufacturerTopactionTechnology-104]
	_ = x[ManufacturerCosinuss-105]
	_ = x[ManufacturerFitcare-106]
	_ = x[ManufacturerMagene-107]
	_ = x[ManufacturerGiantManufacturingCo-108]
	_ = x[ManufacturerTigrasport-109]
	_ = x[ManufacturerSalutron-110]
	_ = x[ManufacturerTechnogym-111]
	_ = x[ManufacturerBrytonSensors-112]
	_ = x[ManufacturerLatitudeLimited-113]
	_ = x[ManufacturerSoaringTechnology-114]
	_ = x[ManufacturerIgpsport-115]
	_ = x[ManufacturerThinkrider-116]
	_ = x[ManufacturerGopherSport-117]
	_ = x[ManufacturerWaterrower-118]
	_ = x[ManufacturerOrangetheory-119]
	_ = x[ManufacturerInpeak-120]
	_ = x[ManufacturerKinetic-121]
	_ = x[ManufacturerJohnsonHealthTech-122]
	_ = x[ManufacturerPolarElectro-123]
	_ = x[ManufacturerSeesense-124]
	_ = x[ManufacturerNciTechnology-125]
	_ = x[ManufacturerIqsquare-126]
	_ = x[ManufacturerLeomo-127]
	_ = x[ManufacturerIfitCom-128]
	_ = x[ManufacturerCorosByte-129]
	_ = x[ManufacturerVersaDesign-130]
	_ = x[ManufacturerChileaf-131]
	_ = x[ManufacturerCycplus-132]
	_ = x[ManufacturerGravaaByte-133]
	_ = x[ManufacturerSigeyi-134]
	_ = x[ManufacturerCoospo-135]
	_ = x[ManufacturerGeoid-136]
	_ = x[ManufacturerDevelopment-255]
	_ = x[ManufacturerHealthandlife-257]
	_ = x[ManufacturerLezyne-258]
	_ = x[ManufacturerScribeLabs-259]
	_ = x[ManufacturerZwift-260]
	_ = x[ManufacturerWatteam-261]
	_ = x[ManufacturerRecon-262]
	_ = x[ManufacturerFaveroElectronics-263]
	_ = x[ManufacturerDynovelo-264]
	_ = x[ManufacturerStrava-265]
	_ = x[ManufacturerPrecor-266]
	_ = x[ManufacturerBryton-267]
	_ = x[ManufacturerSram-268]
	_ = x[ManufacturerNavman-269]
	_ = x[ManufacturerCobi-270]
	_ = x[ManufacturerSpivi-271]
	_ = x[ManufacturerMioMagellan-272]
	_ = x[ManufacturerEvesports-273]
	_ = x[ManufacturerSensitivusGauge-274]
	_ = x[ManufacturerPodoon-275]
	_ = x[ManufacturerLifeTimeFitness-276]
	_ = x[ManufacturerFalcoEMotors-277]
	_ = x[ManufacturerMinoura-278]
	_ = x[ManufacturerCycliq-279]
	_ = x[ManufacturerLuxottica-280]
	_ = x[ManufacturerTrainerRoad-281]
	_ = x[ManufacturerTheSufferfest-282]
	_ = x[ManufacturerFullspeedahead-283]
	_ = x[ManufacturerVirtualtraining-284]
	_ = x[ManufacturerFeedbacksports-285]
	_ = x[ManufacturerOmata-286]
	_ = x[ManufacturerVdo-287]
	_ = x[ManufacturerMagneticdays-288]
	_ = x[ManufacturerHammerhead-289]
	_ = x[ManufacturerKineticByKurt-290]
	_ = x[ManufacturerShapelog-291]
	_ = x[ManufacturerDabuziduo-292]
	_ = x[ManufacturerJetblack-293]
	_ = x[ManufacturerCoros-294]
	_ = x[ManufacturerVirtugo-295]
	_ = x[ManufacturerVelosense-296]
	_ = x[ManufacturerCycligentinc-297]
	_ = x[ManufacturerTrailforks-298]
	_ = x[ManufacturerMahleEbikemotion-299]
	_ = x[ManufacturerNurvv-300]
	_ = x[ManufacturerMicroprogram-301]
	_ = x[ManufacturerZone5cloud-302]
	_ = x[ManufacturerGreenteg-303]
	_ = x[ManufacturerYamahaMotors-304]
	_ = x[ManufacturerWhoop-305]
	_ = x[ManufacturerGravaa-306]
	_ = x[ManufacturerOnelap-307]
	_ = x[ManufacturerMonarkExercise-308]
	_ = x[ManufacturerForm-309]
	_ = x[ManufacturerDecathlon-310]
	_ = x[ManufacturerSyncros-311]
	_ = x[ManufacturerActigraphcorp-5759]
	_ = x[ManufacturerInvalid-65535]
}

const (
	_Manufacturer_name_0 = "GarminGarminFr405AntfsZephyrDaytonIdtSrmQuarqIbikeSarisSparkHkTanitaEchowellDynastreamOemNautilusDynastreamTimexMetrigearXelicBeurerCardiosportAAndDHmmSuuntoThitaElektronikGpulseCleanMobilePedalBrainPeakswareSaxonarLemondFitnessDexcomWahooFitnessOctaneFitnessArchinoeticsTheHurtBoxCitizenSystemsMagellanOsynceHoluxConcept2ShimanoOneGiantLeapAceSensorBrimBrothersXplovaPerceptionDigitalBf1systemsPioneerSpantecMetalogics4iiiisSeikoEpsonSeikoEpsonOemIforPowellMaxwellGuiderStarTracBreakawayAlatechTechnologyLtdMioTechnologyEuropeRotorGeonauteIdBikeSpecializedWtekPhysicalEnterprisesNorthPoleEngineeringBkoolCateyeStagesCyclingSigmasportTomtomPeripedalWattbike"
	_Manufacturer_name_1 = "MoxyCiclosportPowerbahnAcornProjectsApsLifebeamBontragerWellgoScoscheMaguraWoodwayEliteNielsenKellermanDkCityTacxDirectionTechnologyMagtonic1partcarbonInsideRideTechnologiesSoundOfMotionStrydIcgMiPulseBsxAthleticsLookCampagnoloSrlBodyBikeSmartPraxisworksLimitsTechnologyTopactionTechnologyCosinussFitcareMageneGiantManufacturingCoTigrasportSalutronTechnogymBrytonSensorsLatitudeLimitedSoaringTechnologyIgpsportThinkriderGopherSportWaterrowerOrangetheoryInpeakKineticJohnsonHealthTechPolarElectroSeesenseNciTechnologyIqsquareLeomoIfitComCorosByteVersaDesignChileafCycplusGravaaByteSigeyiCoospoGeoid"
	_Manufacturer_name_2 = "Development"
	_Manufacturer_name_3 = "HealthandlifeLezyneScribeLabsZwiftWatteamReconFaveroElectronicsDynoveloStravaPrecorBrytonSramNavmanCobiSpiviMioMagellanEvesportsSensitivusGaugePodoonLifeTimeFitnessFalcoEMotorsMinouraCycliqLuxotticaTrainerRoadTheSufferfestFullspeedaheadVirtualtrainingFeedbacksportsOmataVdoMagneticdaysHammerheadKineticByKurtShapelogDabuziduoJetblackCorosVirtugoVelosenseCycligentincTrailforksMahleEbikemotionNurvvMicroprogramZone5cloudGreentegYamahaMotorsWhoopGravaaOnelapMonarkExerciseFormDecathlonSyncros"
	_Manufacturer_name_4 = "Actigraphcorp"
	_Manufacturer_name_5 = "Invalid"
)

var (
	_Manufacturer_index_0 = [...]uint16{0, 6, 22, 28, 34, 37, 40, 45, 50, 55, 62, 68, 76, 89, 97, 107, 112, 121, 126, 132, 143, 148, 151, 157, 172, 178, 189, 199, 208, 215, 228, 234, 246, 259, 271, 281, 295, 303, 309, 314, 322, 329, 341, 350, 362, 368, 385, 395, 402, 409, 419, 425, 435, 448, 458, 471, 479, 488, 508, 527, 532, 540, 546, 557, 561, 580, 600, 605, 611, 624, 634, 640, 649, 657}
	_Manufacturer_index_1 = [...]uint16{0, 4, 14, 23, 39, 47, 56, 62, 69, 75, 82, 87, 103, 109, 113, 132, 140, 151, 173, 186, 191, 194, 201, 213, 217, 230, 243, 254, 270, 289, 297, 304, 310, 330, 340, 348, 357, 370, 385, 402, 410, 420, 431, 441, 453, 459, 466, 483, 495, 503, 516, 524, 529, 536, 545, 556, 563, 570, 580, 586, 592, 597}
	_Manufacturer_index_3 = [...]uint16{0, 13, 19, 29, 34, 41, 46, 63, 71, 77, 83, 89, 93, 99, 103, 108, 119, 128, 143, 149, 164, 176, 183, 189, 198, 209, 222, 236, 251, 265, 270, 273, 285, 295, 308, 316, 325, 333, 338, 345, 354, 366, 376, 392, 397, 409, 419, 427, 439, 444, 450, 456, 470, 474, 483, 490}
)

func (i Manufacturer) String() string {
	switch {
	case 1 <= i && i <= 73:
		i -= 1
		return _Manufacturer_name_0[_Manufacturer_index_0[i]:_Manufacturer_index_0[i+1]]
	case 76 <= i && i <= 136:
		i -= 76
		return _Manufacturer_name_1[_Manufacturer_index_1[i]:_Manufacturer_index_1[i+1]]
	case i == 255:
		return _Manufacturer_name_2
	case 257 <= i && i <= 311:
		i -= 257
		return _Manufacturer_name_3[_Manufacturer_index_3[i]:_Manufacturer_index_3[i+1]]
	case i == 5759:
		return _Manufacturer_name_4
	case i == 65535:
		return _Manufacturer_name_5
	default:
		return "Manufacturer(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MesgCountNumPerFile-0]
	_ = x[MesgCountMaxPerFile-1]
	_ = x[MesgCountMaxPerFileType-2]
	_ = x[MesgCountInvalid-255]
}

const (
	_MesgCount_name_0 = "NumPerFileMaxPerFileMaxPerFileType"
	_MesgCount_name_1 = "Invalid"
)

var (
	_MesgCount_index_0 = [...]uint8{0, 10, 20, 34}
)

func (i MesgCount) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _MesgCount_name_0[_MesgCount_index_0[i]:_MesgCount_index_0[i+1]]
	case i == 255:
		return _MesgCount_name_1
	default:
		return "MesgCount(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MesgNumFileId-0]
	_ = x[MesgNumCapabilities-1]
	_ = x[MesgNumDeviceSettings-2]
	_ = x[MesgNumUserProfile-3]
	_ = x[MesgNumHrmProfile-4]
	_ = x[MesgNumSdmProfile-5]
	_ = x[MesgNumBikeProfile-6]
	_ = x[MesgNumZonesTarget-7]
	_ = x[MesgNumHrZone-8]
	_ = x[MesgNumPowerZone-9]
	_ = x[MesgNumMetZone-10]
	_ = x[MesgNumSport-12]
	_ = x[MesgNumGoal-15]
	_ = x[MesgNumSession-18]
	_ = x[MesgNumLap-19]
	_ = x[MesgNumRecord-20]
	_ = x[MesgNumEvent-21]
	_ = x[MesgNumDeviceInfo-23]
	_ = x[MesgNumWorkout-26]
	_ = x[MesgNumWorkoutStep-27]
	_ = x[MesgNumSchedule-28]
	_ = x[MesgNumWeightScale-30]
	_ = x[MesgNumCourse-31]
	_ = x[MesgNumCoursePoint-32]
	_ = x[MesgNumTotals-33]
	_ = x[MesgNumActivity-34]
	_ = x[MesgNumSoftware-35]
	_ = x[MesgNumFileCapabilities-37]
	_ = x[MesgNumMesgCapabilities-38]
	_ = x[MesgNumFieldCapabilities-39]
	_ = x[MesgNumFileCreator-49]
	_ = x[MesgNumBloodPressure-51]
	_ = x[MesgNumSpeedZone-53]
	_ = x[MesgNumMonitoring-55]
	_ = x[MesgNumTrainingFile-72]
	_ = x[MesgNumHrv-78]
	_ = x[MesgNumAntRx-80]
	_ = x[MesgNumAntTx-81]
	_ = x[MesgNumAntChannelId-82]
	_ = x[MesgNumLength-101]
	_ = x[MesgNumMonitoringInfo-103]
	_ = x[MesgNumPad-105]
	_ = x[MesgNumSlaveDevice-106]
	_ = x[MesgNumConnectivity-127]
	_ = x[MesgNumWeatherConditions-128]
	_ = x[MesgNumWeatherAlert-129]
	_ = x[MesgNumCadenceZone-131]
	_ = x[MesgNumHr-132]
	_ = x[MesgNumSegmentLap-142]
	_ = x[MesgNumMemoGlob-145]
	_ = x[MesgNumSegmentId-148]
	_ = x[MesgNumSegmentLeaderboardEntry-149]
	_ = x[MesgNumSegmentPoint-150]
	_ = x[MesgNumSegmentFile-151]
	_ = x[MesgNumWorkoutSession-158]
	_ = x[MesgNumWatchfaceSettings-159]
	_ = x[MesgNumGpsMetadata-160]
	_ = x[MesgNumCameraEvent-161]
	_ = x[MesgNumTimestampCorrelation-162]
	_ = x[MesgNumGyroscopeData-164]
	_ = x[MesgNumAccelerometerData-165]
	_ = x[MesgNumThreeDSensorCalibration-167]
	_ = x[MesgNumVideoFrame-169]
	_ = x[MesgNumObdiiData-174]
	_ = x[MesgNumNmeaSentence-177]
	_ = x[MesgNumAviationAttitude-178]
	_ = x[MesgNumVideo-184]
	_ = x[MesgNumVideoTitle-185]
	_ = x[MesgNumVideoDescription-186]
	_ = x[MesgNumVideoClip-187]
	_ = x[MesgNumOhrSettings-188]
	_ = x[MesgNumExdScreenConfiguration-200]
	_ = x[MesgNumExdDataFieldConfiguration-201]
	_ = x[MesgNumExdDataConceptConfiguration-202]
	_ = x[MesgNumFieldDescription-206]
	_ = x[MesgNumDeveloperDataId-207]
	_ = x[MesgNumMagnetometerData-208]
	_ = x[MesgNumBarometerData-209]
	_ = x[MesgNumOneDSensorCalibration-210]
	_ = x[MesgNumSet-225]
	_ = x[MesgNumStressLevel-227]
	_ = x[MesgNumDiveSettings-258]
	_ = x[MesgNumDiveGas-259]
	_ = x[MesgNumDiveAlarm-262]
	_ = x[MesgNumExerciseTitle-264]
	_ = x[MesgNumDiveSummary-268]
	_ = x[MesgNumJump-285]
	_ = x[MesgNumClimbPro-317]
	_ = x[MesgNumMfgRangeMin-65280]
	_ = x[MesgNumMfgRangeMax-65534]
	_ = x[MesgNumInvalid-65535]
}

const _MesgNum_name = "FileIdCapabilitiesDeviceSettingsUserProfileHrmProfileSdmProfileBikeProfileZonesTargetHrZonePowerZoneMetZoneSportGoalSessionLapRecordEventDeviceInfoWorkoutWorkoutStepScheduleWeightScaleCourseCoursePointTotalsActivitySoftwareFileCapabilitiesMesgCapabilitiesFieldCapabilitiesFileCreatorBloodPressureSpeedZoneMonitoringTrainingFileHrvAntRxAntTxAntChannelIdLengthMonitoringInfoPadSlaveDeviceConnectivityWeatherConditionsWeatherAlertCadenceZoneHrSegmentLapMemoGlobSegmentIdSegmentLeaderboardEntrySegmentPointSegmentFileWorkoutSessionWatchfaceSettingsGpsMetadataCameraEventTimestampCorrelationGyroscopeDataAccelerometerDataThreeDSensorCalibrationVideoFrameObdiiDataNmeaSentenceAviationAttitudeVideoVideoTitleVideoDescriptionVideoClipOhrSettingsExdScreenConfigurationExdDataFieldConfigurationExdDataConceptConfigurationFieldDescriptionDeveloperDataIdMagnetometerDataBarometerDataOneDSensorCalibrationSetStressLevelDiveSettingsDiveGasDiveAlarmExerciseTitleDiveSummaryJumpClimbProMfgRangeMinMfgRangeMaxInvalid"

var _MesgNum_map = map[MesgNum]string{
	0:     _MesgNum_name[0:6],
	1:     _MesgNum_name[6:18],
	2:     _MesgNum_name[18:32],
	3:     _MesgNum_name[32:43],
	4:     _MesgNum_name[43:53],
	5:     _MesgNum_name[53:63],
	6:     _MesgNum_name[63:74],
	7:     _MesgNum_name[74:85],
	8:     _MesgNum_name[85:91],
	9:     _MesgNum_name[91:100],
	10:    _MesgNum_name[100:107],
	12:    _MesgNum_name[107:112],
	15:    _MesgNum_name[112:116],
	18:    _MesgNum_name[116:123],
	19:    _MesgNum_name[123:126],
	20:    _MesgNum_name[126:132],
	21:    _MesgNum_name[132:137],
	23:    _MesgNum_name[137:147],
	26:    _MesgNum_name[147:154],
	27:    _MesgNum_name[154:165],
	28:    _MesgNum_name[165:173],
	30:    _MesgNum_name[173:184],
	31:    _MesgNum_name[184:190],
	32:    _MesgNum_name[190:201],
	33:    _MesgNum_name[201:207],
	34:    _MesgNum_name[207:215],
	35:    _MesgNum_name[215:223],
	37:    _MesgNum_name[223:239],
	38:    _MesgNum_name[239:255],
	39:    _MesgNum_name[255:272],
	49:    _MesgNum_name[272:283],
	51:    _MesgNum_name[283:296],
	53:    _MesgNum_name[296:305],
	55:    _MesgNum_name[305:315],
	72:    _MesgNum_name[315:327],
	78:    _MesgNum_name[327:330],
	80:    _MesgNum_name[330:335],
	81:    _MesgNum_name[335:340],
	82:    _MesgNum_name[340:352],
	101:   _MesgNum_name[352:358],
	103:   _MesgNum_name[358:372],
	105:   _MesgNum_name[372:375],
	106:   _MesgNum_name[375:386],
	127:   _MesgNum_name[386:398],
	128:   _MesgNum_name[398:415],
	129:   _MesgNum_name[415:427],
	131:   _MesgNum_name[427:438],
	132:   _MesgNum_name[438:440],
	142:   _MesgNum_name[440:450],
	145:   _MesgNum_name[450:458],
	148:   _MesgNum_name[458:467],
	149:   _MesgNum_name[467:490],
	150:   _MesgNum_name[490:502],
	151:   _MesgNum_name[502:513],
	158:   _MesgNum_name[513:527],
	159:   _MesgNum_name[527:544],
	160:   _MesgNum_name[544:555],
	161:   _MesgNum_name[555:566],
	162:   _MesgNum_name[566:586],
	164:   _MesgNum_name[586:599],
	165:   _MesgNum_name[599:616],
	167:   _MesgNum_name[616:639],
	169:   _MesgNum_name[639:649],
	174:   _MesgNum_name[649:658],
	177:   _MesgNum_name[658:670],
	178:   _MesgNum_name[670:686],
	184:   _MesgNum_name[686:691],
	185:   _MesgNum_name[691:701],
	186:   _MesgNum_name[701:717],
	187:   _MesgNum_name[717:726],
	188:   _MesgNum_name[726:737],
	200:   _MesgNum_name[737:759],
	201:   _MesgNum_name[759:784],
	202:   _MesgNum_name[784:811],
	206:   _MesgNum_name[811:827],
	207:   _MesgNum_name[827:842],
	208:   _MesgNum_name[842:858],
	209:   _MesgNum_name[858:871],
	210:   _MesgNum_name[871:892],
	225:   _MesgNum_name[892:895],
	227:   _MesgNum_name[895:906],
	258:   _MesgNum_name[906:918],
	259:   _MesgNum_name[918:925],
	262:   _MesgNum_name[925:934],
	264:   _MesgNum_name[934:947],
	268:   _MesgNum_name[947:958],
	285:   _MesgNum_name[958:962],
	317:   _MesgNum_name[962:970],
	65280: _MesgNum_name[970:981],
	65534: _MesgNum_name[981:992],
	65535: _MesgNum_name[992:999],
}

func (i MesgNum) String() string {
	if str, ok := _MesgNum_map[i]; ok {
		return str
	}
	return "MesgNum(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MessageIndexSelected-32768]
	_ = x[MessageIndexReserved-28672]
	_ = x[MessageIndexMask-4095]
	_ = x[MessageIndexInvalid-65535]
}

const (
	_MessageIndex_name_0 = "Mask"
	_MessageIndex_name_1 = "Reserved"
	_MessageIndex_name_2 = "Selected"
	_MessageIndex_name_3 = "Invalid"
)

func (i MessageIndex) String() string {
	switch {
	case i == 4095:
		return _MessageIndex_name_0
	case i == 28672:
		return _MessageIndex_name_1
	case i == 32768:
		return _MessageIndex_name_2
	case i == 65535:
		return _MessageIndex_name_3
	default:
		return "MessageIndex(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[OlympicLiftExerciseNameBarbellHangPowerClean-0]
	_ = x[OlympicLiftExerciseNameBarbellHangSquatClean-1]
	_ = x[OlympicLiftExerciseNameBarbellPowerClean-2]
	_ = x[OlympicLiftExerciseNameBarbellPowerSnatch-3]
	_ = x[OlympicLiftExerciseNameBarbellSquatClean-4]
	_ = x[OlympicLiftExerciseNameCleanAndJerk-5]
	_ = x[OlympicLiftExerciseNameBarbellHangPowerSnatch-6]
	_ = x[OlympicLiftExerciseNameBarbellHangPull-7]
	_ = x[OlympicLiftExerciseNameBarbellHighPull-8]
	_ = x[OlympicLiftExerciseNameBarbellSnatch-9]
	_ = x[OlympicLiftExerciseNameBarbellSplitJerk-10]
	_ = x[OlympicLiftExerciseNameClean-11]
	_ = x[OlympicLiftExerciseNameDumbbellClean-12]
	_ = x[OlympicLiftExerciseNameDumbbellHangPull-13]
	_ = x[OlympicLiftExerciseNameOneHandDumbbellSplitSnatch-14]
	_ = x[OlympicLiftExerciseNamePushJerk-15]
	_ = x[OlympicLiftExerciseNameSingleArmDumbbellSnatch-16]
	_ = x[OlympicLiftExerciseNameSingleArmHangSnatch-17]
	_ = x[OlympicLiftExerciseNameSingleArmKettlebellSnatch-18]
	_ = x[OlympicLiftExerciseNameSplitJerk-19]
	_ = x[OlympicLiftExerciseNameSquatCleanAndJerk-20]
	_ = x[OlympicLiftExerciseNameInvalid-65535]
}

const (
	_OlympicLiftExerciseName_name_0 = "BarbellHangPowerCleanBarbellHangSquatCleanBarbellPowerCleanBarbellPowerSnatchBarbellSquatCleanCleanAndJerkBarbellHangPowerSnatchBarbellHangPullBarbellHighPullBarbellSnatchBarbellSplitJerkCleanDumbbellCleanDumbbellHangPullOneHandDumbbellSplitSnatchPushJerkSingleArmDumbbellSnatchSingleArmHangSnatchSingleArmKettlebellSnatchSplitJerkSquatCleanAndJerk"
	_OlympicLiftExerciseName_name_1 = "Invalid"
)

var (
	_OlympicLiftExerciseName_index_0 = [...]uint16{0, 21, 42, 59, 77, 94, 106, 128, 143, 158, 171, 187, 192, 205, 221, 247, 255, 278, 297, 322, 331, 348}
)

func (i OlympicLiftExerciseName) String() string {
	switch {
	case 0 <= i && i <= 20:
		return _OlympicLiftExerciseName_name_0[_OlympicLiftExerciseName_index_0[i]:_OlympicLiftExerciseName_index_0[i+1]]
	case i == 65535:
		return _OlympicLiftExerciseName_name_1
	default:
		return "OlympicLiftExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PlankExerciseName45DegreePlank-0]
	_ = x[PlankExerciseNameWeighted45DegreePlank-1]
	_ = x[PlankExerciseName90DegreeStaticHold-2]
	_ = x[PlankExerciseNameWeighted90DegreeStaticHold-3]
	_ = x[PlankExerciseNameBearCrawl-4]
	_ = x[PlankExerciseNameWeightedBearCrawl-5]
	_ = x[PlankExerciseNameCrossBodyMountainClimber-6]
	_ = x[PlankExerciseNameWeightedCrossBodyMountainClimber-7]
	_ = x[PlankExerciseNameElbowPlankPikeJacks-8]
	_ = x[PlankExerciseNameWeightedElbowPlankPikeJacks-9]
	_ = x[PlankExerciseNameElevatedFeetPlank-10]
	_ = x[PlankExerciseNameWeightedElevatedFeetPlank-11]
	_ = x[PlankExerciseNameElevatorAbs-12]
	_ = x[PlankExerciseNameWeightedElevatorAbs-13]
	_ = x[PlankExerciseNameExtendedPlank-14]
	_ = x[PlankExerciseNameWeightedExtendedPlank-15]
	_ = x[PlankExerciseNameFullPlankPasseTwist-16]
	_ = x[PlankExerciseNameWeightedFullPlankPasseTwist-17]
	_ = x[PlankExerciseNameInchingElbowPlank-18]
	_ = x[PlankExerciseNameWeightedInchingElbowPlank-19]
	_ = x[PlankExerciseNameInchwormToSidePlank-20]
	_ = x[PlankExerciseNameWeightedInchwormToSidePlank-21]
	_ = x[PlankExerciseNameKneelingPlank-22]
	_ = x[PlankExerciseNameWeightedKneelingPlank-23]
	_ = x[PlankExerciseNameKneelingSidePlankWithLegLift-24]
	_ = x[PlankExerciseNameWeightedKneelingSidePlankWithLegLift-25]
	_ = x[PlankExerciseNameLateralRoll-26]
	_ = x[PlankExerciseNameWeightedLateralRoll-27]
	_ = x[PlankExerciseNameLyingReversePlank-28]
	_ = x[PlankExerciseNameWeightedLyingReversePlank-29]
	_ = x[PlankExerciseNameMedicineBallMountainClimber-30]
	_ = x[PlankExerciseNameWeightedMedicineBallMountainClimber-31]
	_ = x[PlankExerciseNameModifiedMountainClimberAndExtension-32]
	_ = x[PlankExerciseNameWeightedModifiedMountainClimberAndExtension-33]
	_ = x[PlankExerciseNameMountainClimber-34]
	_ = x[PlankExerciseNameWeightedMountainClimber-35]
	_ = x[PlankExerciseNameMountainClimberOnSlidingDiscs-36]
	_ = x[PlankExerciseNameWeightedMountainClimberOnSlidingDiscs-37]
	_ = x[PlankExerciseNameMountainClimberWithFeetOnBosuBall-38]
	_ = x[PlankExerciseNameWeightedMountainClimberWithFeetOnBosuBall-39]
	_ = x[PlankExerciseNameMountainClimberWithHandsOnBench-40]
	_ = x[PlankExerciseNameMountainClimberWithHandsOnSwissBall-41]
	_ = x[PlankExerciseNameWeightedMountainClimberWithHandsOnSwissBall-42]
	_ = x[PlankExerciseNamePlank-43]
	_ = x[PlankExerciseNamePlankJacksWithFeetOnSlidingDiscs-44]
	_ = x[PlankExerciseNameWeightedPlankJacksWithFeetOnSlidingDiscs-45]
	_ = x[PlankExerciseNamePlankKneeTwist-46]
	_ = x[PlankExerciseNameWeightedPlankKneeTwist-47]
	_ = x[PlankExerciseNamePlankPikeJumps-48]
	_ = x[PlankExerciseNameWeightedPlankPikeJumps-49]
	_ = x[PlankExerciseNamePlankPikes-50]
	_ = x[PlankExerciseNameWeightedPlankPikes-51]
	_ = x[PlankExerciseNamePlankToStandUp-52]
	_ = x[PlankExerciseNameWeightedPlankToStandUp-53]
	_ = x[PlankExerciseNamePlankWithArmRaise-54]
	_ = x[PlankExerciseNameWeightedPlankWithArmRaise-55]
	_ = x[PlankExerciseNamePlankWithKneeToElbow-56]
	_ = x[PlankExerciseNameWeightedPlankWithKneeToElbow-57]
	_ = x[PlankExerciseNamePlankWithObliqueCrunch-58]
	_ = x[PlankExerciseNameWeightedPlankWithObliqueCrunch-59]
	_ = x[PlankExerciseNamePlyometricSidePlank-60]
	_ = x[PlankExerciseNameWeightedPlyometricSidePlank-61]
	_ = x[PlankExerciseNameRollingSidePlank-62]
	_ = x[PlankExerciseNameWeightedRollingSidePlank-63]
	_ = x[PlankExerciseNameSideKickPlank-64]
	_ = x[PlankExerciseNameWeightedSideKickPlank-65]
	_ = x[PlankExerciseNameSidePlank-66]
	_ = x[PlankExerciseNameWeightedSidePlank-67]
	_ = x[PlankExerciseNameSidePlankAndRow-68]
	_ = x[PlankExerciseNameWeightedSidePlankAndRow-69]
	_ = x[PlankExerciseNameSidePlankLift-70]
	_ = x[PlankExerciseNameWeightedSidePlankLift-71]
	_ = x[PlankExerciseNameSidePlankWithElbowOnBosuBall-72]
	_ = x[PlankExerciseNameWeightedSidePlankWithElbowOnBosuBall-73]
	_ = x[PlankExerciseNameSidePlankWithFeetOnBench-74]
	_ = x[PlankExerciseNameWeightedSidePlankWithFeetOnBench-75]
	_ = x[PlankExerciseNameSidePlankWithKneeCircle-76]
	_ = x[PlankExerciseNameWeightedSidePlankWithKneeCircle-77]
	_ = x[PlankExerciseNameSidePlankWithKneeTuck-78]
	_ = x[PlankExerciseNameWeightedSidePlankWithKneeTuck-79]
	_ = x[PlankExerciseNameSidePlankWithLegLift-80]
	_ = x[PlankExerciseNameWeightedSidePlankWithLegLift-81]
	_ = x[PlankExerciseNameSidePlankWithReachUnder-82]
	_ = x[PlankExerciseNameWeightedSidePlankWithReachUnder-83]
	_ = x[PlankExerciseNameSingleLegElevatedFeetPlank-84]
	_ = x[PlankExerciseNameWeightedSingleLegElevatedFeetPlank-85]
	_ = x[PlankExerciseNameSingleLegFlexAndExtend-86]
	_ = x[PlankExerciseNameWeightedSingleLegFlexAndExtend-87]
	_ = x[PlankExerciseNameSingleLegSidePlank-88]
	_ = x[PlankExerciseNameWeightedSingleLegSidePlank-89]
	_ = x[PlankExerciseNameSpidermanPlank-90]
	_ = x[PlankExerciseNameWeightedSpidermanPlank-91]
	_ = x[PlankExerciseNameStraightArmPlank-92]
	_ = x[PlankExerciseNameWeightedStraightArmPlank-93]
	_ = x[PlankExerciseNameStraightArmPlankWithShoulderTouch-94]
	_ = x[PlankExerciseNameWeightedStraightArmPlankWithShoulderTouch-95]
	_ = x[PlankExerciseNameSwissBallPlank-96]
	_ = x[PlankExerciseNameWeightedSwissBallPlank-97]
	_ = x[PlankExerciseNameSwissBallPlankLegLift-98]
	_ = x[PlankExerciseNameWeightedSwissBallPlankLegLift-99]
	_ = x[PlankExerciseNameSwissBallPlankLegLiftAndHold-100]
	_ = x[PlankExerciseNameSwissBallPlankWithFeetOnBench-101]
	_ = x[PlankExerciseNameWeightedSwissBallPlankWithFeetOnBench-102]
	_ = x[PlankExerciseNameSwissBallProneJackknife-103]
	_ = x[PlankExerciseNameWeightedSwissBallProneJackknife-104]
	_ = x[PlankExerciseNameSwissBallSidePlank-105]
	_ = x[PlankExerciseNameWeightedSwissBallSidePlank-106]
	_ = x[PlankExerciseNameThreeWayPlank-107]
	_ = x[PlankExerciseNameWeightedThreeWayPlank-108]
	_ = x[PlankExerciseNameTowelPlankAndKneeIn-109]
	_ = x[PlankExerciseNameWeightedTowelPlankAndKneeIn-110]
	_ = x[PlankExerciseNameTStabilization-111]
	_ = x[PlankExerciseNameWeightedTStabilization-112]
	_ = x[PlankExerciseNameTurkishGetUpToSidePlank-113]
	_ = x[PlankExerciseNameWeightedTurkishGetUpToSidePlank-114]
	_ = x[PlankExerciseNameTwoPointPlank-115]
	_ = x[PlankExerciseNameWeightedTwoPointPlank-116]
	_ = x[PlankExerciseNameWeightedPlank-117]
	_ = x[PlankExerciseNameWideStancePlankWithDiagonalArmLift-118]
	_ = x[PlankExerciseNameWeightedWideStancePlankWithDiagonalArmLift-119]
	_ = x[PlankExerciseNameWideStancePlankWithDiagonalLegLift-120]
	_ = x[PlankExerciseNameWeightedWideStancePlankWithDiagonalLegLift-121]
	_ = x[PlankExerciseNameWideStancePlankWithLegLift-122]
	_ = x[PlankExerciseNameWeightedWideStancePlankWithLegLift-123]
	_ = x[PlankExerciseNameWideStancePlankWithOppositeArmAndLegLift-124]
	_ = x[PlankExerciseNameWeightedMountainClimberWithHandsOnBench-125]
	_ = x[PlankExerciseNameWeightedSwissBallPlankLegLiftAndHold-126]
	_ = x[PlankExerciseNameWeightedWideStancePlankWithOppositeArmAndLegLift-127]
	_ = x[PlankExerciseNamePlankWithFeetOnSwissBall-128]
	_ = x[PlankExerciseNameSidePlankToPlankWithReachUnder-129]
	_ = x[PlankExerciseNameBridgeWithGluteLowerLift-130]
	_ = x[PlankExerciseNameBridgeOneLegBridge-131]
	_ = x[PlankExerciseNamePlankWithArmVariations-132]
	_ = x[PlankExerciseNamePlankWithLegLift-133]
	_ = x[PlankExerciseNameReversePlankWithLegPull-134]
	_ = x[PlankExerciseNameInvalid-65535]
}

const (
	_PlankExerciseName_name_0 = "45DegreePlankWeighted45DegreePlank90DegreeStaticHoldWeighted90DegreeStaticHoldBearCrawlWeightedBearCrawlCrossBodyMountainClimberWeightedCrossBodyMountainClimberElbowPlankPikeJacksWeightedElbowPlankPikeJacksElevatedFeetPlankWeightedElevatedFeetPlankElevatorAbsWeightedElevatorAbsExtendedPlankWeightedExtendedPlankFullPlankPasseTwistWeightedFullPlankPasseTwistInchingElbowPlankWeightedInchingElbowPlankInchwormToSidePlankWeightedInchwormToSidePlankKneelingPlankWeightedKneelingPlankKneelingSidePlankWithLegLiftWeightedKneelingSidePlankWithLegLiftLateralRollWeightedLateralRollLyingReversePlankWeightedLyingReversePlankMedicineBallMountainClimberWeightedMedicineBallMountainClimberModifiedMountainClimberAndExtensionWeightedModifiedMountainClimberAndExtensionMountainClimberWeightedMountainClimberMountainClimberOnSlidingDiscsWeightedMountainClimberOnSlidingDiscsMountainClimberWithFeetOnBosuBallWeightedMountainClimberWithFeetOnBosuBallMountainClimberWithHandsOnBenchMountainClimberWithHandsOnSwissBallWeightedMountainClimberWithHandsOnSwissBallPlankPlankJacksWithFeetOnSlidingDiscsWeightedPlankJacksWithFeetOnSlidingDiscsPlankKneeTwistWeightedPlankKneeTwistPlankPikeJumpsWeightedPlankPikeJumpsPlankPikesWeightedPlankPikesPlankToStandUpWeightedPlankToStandUpPlankWithArmRaiseWeightedPlankWithArmRaisePlankWithKneeToElbowWeightedPlankWithKneeToElbowPlankWithObliqueCrunchWeightedPlankWithObliqueCrunchPlyometricSidePlankWeightedPlyometricSidePlankRollingSidePlankWeightedRollingSidePlankSideKickPlankWeightedSideKickPlankSidePlankWeightedSidePlankSidePlankAndRowWeightedSidePlankAndRowSidePlankLiftWeightedSidePlankLiftSidePlankWithElbowOnBosuBallWeightedSidePlankWithElbowOnBosuBallSidePlankWithFeetOnBenchWeightedSidePlankWithFeetOnBenchSidePlankWithKneeCircleWeightedSidePlankWithKneeCircleSidePlankWithKneeTuckWeightedSidePlankWithKneeTuckSidePlankWithLegLiftWeightedSidePlankWithLegLiftSidePlankWithReachUnderWeightedSidePlankWithReachUnderSingleLegElevatedFeetPlankWeightedSingleLegElevatedFeetPlankSingleLegFlexAndExtendWeightedSingleLegFlexAndExtendSingleLegSidePlankWeightedSingleLegSidePlankSpidermanPlankWeightedSpidermanPlankStraightArmPlankWeightedStraightArmPlankStraightArmPlankWithShoulderTouchWeightedStraightArmPlankWithShoulderTouchSwissBallPlankWeightedSwissBallPlankSwissBallPlankLegLiftWeightedSwissBallPlankLegLiftSwissBallPlankLegLiftAndHoldSwissBallPlankWithFeetOnBenchWeightedSwissBallPlankWithFeetOnBenchSwissBallProneJackknifeWeightedSwissBallProneJackknifeSwissBallSidePlankWeightedSwissBallSidePlankThreeWayPlankWeightedThreeWayPlankTowelPlankAndKneeInWeightedTowelPlankAndKneeInTStabilizationWeightedTStabilizationTurkishGetUpToSidePlankWeightedTurkishGetUpToSidePlankTwoPointPlankWeightedTwoPointPlankWeightedPlankWideStancePlankWithDiagonalArmLiftWeightedWideStancePlankWithDiagonalArmLiftWideStancePlankWithDiagonalLegLiftWeightedWideStancePlankWithDiagonalLegLiftWideStancePlankWithLegLiftWeightedWideStancePlankWithLegLiftWideStancePlankWithOppositeArmAndLegLiftWeightedMountainClimberWithHandsOnBenchWeightedSwissBallPlankLegLiftAndHoldWeightedWideStancePlankWithOppositeArmAndLegLiftPlankWithFeetOnSwissBallSidePlankToPlankWithReachUnderBridgeWithGluteLowerLiftBridgeOneLegBridgePlankWithArmVariationsPlankWithLegLiftReversePlankWithLegPull"
	_PlankExerciseName_name_1 = "Invalid"
)

var (
	_PlankExerciseName_index_0 = [...]uint16{0, 13, 34, 52, 78, 87, 104, 128, 160, 179, 206, 223, 248, 259, 278, 291, 312, 331, 358, 375, 400, 419, 446, 459, 480, 508, 544, 555, 574, 591, 616, 643, 678, 713, 756, 771, 794, 823, 860, 893, 934, 965, 1000, 1043, 1048, 1080, 1120, 1134, 1156, 1170, 1192, 1202, 1220, 1234, 1256, 1273, 1298, 1318, 1346, 1368, 1398, 1417, 1444, 1460, 1484, 1497, 1518, 1527, 1544, 1559, 1582, 1595, 1616, 1644, 1680, 1704, 1736, 1759, 1790, 1811, 1840, 1860, 1888, 1911, 1942, 1968, 2002, 2024, 2054, 2072, 2098, 2112, 2134, 2150, 2174, 2207, 2248, 2262, 2284, 2305, 2334, 2362, 2391, 2428, 2451, 2482, 2500, 2526, 2539, 2560, 2579, 2606, 2620, 2642, 2665, 2696, 2709, 2730, 2743, 2777, 2819, 2853, 2895, 2921, 2955, 2995, 3034, 3070, 3118, 3142, 3172, 3196, 3214, 3236, 3252, 3275}
)

func (i PlankExerciseName) String() string {
	switch {
	case 0 <= i && i <= 134:
		return _PlankExerciseName_name_0[_PlankExerciseName_index_0[i]:_PlankExerciseName_index_0[i+1]]
	case i == 65535:
		return _PlankExerciseName_name_1
	default:
		return "PlankExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PlyoExerciseNameAlternatingJumpLunge-0]
	_ = x[PlyoExerciseNameWeightedAlternatingJumpLunge-1]
	_ = x[PlyoExerciseNameBarbellJumpSquat-2]
	_ = x[PlyoExerciseNameBodyWeightJumpSquat-3]
	_ = x[PlyoExerciseNameWeightedJumpSquat-4]
	_ = x[PlyoExerciseNameCrossKneeStrike-5]
	_ = x[PlyoExerciseNameWeightedCrossKneeStrike-6]
	_ = x[PlyoExerciseNameDepthJump-7]
	_ = x[PlyoExerciseNameWeightedDepthJump-8]
	_ = x[PlyoExerciseNameDumbbellJumpSquat-9]
	_ = x[PlyoExerciseNameDumbbellSplitJump-10]
	_ = x[PlyoExerciseNameFrontKneeStrike-11]
	_ = x[PlyoExerciseNameWeightedFrontKneeStrike-12]
	_ = x[PlyoExerciseNameHighBoxJump-13]
	_ = x[PlyoExerciseNameWeightedHighBoxJump-14]
	_ = x[PlyoExerciseNameIsometricExplosiveBodyWeightJumpSquat-15]
	_ = x[PlyoExerciseNameWeightedIsometricExplosiveJumpSquat-16]
	_ = x[PlyoExerciseNameLateralLeapAndHop-17]
	_ = x[PlyoExerciseNameWeightedLateralLeapAndHop-18]
	_ = x[PlyoExerciseNameLateralPlyoSquats-19]
	_ = x[PlyoExerciseNameWeightedLateralPlyoSquats-20]
	_ = x[PlyoExerciseNameLateralSlide-21]
	_ = x[PlyoExerciseNameWeightedLateralSlide-22]
	_ = x[PlyoExerciseNameMedicineBallOverheadThrows-23]
	_ = x[PlyoExerciseNameMedicineBallSideThrow-24]
	_ = x[PlyoExerciseNameMedicineBallSlam-25]
	_ = x[PlyoExerciseNameSideToSideMedicineBallThrows-26]
	_ = x[PlyoExerciseNameSideToSideShuffleJump-27]
	_ = x[PlyoExerciseNameWeightedSideToSideShuffleJump-28]
	_ = x[PlyoExerciseNameSquatJumpOntoBox-29]
	_ = x[PlyoExerciseNameWeightedSquatJumpOntoBox-30]
	_ = x[PlyoExerciseNameSquatJumpsInAndOut-31]
	_ = x[PlyoExerciseNameWeightedSquatJumpsInAndOut-32]
	_ = x[PlyoExerciseNameInvalid-65535]
}

const (
	_PlyoExerciseName_name_0 = "AlternatingJumpLungeWeightedAlternatingJumpLungeBarbellJumpSquatBodyWeightJumpSquatWeightedJumpSquatCrossKneeStrikeWeightedCrossKneeStrikeDepthJumpWeightedDepthJumpDumbbellJumpSquatDumbbellSplitJumpFrontKneeStrikeWeightedFrontKneeStrikeHighBoxJumpWeightedHighBoxJumpIsometricExplosiveBodyWeightJumpSquatWeightedIsometricExplosiveJumpSquatLateralLeapAndHopWeightedLateralLeapAndHopLateralPlyoSquatsWeightedLateralPlyoSquatsLateralSlideWeightedLateralSlideMedicineBallOverheadThrowsMedicineBallSideThrowMedicineBallSlamSideToSideMedicineBallThrowsSideToSideShuffleJumpWeightedSideToSideShuffleJumpSquatJumpOntoBoxWeightedSquatJumpOntoBoxSquatJumpsInAndOutWeightedSquatJumpsInAndOut"
	_PlyoExerciseName_name_1 = "Invalid"
)

var (
	_PlyoExerciseName_index_0 = [...]uint16{0, 20, 48, 64, 83, 100, 115, 138, 147, 164, 181, 198, 213, 236, 247, 266, 303, 338, 355, 380, 397, 422, 434, 454, 480, 501, 517, 545, 566, 595, 611, 635, 653, 679}
)

func (i PlyoExerciseName) String() string {
	switch {
	case 0 <= i && i <= 32:
		return _PlyoExerciseName_name_0[_PlyoExerciseName_index_0[i]:_PlyoExerciseName_index_0[i+1]]
	case i == 65535:
		return _PlyoExerciseName_name_1
	default:
		return "PlyoExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PowerPhaseTypePowerPhaseStartAngle-0]
	_ = x[PowerPhaseTypePowerPhaseEndAngle-1]
	_ = x[PowerPhaseTypePowerPhaseArcLength-2]
	_ = x[PowerPhaseTypePowerPhaseCenter-3]
	_ = x[PowerPhaseTypeInvalid-255]
}

const (
	_PowerPhaseType_name_0 = "PowerPhaseStartAnglePowerPhaseEndAnglePowerPhaseArcLengthPowerPhaseCenter"
	_PowerPhaseType_name_1 = "Invalid"
)

var (
	_PowerPhaseType_index_0 = [...]uint8{0, 20, 38, 57, 73}
)

func (i PowerPhaseType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _PowerPhaseType_name_0[_PowerPhaseType_index_0[i]:_PowerPhaseType_index_0[i+1]]
	case i == 255:
		return _PowerPhaseType_name_1
	default:
		return "PowerPhaseType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PullUpExerciseNameBandedPullUps-0]
	_ = x[PullUpExerciseName30DegreeLatPulldown-1]
	_ = x[PullUpExerciseNameBandAssistedChinUp-2]
	_ = x[PullUpExerciseNameCloseGripChinUp-3]
	_ = x[PullUpExerciseNameWeightedCloseGripChinUp-4]
	_ = x[PullUpExerciseNameCloseGripLatPulldown-5]
	_ = x[PullUpExerciseNameCrossoverChinUp-6]
	_ = x[PullUpExerciseNameWeightedCrossoverChinUp-7]
	_ = x[PullUpExerciseNameEzBarPullover-8]
	_ = x[PullUpExerciseNameHangingHurdle-9]
	_ = x[PullUpExerciseNameWeightedHangingHurdle-10]
	_ = x[PullUpExerciseNameKneelingLatPulldown-11]
	_ = x[PullUpExerciseNameKneelingUnderhandGripLatPulldown-12]
	_ = x[PullUpExerciseNameLatPulldown-13]
	_ = x[PullUpExerciseNameMixedGripChinUp-14]
	_ = x[PullUpExerciseNameWeightedMixedGripChinUp-15]
	_ = x[PullUpExerciseNameMixedGripPullUp-16]
	_ = x[PullUpExerciseNameWeightedMixedGripPullUp-17]
	_ = x[PullUpExerciseNameReverseGripPulldown-18]
	_ = x[PullUpExerciseNameStandingCablePullover-19]
	_ = x[PullUpExerciseNameStraightArmPulldown-20]
	_ = x[PullUpExerciseNameSwissBallEzBarPullover-21]
	_ = x[PullUpExerciseNameTowelPullUp-22]
	_ = x[PullUpExerciseNameWeightedTowelPullUp-23]
	_ = x[PullUpExerciseNameWeightedPullUp-24]
	_ = x[PullUpExerciseNameWideGripLatPulldown-25]
	_ = x[PullUpExerciseNameWideGripPullUp-26]
	_ = x[PullUpExerciseNameWeightedWideGripPullUp-27]
	_ = x[PullUpExerciseNameBurpeePullUp-28]
	_ = x[PullUpExerciseNameWeightedBurpeePullUp-29]
	_ = x[PullUpExerciseNameJumpingPullUps-30]
	_ = x[PullUpExerciseNameWeightedJumpingPullUps-31]
	_ = x[PullUpExerciseNameKippingPullUp-32]
	_ = x[PullUpExerciseNameWeightedKippingPullUp-33]
	_ = x[PullUpExerciseNameLPullUp-34]
	_ = x[PullUpExerciseNameWeightedLPullUp-35]
	_ = x[PullUpExerciseNameSuspendedChinUp-36]
	_ = x[PullUpExerciseNameWeightedSuspendedChinUp-37]
	_ = x[PullUpExerciseNamePullUp-38]
	_ = x[PullUpExerciseNameInvalid-65535]
}

const (
	_PullUpExerciseName_name_0 = "BandedPullUps30DegreeLatPulldownBandAssistedChinUpCloseGripChinUpWeightedCloseGripChinUpCloseGripLatPulldownCrossoverChinUpWeightedCrossoverChinUpEzBarPulloverHangingHurdleWeightedHangingHurdleKneelingLatPulldownKneelingUnderhandGripLatPulldownLatPulldownMixedGripChinUpWeightedMixedGripChinUpMixedGripPullUpWeightedMixedGripPullUpReverseGripPulldownStandingCablePulloverStraightArmPulldownSwissBallEzBarPulloverTowelPullUpWeightedTowelPullUpWeightedPullUpWideGripLatPulldownWideGripPullUpWeightedWideGripPullUpBurpeePullUpWeightedBurpeePullUpJumpingPullUpsWeightedJumpingPullUpsKippingPullUpWeightedKippingPullUpLPullUpWeightedLPullUpSuspendedChinUpWeightedSuspendedChinUpPullUp"
	_PullUpExerciseName_name_1 = "Invalid"
)

var (
	_PullUpExerciseName_index_0 = [...]uint16{0, 13, 32, 50, 65, 88, 108, 123, 146, 159, 172, 193, 212, 244, 255, 270, 293, 308, 331, 350, 371, 390, 412, 423, 442, 456, 475, 489, 511, 523, 543, 557, 579, 592, 613, 620, 635, 650, 673, 679}
)

func (i PullUpExerciseName) String() string {
	switch {
	case 0 <= i && i <= 38:
		return _PullUpExerciseName_name_0[_PullUpExerciseName_index_0[i]:_PullUpExerciseName_index_0[i+1]]
	case i == 65535:
		return _PullUpExerciseName_name_1
	default:
		return "PullUpExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PushUpExerciseNameChestPressWithBand-0]
	_ = x[PushUpExerciseNameAlternatingStaggeredPushUp-1]
	_ = x[PushUpExerciseNameWeightedAlternatingStaggeredPushUp-2]
	_ = x[PushUpExerciseNameAlternatingHandsMedicineBallPushUp-3]
	_ = x[PushUpExerciseNameWeightedAlternatingHandsMedicineBallPushUp-4]
	_ = x[PushUpExerciseNameBosuBallPushUp-5]
	_ = x[PushUpExerciseNameWeightedBosuBallPushUp-6]
	_ = x[PushUpExerciseNameClappingPushUp-7]
	_ = x[PushUpExerciseNameWeightedClappingPushUp-8]
	_ = x[PushUpExerciseNameCloseGripMedicineBallPushUp-9]
	_ = x[PushUpExerciseNameWeightedCloseGripMedicineBallPushUp-10]
	_ = x[PushUpExerciseNameCloseHandsPushUp-11]
	_ = x[PushUpExerciseNameWeightedCloseHandsPushUp-12]
	_ = x[PushUpExerciseNameDeclinePushUp-13]
	_ = x[PushUpExerciseNameWeightedDeclinePushUp-14]
	_ = x[PushUpExerciseNameDiamondPushUp-15]
	_ = x[PushUpExerciseNameWeightedDiamondPushUp-16]
	_ = x[PushUpExerciseNameExplosiveCrossoverPushUp-17]
	_ = x[PushUpExerciseNameWeightedExplosiveCrossoverPushUp-18]
	_ = x[PushUpExerciseNameExplosivePushUp-19]
	_ = x[PushUpExerciseNameWeightedExplosivePushUp-20]
	_ = x[PushUpExerciseNameFeetElevatedSideToSidePushUp-21]
	_ = x[PushUpExerciseNameWeightedFeetElevatedSideToSidePushUp-22]
	_ = x[PushUpExerciseNameHandReleasePushUp-23]
	_ = x[PushUpExerciseNameWeightedHandReleasePushUp-24]
	_ = x[PushUpExerciseNameHandstandPushUp-25]
	_ = x[PushUpExerciseNameWeightedHandstandPushUp-26]
	_ = x[PushUpExerciseNameInclinePushUp-27]
	_ = x[PushUpExerciseNameWeightedInclinePushUp-28]
	_ = x[PushUpExerciseNameIsometricExplosivePushUp-29]
	_ = x[PushUpExerciseNameWeightedIsometricExplosivePushUp-30]
	_ = x[PushUpExerciseNameJudoPushUp-31]
	_ = x[PushUpExerciseNameWeightedJudoPushUp-32]
	_ = x[PushUpExerciseNameKneelingPushUp-33]
	_ = x[PushUpExerciseNameWeightedKneelingPushUp-34]
	_ = x[PushUpExerciseNameMedicineBallChestPass-35]
	_ = x[PushUpExerciseNameMedicineBallPushUp-36]
	_ = x[PushUpExerciseNameWeightedMedicineBallPushUp-37]
	_ = x[PushUpExerciseNameOneArmPushUp-38]
	_ = x[PushUpExerciseNameWeightedOneArmPushUp-39]
	_ = x[PushUpExerciseNameWeightedPushUp-40]
	_ = x[PushUpExerciseNamePushUpAndRow-41]
	_ = x[PushUpExerciseNameWeightedPushUpAndRow-42]
	_ = x[PushUpExerciseNamePushUpPlus-43]
	_ = x[PushUpExerciseNameWeightedPushUpPlus-44]
	_ = x[PushUpExerciseNamePushUpWithFeetOnSwissBall-45]
	_ = x[PushUpExerciseNameWeightedPushUpWithFeetOnSwissBall-46]
	_ = x[PushUpExerciseNamePushUpWithOneHandOnMedicineBall-47]
	_ = x[PushUpExerciseNameWeightedPushUpWithOneHandOnMedicineBall-48]
	_ = x[PushUpExerciseNameShoulderPushUp-49]
	_ = x[PushUpExerciseNameWeightedShoulderPushUp-50]
	_ = x[PushUpExerciseNameSingleArmMedicineBallPushUp-51]
	_ = x[PushUpExerciseNameWeightedSingleArmMedicineBallPushUp-52]
	_ = x[PushUpExerciseNameSpidermanPushUp-53]
	_ = x[PushUpExerciseNameWeightedSpidermanPushUp-54]
	_ = x[PushUpExerciseNameStackedFeetPushUp-55]
	_ = x[PushUpExerciseNameWeightedStackedFeetPushUp-56]
	_ = x[PushUpExerciseNameStaggeredHandsPushUp-57]
	_ = x[PushUpExerciseNameWeightedStaggeredHandsPushUp-58]
	_ = x[PushUpExerciseNameSuspendedPushUp-59]
	_ = x[PushUpExerciseNameWeightedSuspendedPushUp-60]
	_ = x[PushUpExerciseNameSwissBallPushUp-61]
	_ = x[PushUpExerciseNameWeightedSwissBallPushUp-62]
	_ = x[PushUpExerciseNameSwissBallPushUpPlus-63]
	_ = x[PushUpExerciseNameWeightedSwissBallPushUpPlus-64]
	_ = x[PushUpExerciseNameTPushUp-65]
	_ = x[PushUpExerciseNameWeightedTPushUp-66]
	_ = x[PushUpExerciseNameTripleStopPushUp-67]
	_ = x[PushUpExerciseNameWeightedTripleStopPushUp-68]
	_ = x[PushUpExerciseNameWideHandsPushUp-69]
	_ = x[PushUpExerciseNameWeightedWideHandsPushUp-70]
	_ = x[PushUpExerciseNameParalletteHandstandPushUp-71]
	_ = x[PushUpExerciseNameWeightedParalletteHandstandPushUp-72]
	_ = x[PushUpExerciseNameRingHandstandPushUp-73]
	_ = x[PushUpExerciseNameWeightedRingHandstandPushUp-74]
	_ = x[PushUpExerciseNameRingPushUp-75]
	_ = x[PushUpExerciseNameWeightedRingPushUp-76]
	_ = x[PushUpExerciseNamePushUp-77]
	_ = x[PushUpExerciseNamePilatesPushup-78]
	_ = x[PushUpExerciseNameInvalid-65535]
}

const (
	_PushUpExerciseName_name_0 = "ChestPressWithBandAlternatingStaggeredPushUpWeightedAlternatingStaggeredPushUpAlternatingHandsMedicineBallPushUpWeightedAlternatingHandsMedicineBallPushUpBosuBallPushUpWeightedBosuBallPushUpClappingPushUpWeightedClappingPushUpCloseGripMedicineBallPushUpWeightedCloseGripMedicineBallPushUpCloseHandsPushUpWeightedCloseHandsPushUpDeclinePushUpWeightedDeclinePushUpDiamondPushUpWeightedDiamondPushUpExplosiveCrossoverPushUpWeightedExplosiveCrossoverPushUpExplosivePushUpWeightedExplosivePushUpFeetElevatedSideToSidePushUpWeightedFeetElevatedSideToSidePushUpHandReleasePushUpWeightedHandReleasePushUpHandstandPushUpWeightedHandstandPushUpInclinePushUpWeightedInclinePushUpIsometricExplosivePushUpWeightedIsometricExplosivePushUpJudoPushUpWeightedJudoPushUpKneelingPushUpWeightedKneelingPushUpMedicineBallChestPassMedicineBallPushUpWeightedMedicineBallPushUpOneArmPushUpWeightedOneArmPushUpWeightedPushUpPushUpAndRowWeightedPushUpAndRowPushUpPlusWeightedPushUpPlusPushUpWithFeetOnSwissBallWeightedPushUpWithFeetOnSwissBallPushUpWithOneHandOnMedicineBallWeightedPushUpWithOneHandOnMedicineBallShoulderPushUpWeightedShoulderPushUpSingleArmMedicineBallPushUpWeightedSingleArmMedicineBallPushUpSpidermanPushUpWeightedSpidermanPushUpStackedFeetPushUpWeightedStackedFeetPushUpStaggeredHandsPushUpWeightedStaggeredHandsPushUpSuspendedPushUpWeightedSuspendedPushUpSwissBallPushUpWeightedSwissBallPushUpSwissBallPushUpPlusWeightedSwissBallPushUpPlusTPushUpWeightedTPushUpTripleStopPushUpWeightedTripleStopPushUpWideHandsPushUpWeightedWideHandsPushUpParalletteHandstandPushUpWeightedParalletteHandstandPushUpRingHandstandPushUpWeightedRingHandstandPushUpRingPushUpWeightedRingPushUpPushUpPilatesPushup"
	_PushUpExerciseName_name_1 = "Invalid"
)

var (
	_PushUpExerciseName_index_0 = [...]uint16{0, 18, 44, 78, 112, 154, 168, 190, 204, 226, 253, 288, 304, 328, 341, 362, 375, 396, 420, 452, 467, 490, 518, 554, 571, 596, 611, 634, 647, 668, 692, 724, 734, 752, 766, 788, 809, 827, 853, 865, 885, 899, 911, 931, 941, 959, 984, 1017, 1048, 1087, 1101, 1123, 1150, 1185, 1200, 1223, 1240, 1265, 1285, 1313, 1328, 1351, 1366, 1389, 1408, 1435, 1442, 1457, 1473, 1497, 1512, 1535, 1560, 1593, 1612, 1639, 1649, 1667, 1673, 1686}
)

func (i PushUpExerciseName) String() string {
	switch {
	case 0 <= i && i <= 78:
		return _PushUpExerciseName_name_0[_PushUpExerciseName_index_0[i]:_PushUpExerciseName_index_0[i+1]]
	case i == 65535:
		return _PushUpExerciseName_name_1
	default:
		return "PushUpExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PwrZoneCalcCustom-0]
	_ = x[PwrZoneCalcPercentFtp-1]
	_ = x[PwrZoneCalcInvalid-255]
}

const (
	_PwrZoneCalc_name_0 = "CustomPercentFtp"
	_PwrZoneCalc_name_1 = "Invalid"
)

var (
	_PwrZoneCalc_index_0 = [...]uint8{0, 6, 16}
)

func (i PwrZoneCalc) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _PwrZoneCalc_name_0[_PwrZoneCalc_index_0[i]:_PwrZoneCalc_index_0[i+1]]
	case i == 255:
		return _PwrZoneCalc_name_1
	default:
		return "PwrZoneCalc(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RadarThreatLevelTypeThreatUnknown-0]
	_ = x[RadarThreatLevelTypeThreatNone-1]
	_ = x[RadarThreatLevelTypeThreatApproaching-2]
	_ = x[RadarThreatLevelTypeThreatApproachingFast-3]
	_ = x[RadarThreatLevelTypeInvalid-255]
}

const (
	_RadarThreatLevelType_name_0 = "ThreatUnknownThreatNoneThreatApproachingThreatApproachingFast"
	_RadarThreatLevelType_name_1 = "Invalid"
)

var (
	_RadarThreatLevelType_index_0 = [...]uint8{0, 13, 23, 40, 61}
)

func (i RadarThreatLevelType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _RadarThreatLevelType_name_0[_RadarThreatLevelType_index_0[i]:_RadarThreatLevelType_index_0[i+1]]
	case i == 255:
		return _RadarThreatLevelType_name_1
	default:
		return "RadarThreatLevelType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RiderPositionTypeSeated-0]
	_ = x[RiderPositionTypeStanding-1]
	_ = x[RiderPositionTypeTransitionToSeated-2]
	_ = x[RiderPositionTypeTransitionToStanding-3]
	_ = x[RiderPositionTypeInvalid-255]
}

const (
	_RiderPositionType_name_0 = "SeatedStandingTransitionToSeatedTransitionToStanding"
	_RiderPositionType_name_1 = "Invalid"
)

var (
	_RiderPositionType_index_0 = [...]uint8{0, 6, 14, 32, 52}
)

func (i RiderPositionType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _RiderPositionType_name_0[_RiderPositionType_index_0[i]:_RiderPositionType_index_0[i+1]]
	case i == 255:
		return _RiderPositionType_name_1
	default:
		return "RiderPositionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RowExerciseNameBarbellStraightLegDeadliftToRow-0]
	_ = x[RowExerciseNameCableRowStanding-1]
	_ = x[RowExerciseNameDumbbellRow-2]
	_ = x[RowExerciseNameElevatedFeetInvertedRow-3]
	_ = x[RowExerciseNameWeightedElevatedFeetInvertedRow-4]
	_ = x[RowExerciseNameFacePull-5]
	_ = x[RowExerciseNameFacePullWithExternalRotation-6]
	_ = x[RowExerciseNameInvertedRowWithFeetOnSwissBall-7]
	_ = x[RowExerciseNameWeightedInvertedRowWithFeetOnSwissBall-8]
	_ = x[RowExerciseNameKettlebellRow-9]
	_ = x[RowExerciseNameModifiedInvertedRow-10]
	_ = x[RowExerciseNameWeightedModifiedInvertedRow-11]
	_ = x[RowExerciseNameNeutralGripAlternatingDumbbellRow-12]
	_ = x[RowExerciseNameOneArmBentOverRow-13]
	_ = x[RowExerciseNameOneLeggedDumbbellRow-14]
	_ = x[RowExerciseNameRenegadeRow-15]
	_ = x[RowExerciseNameReverseGripBarbellRow-16]
	_ = x[RowExerciseNameRopeHandleCableRow-17]
	_ = x[RowExerciseNameSeatedCableRow-18]
	_ = x[RowExerciseNameSeatedDumbbellRow-19]
	_ = x[RowExerciseNameSingleArmCableRow-20]
	_ = x[RowExerciseNameSingleArmCableRowAndRotation-21]
	_ = x[RowExerciseNameSingleArmInvertedRow-22]
	_ = x[RowExerciseNameWeightedSingleArmInvertedRow-23]
	_ = x[RowExerciseNameSingleArmNeutralGripDumbbellRow-24]
	_ = x[RowExerciseNameSingleArmNeutralGripDumbbellRowAndRotation-25]
	_ = x[RowExerciseNameSuspendedInvertedRow-26]
	_ = x[RowExerciseNameWeightedSuspendedInvertedRow-27]
	_ = x[RowExerciseNameTBarRow-28]
	_ = x[RowExerciseNameTowelGripInvertedRow-29]
	_ = x[RowExerciseNameWeightedTowelGripInvertedRow-30]
	_ = x[RowExerciseNameUnderhandGripCableRow-31]
	_ = x[RowExerciseNameVGripCableRow-32]
	_ = x[RowExerciseNameWideGripSeatedCableRow-33]
	_ = x[RowExerciseNameInvalid-65535]
}

const (
	_RowExerciseName_name_0 = "BarbellStraightLegDeadliftToRowCableRowStandingDumbbellRowElevatedFeetInvertedRowWeightedElevatedFeetInvertedRowFacePullFacePullWithExternalRotationInvertedRowWithFeetOnSwissBallWeightedInvertedRowWithFeetOnSwissBallKettlebellRowModifiedInvertedRowWeightedModifiedInvertedRowNeutralGripAlternatingDumbbellRowOneArmBentOverRowOneLeggedDumbbellRowRenegadeRowReverseGripBarbellRowRopeHandleCableRowSeatedCableRowSeatedDumbbellRowSingleArmCableRowSingleArmCableRowAndRotationSingleArmInvertedRowWeightedSingleArmInvertedRowSingleArmNeutralGripDumbbellRowSingleArmNeutralGripDumbbellRowAndRotationSuspendedInvertedRowWeightedSuspendedInvertedRowTBarRowTowelGripInvertedRowWeightedTowelGripInvertedRowUnderhandGripCableRowVGripCableRowWideGripSeatedCableRow"
	_RowExerciseName_name_1 = "Invalid"
)

var (
	_RowExerciseName_index_0 = [...]uint16{0, 31, 47, 58, 81, 112, 120, 148, 178, 216, 229, 248, 275, 308, 325, 345, 356, 377, 395, 409, 426, 443, 471, 491, 519, 550, 592, 612, 640, 647, 667, 695, 716, 729, 751}
)

func (i RowExerciseName) String() string {
	switch {
	case 0 <= i && i <= 33:
		return _RowExerciseName_name_0[_RowExerciseName_index_0[i]:_RowExerciseName_index_0[i+1]]
	case i == 65535:
		return _RowExerciseName_name_1
	default:
		return "RowExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[RunExerciseNameRun-0]
	_ = x[RunExerciseNameWalk-1]
	_ = x[RunExerciseNameJog-2]
	_ = x[RunExerciseNameSprint-3]
	_ = x[RunExerciseNameInvalid-65535]
}

const (
	_RunExerciseName_name_0 = "RunWalkJogSprint"
	_RunExerciseName_name_1 = "Invalid"
)

var (
	_RunExerciseName_index_0 = [...]uint8{0, 3, 7, 10, 16}
)

func (i RunExerciseName) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _RunExerciseName_name_0[_RunExerciseName_index_0[i]:_RunExerciseName_index_0[i+1]]
	case i == 65535:
		return _RunExerciseName_name_1
	default:
		return "RunExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ScheduleWorkout-0]
	_ = x[ScheduleCourse-1]
	_ = x[ScheduleInvalid-255]
}

const (
	_Schedule_name_0 = "WorkoutCourse"
	_Schedule_name_1 = "Invalid"
)

var (
	_Schedule_index_0 = [...]uint8{0, 7, 13}
)

func (i Schedule) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Schedule_name_0[_Schedule_index_0[i]:_Schedule_index_0[i+1]]
	case i == 255:
		return _Schedule_name_1
	default:
		return "Schedule(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SegmentDeleteStatusDoNotDelete-0]
	_ = x[SegmentDeleteStatusDeleteOne-1]
	_ = x[SegmentDeleteStatusDeleteAll-2]
	_ = x[SegmentDeleteStatusInvalid-255]
}

const (
	_SegmentDeleteStatus_name_0 = "DoNotDeleteDeleteOneDeleteAll"
	_SegmentDeleteStatus_name_1 = "Invalid"
)

var (
	_SegmentDeleteStatus_index_0 = [...]uint8{0, 11, 20, 29}
)

func (i SegmentDeleteStatus) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SegmentDeleteStatus_name_0[_SegmentDeleteStatus_index_0[i]:_SegmentDeleteStatus_index_0[i+1]]
	case i == 255:
		return _SegmentDeleteStatus_name_1
	default:
		return "SegmentDeleteStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SegmentLapStatusEnd-0]
	_ = x[SegmentLapStatusFail-1]
	_ = x[SegmentLapStatusInvalid-255]
}

const (
	_SegmentLapStatus_name_0 = "EndFail"
	_SegmentLapStatus_name_1 = "Invalid"
)

var (
	_SegmentLapStatus_index_0 = [...]uint8{0, 3, 7}
)

func (i SegmentLapStatus) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SegmentLapStatus_name_0[_SegmentLapStatus_index_0[i]:_SegmentLapStatus_index_0[i+1]]
	case i == 255:
		return _SegmentLapStatus_name_1
	default:
		return "SegmentLapStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SegmentLeaderboardTypeOverall-0]
	_ = x[SegmentLeaderboardTypePersonalBest-1]
	_ = x[SegmentLeaderboardTypeConnections-2]
	_ = x[SegmentLeaderboardTypeGroup-3]
	_ = x[SegmentLeaderboardTypeChallenger-4]
	_ = x[SegmentLeaderboardTypeKom-5]
	_ = x[SegmentLeaderboardTypeQom-6]
	_ = x[SegmentLeaderboardTypePr-7]
	_ = x[SegmentLeaderboardTypeGoal-8]
	_ = x[SegmentLeaderboardTypeRival-9]
	_ = x[SegmentLeaderboardTypeClubLeader-10]
	_ = x[SegmentLeaderboardTypeInvalid-255]
}

const (
	_SegmentLeaderboardType_name_0 = "OverallPersonalBestConnectionsGroupChallengerKomQomPrGoalRivalClubLeader"
	_SegmentLeaderboardType_name_1 = "Invalid"
)

var (
	_SegmentLeaderboardType_index_0 = [...]uint8{0, 7, 19, 30, 35, 45, 48, 51, 53, 57, 62, 72}
)

func (i SegmentLeaderboardType) String() string {
	switch {
	case 0 <= i && i <= 10:
		return _SegmentLeaderboardType_name_0[_SegmentLeaderboardType_index_0[i]:_SegmentLeaderboardType_index_0[i+1]]
	case i == 255:
		return _SegmentLeaderboardType_name_1
	default:
		return "SegmentLeaderboardType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SegmentSelectionTypeStarred-0]
	_ = x[SegmentSelectionTypeSuggested-1]
	_ = x[SegmentSelectionTypeInvalid-255]
}

const (
	_SegmentSelectionType_name_0 = "StarredSuggested"
	_SegmentSelectionType_name_1 = "Invalid"
)

var (
	_SegmentSelectionType_index_0 = [...]uint8{0, 7, 16}
)

func (i SegmentSelectionType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SegmentSelectionType_name_0[_SegmentSelectionType_index_0[i]:_SegmentSelectionType_index_0[i+1]]
	case i == 255:
		return _SegmentSelectionType_name_1
	default:
		return "SegmentSelectionType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SensorTypeAccelerometer-0]
	_ = x[SensorTypeGyroscope-1]
	_ = x[SensorTypeCompass-2]
	_ = x[SensorTypeBarometer-3]
	_ = x[SensorTypeInvalid-255]
}

const (
	_SensorType_name_0 = "AccelerometerGyroscopeCompassBarometer"
	_SensorType_name_1 = "Invalid"
)

var (
	_SensorType_index_0 = [...]uint8{0, 13, 22, 29, 38}
)

func (i SensorType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _SensorType_name_0[_SensorType_index_0[i]:_SensorType_index_0[i+1]]
	case i == 255:
		return _SensorType_name_1
	default:
		return "SensorType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SessionTriggerActivityEnd-0]
	_ = x[SessionTriggerManual-1]
	_ = x[SessionTriggerAutoMultiSport-2]
	_ = x[SessionTriggerFitnessEquipment-3]
	_ = x[SessionTriggerInvalid-255]
}

const (
	_SessionTrigger_name_0 = "ActivityEndManualAutoMultiSportFitnessEquipment"
	_SessionTrigger_name_1 = "Invalid"
)

var (
	_SessionTrigger_index_0 = [...]uint8{0, 11, 17, 31, 47}
)

func (i SessionTrigger) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _SessionTrigger_name_0[_SessionTrigger_index_0[i]:_SessionTrigger_index_0[i+1]]
	case i == 255:
		return _SessionTrigger_name_1
	default:
		return "SessionTrigger(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SetTypeRest-0]
	_ = x[SetTypeActive-1]
	_ = x[SetTypeInvalid-255]
}

const (
	_SetType_name_0 = "RestActive"
	_SetType_name_1 = "Invalid"
)

var (
	_SetType_index_0 = [...]uint8{0, 4, 10}
)

func (i SetType) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _SetType_name_0[_SetType_index_0[i]:_SetType_index_0[i+1]]
	case i == 255:
		return _SetType_name_1
	default:
		return "SetType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ShoulderPressExerciseNameAlternatingDumbbellShoulderPress-0]
	_ = x[ShoulderPressExerciseNameArnoldPress-1]
	_ = x[ShoulderPressExerciseNameBarbellFrontSquatToPushPress-2]
	_ = x[ShoulderPressExerciseNameBarbellPushPress-3]
	_ = x[ShoulderPressExerciseNameBarbellShoulderPress-4]
	_ = x[ShoulderPressExerciseNameDeadCurlPress-5]
	_ = x[ShoulderPressExerciseNameDumbbellAlternatingShoulderPressAndTwist-6]
	_ = x[ShoulderPressExerciseNameDumbbellHammerCurlToLungeToPress-7]
	_ = x[ShoulderPressExerciseNameDumbbellPushPress-8]
	_ = x[ShoulderPressExerciseNameFloorInvertedShoulderPress-9]
	_ = x[ShoulderPressExerciseNameWeightedFloorInvertedShoulderPress-10]
	_ = x[ShoulderPressExerciseNameInvertedShoulderPress-11]
	_ = x[ShoulderPressExerciseNameWeightedInvertedShoulderPress-12]
	_ = x[ShoulderPressExerciseNameOneArmPushPress-13]
	_ = x[ShoulderPressExerciseNameOverheadBarbellPress-14]
	_ = x[ShoulderPressExerciseNameOverheadDumbbellPress-15]
	_ = x[ShoulderPressExerciseNameSeatedBarbellShoulderPress-16]
	_ = x[ShoulderPressExerciseNameSeatedDumbbellShoulderPress-17]
	_ = x[ShoulderPressExerciseNameSingleArmDumbbellShoulderPress-18]
	_ = x[ShoulderPressExerciseNameSingleArmStepUpAndPress-19]
	_ = x[ShoulderPressExerciseNameSmithMachineOverheadPress-20]
	_ = x[ShoulderPressExerciseNameSplitStanceHammerCurlToPress-21]
	_ = x[ShoulderPressExerciseNameSwissBallDumbbellShoulderPress-22]
	_ = x[ShoulderPressExerciseNameWeightPlateFrontRaise-23]
	_ = x[ShoulderPressExerciseNameInvalid-65535]
}

const (
	_ShoulderPressExerciseName_name_0 = "AlternatingDumbbellShoulderPressArnoldPressBarbellFrontSquatToPushPressBarbellPushPressBarbellShoulderPressDeadCurlPressDumbbellAlternatingShoulderPressAndTwistDumbbellHammerCurlToLungeToPressDumbbellPushPressFloorInvertedShoulderPressWeightedFloorInvertedShoulderPressInvertedShoulderPressWeightedInvertedShoulderPressOneArmPushPressOverheadBarbellPressOverheadDumbbellPressSeatedBarbellShoulderPressSeatedDumbbellShoulderPressSingleArmDumbbellShoulderPressSingleArmStepUpAndPressSmithMachineOverheadPressSplitStanceHammerCurlToPressSwissBallDumbbellShoulderPressWeightPlateFrontRaise"
	_ShoulderPressExerciseName_name_1 = "Invalid"
)

var (
	_ShoulderPressExerciseName_index_0 = [...]uint16{0, 32, 43, 71, 87, 107, 120, 160, 192, 209, 235, 269, 290, 319, 334, 354, 375, 401, 428, 458, 481, 506, 534, 564, 585}
)

func (i ShoulderPressExerciseName) String() string {
	switch {
	case 0 <= i && i <= 23:
		return _ShoulderPressExerciseName_name_0[_ShoulderPressExerciseName_index_0[i]:_ShoulderPressExerciseName_index_0[i+1]]
	case i == 65535:
		return _ShoulderPressExerciseName_name_1
	default:
		return "ShoulderPressExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ShoulderStabilityExerciseName90DegreeCableExternalRotation-0]
	_ = x[ShoulderStabilityExerciseNameBandExternalRotation-1]
	_ = x[ShoulderStabilityExerciseNameBandInternalRotation-2]
	_ = x[ShoulderStabilityExerciseNameBentArmLateralRaiseAndExternalRotation-3]
	_ = x[ShoulderStabilityExerciseNameCableExternalRotation-4]
	_ = x[ShoulderStabilityExerciseNameDumbbellFacePullWithExternalRotation-5]
	_ = x[ShoulderStabilityExerciseNameFloorIRaise-6]
	_ = x[ShoulderStabilityExerciseNameWeightedFloorIRaise-7]
	_ = x[ShoulderStabilityExerciseNameFloorTRaise-8]
	_ = x[ShoulderStabilityExerciseNameWeightedFloorTRaise-9]
	_ = x[ShoulderStabilityExerciseNameFloorYRaise-10]
	_ = x[ShoulderStabilityExerciseNameWeightedFloorYRaise-11]
	_ = x[ShoulderStabilityExerciseNameInclineIRaise-12]
	_ = x[ShoulderStabilityExerciseNameWeightedInclineIRaise-13]
	_ = x[ShoulderStabilityExerciseNameInclineLRaise-14]
	_ = x[ShoulderStabilityExerciseNameWeightedInclineLRaise-15]
	_ = x[ShoulderStabilityExerciseNameInclineTRaise-16]
	_ = x[ShoulderStabilityExerciseNameWeightedInclineTRaise-17]
	_ = x[ShoulderStabilityExerciseNameInclineWRaise-18]
	_ = x[ShoulderStabilityExerciseNameWeightedInclineWRaise-19]
	_ = x[ShoulderStabilityExerciseNameInclineYRaise-20]
	_ = x[ShoulderStabilityExerciseNameWeightedInclineYRaise-21]
	_ = x[ShoulderStabilityExerciseNameLyingExternalRotation-22]
	_ = x[ShoulderStabilityExerciseNameSeatedDumbbellExternalRotation-23]
	_ = x[ShoulderStabilityExerciseNameStandingLRaise-24]
	_ = x[ShoulderStabilityExerciseNameSwissBallIRaise-25]
	_ = x[ShoulderStabilityExerciseNameWeightedSwissBallIRaise-26]
	_ = x[ShoulderStabilityExerciseNameSwissBallTRaise-27]
	_ = x[ShoulderStabilityExerciseNameWeightedSwissBallTRaise-28]
	_ = x[ShoulderStabilityExerciseNameSwissBallWRaise-29]
	_ = x[ShoulderStabilityExerciseNameWeightedSwissBallWRaise-30]
	_ = x[ShoulderStabilityExerciseNameSwissBallYRaise-31]
	_ = x[ShoulderStabilityExerciseNameWeightedSwissBallYRaise-32]
	_ = x[ShoulderStabilityExerciseNameInvalid-65535]
}

const (
	_ShoulderStabilityExerciseName_name_0 = "90DegreeCableExternalRotationBandExternalRotationBandInternalRotationBentArmLateralRaiseAndExternalRotationCableExternalRotationDumbbellFacePullWithExternalRotationFloorIRaiseWeightedFloorIRaiseFloorTRaiseWeightedFloorTRaiseFloorYRaiseWeightedFloorYRaiseInclineIRaiseWeightedInclineIRaiseInclineLRaiseWeightedInclineLRaiseInclineTRaiseWeightedInclineTRaiseInclineWRaiseWeightedInclineWRaiseInclineYRaiseWeightedInclineYRaiseLyingExternalRotationSeatedDumbbellExternalRotationStandingLRaiseSwissBallIRaiseWeightedSwissBallIRaiseSwissBallTRaiseWeightedSwissBallTRaiseSwissBallWRaiseWeightedSwissBallWRaiseSwissBallYRaiseWeightedSwissBallYRaise"
	_ShoulderStabilityExerciseName_name_1 = "Invalid"
)

var (
	_ShoulderStabilityExerciseName_index_0 = [...]uint16{0, 29, 49, 69, 107, 128, 164, 175, 194, 205, 224, 235, 254, 267, 288, 301, 322, 335, 356, 369, 390, 403, 424, 445, 475, 489, 504, 527, 542, 565, 580, 603, 618, 641}
)

func (i ShoulderStabilityExerciseName) String() string {
	switch {
	case 0 <= i && i <= 32:
		return _ShoulderStabilityExerciseName_name_0[_ShoulderStabilityExerciseName_index_0[i]:_ShoulderStabilityExerciseName_index_0[i+1]]
	case i == 65535:
		return _ShoulderStabilityExerciseName_name_1
	default:
		return "ShoulderStabilityExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ShrugExerciseNameBarbellJumpShrug-0]
	_ = x[ShrugExerciseNameBarbellShrug-1]
	_ = x[ShrugExerciseNameBarbellUprightRow-2]
	_ = x[ShrugExerciseNameBehindTheBackSmithMachineShrug-3]
	_ = x[ShrugExerciseNameDumbbellJumpShrug-4]
	_ = x[ShrugExerciseNameDumbbellShrug-5]
	_ = x[ShrugExerciseNameDumbbellUprightRow-6]
	_ = x[ShrugExerciseNameInclineDumbbellShrug-7]
	_ = x[ShrugExerciseNameOverheadBarbellShrug-8]
	_ = x[ShrugExerciseNameOverheadDumbbellShrug-9]
	_ = x[ShrugExerciseNameScaptionAndShrug-10]
	_ = x[ShrugExerciseNameScapularRetraction-11]
	_ = x[ShrugExerciseNameSerratusChairShrug-12]
	_ = x[ShrugExerciseNameWeightedSerratusChairShrug-13]
	_ = x[ShrugExerciseNameSerratusShrug-14]
	_ = x[ShrugExerciseNameWeightedSerratusShrug-15]
	_ = x[ShrugExerciseNameWideGripJumpShrug-16]
	_ = x[ShrugExerciseNameInvalid-65535]
}

const (
	_ShrugExerciseName_name_0 = "BarbellJumpShrugBarbellShrugBarbellUprightRowBehindTheBackSmithMachineShrugDumbbellJumpShrugDumbbellShrugDumbbellUprightRowInclineDumbbellShrugOverheadBarbellShrugOverheadDumbbellShrugScaptionAndShrugScapularRetractionSerratusChairShrugWeightedSerratusChairShrugSerratusShrugWeightedSerratusShrugWideGripJumpShrug"
	_ShrugExerciseName_name_1 = "Invalid"
)

var (
	_ShrugExerciseName_index_0 = [...]uint16{0, 16, 28, 45, 75, 92, 105, 123, 143, 163, 184, 200, 218, 236, 262, 275, 296, 313}
)

func (i ShrugExerciseName) String() string {
	switch {
	case 0 <= i && i <= 16:
		return _ShrugExerciseName_name_0[_ShrugExerciseName_index_0[i]:_ShrugExerciseName_index_0[i+1]]
	case i == 65535:
		return _ShrugExerciseName_name_1
	default:
		return "ShrugExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SideRight-0]
	_ = x[SideLeft-1]
	_ = x[SideInvalid-255]
}

const (
	_Side_name_0 = "RightLeft"
	_Side_name_1 = "Invalid"
)

var (
	_Side_index_0 = [...]uint8{0, 5, 9}
)

func (i Side) String() string {
	switch {
	case 0 <= i && i <= 1:
		return _Side_name_0[_Side_index_0[i]:_Side_index_0[i+1]]
	case i == 255:
		return _Side_name_1
	default:
		return "Side(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SitUpExerciseNameAlternatingSitUp-0]
	_ = x[SitUpExerciseNameWeightedAlternatingSitUp-1]
	_ = x[SitUpExerciseNameBentKneeVUp-2]
	_ = x[SitUpExerciseNameWeightedBentKneeVUp-3]
	_ = x[SitUpExerciseNameButterflySitUp-4]
	_ = x[SitUpExerciseNameWeightedButterflySitup-5]
	_ = x[SitUpExerciseNameCrossPunchRollUp-6]
	_ = x[SitUpExerciseNameWeightedCrossPunchRollUp-7]
	_ = x[SitUpExerciseNameCrossedArmsSitUp-8]
	_ = x[SitUpExerciseNameWeightedCrossedArmsSitUp-9]
	_ = x[SitUpExerciseNameGetUpSitUp-10]
	_ = x[SitUpExerciseNameWeightedGetUpSitUp-11]
	_ = x[SitUpExerciseNameHoveringSitUp-12]
	_ = x[SitUpExerciseNameWeightedHoveringSitUp-13]
	_ = x[SitUpExerciseNameKettlebellSitUp-14]
	_ = x[SitUpExerciseNameMedicineBallAlternatingVUp-15]
	_ = x[SitUpExerciseNameMedicineBallSitUp-16]
	_ = x[SitUpExerciseNameMedicineBallVUp-17]
	_ = x[SitUpExerciseNameModifiedSitUp-18]
	_ = x[SitUpExerciseNameNegativeSitUp-19]
	_ = x[SitUpExerciseNameOneArmFullSitUp-20]
	_ = x[SitUpExerciseNameRecliningCircle-21]
	_ = x[SitUpExerciseNameWeightedRecliningCircle-22]
	_ = x[SitUpExerciseNameReverseCurlUp-23]
	_ = x[SitUpExerciseNameWeightedReverseCurlUp-24]
	_ = x[SitUpExerciseNameSingleLegSwissBallJackknife-25]
	_ = x[SitUpExerciseNameWeightedSingleLegSwissBallJackknife-26]
	_ = x[SitUpExerciseNameTheTeaser-27]
	_ = x[SitUpExerciseNameTheTeaserWeighted-28]
	_ = x[SitUpExerciseNameThreePartRollDown-29]
	_ = x[SitUpExerciseNameWeightedThreePartRollDown-30]
	_ = x[SitUpExerciseNameVUp-31]
	_ = x[SitUpExerciseNameWeightedVUp-32]
	_ = x[SitUpExerciseNameWeightedRussianTwistOnSwissBall-33]
	_ = x[SitUpExerciseNameWeightedSitUp-34]
	_ = x[SitUpExerciseNameXAbs-35]
	_ = x[SitUpExerciseNameWeightedXAbs-36]
	_ = x[SitUpExerciseNameSitUp-37]
	_ = x[SitUpExerciseNameInvalid-65535]
}

const (
	_SitUpExerciseName_name_0 = "AlternatingSitUpWeightedAlternatingSitUpBentKneeVUpWeightedBentKneeVUpButterflySitUpWeightedButterflySitupCrossPunchRollUpWeightedCrossPunchRollUpCrossedArmsSitUpWeightedCrossedArmsSitUpGetUpSitUpWeightedGetUpSitUpHoveringSitUpWeightedHoveringSitUpKettlebellSitUpMedicineBallAlternatingVUpMedicineBallSitUpMedicineBallVUpModifiedSitUpNegativeSitUpOneArmFullSitUpRecliningCircleWeightedRecliningCircleReverseCurlUpWeightedReverseCurlUpSingleLegSwissBallJackknifeWeightedSingleLegSwissBallJackknifeTheTeaserTheTeaserWeightedThreePartRollDownWeightedThreePartRollDownVUpWeightedVUpWeightedRussianTwistOnSwissBallWeightedSitUpXAbsWeightedXAbsSitUp"
	_SitUpExerciseName_name_1 = "Invalid"
)

var (
	_SitUpExerciseName_index_0 = [...]uint16{0, 16, 40, 51, 70, 84, 106, 122, 146, 162, 186, 196, 214, 227, 248, 263, 289, 306, 321, 334, 347, 362, 377, 400, 413, 434, 461, 496, 505, 522, 539, 564, 567, 578, 609, 622, 626, 638, 643}
)

func (i SitUpExerciseName) String() string {
	switch {
	case 0 <= i && i <= 37:
		return _SitUpExerciseName_name_0[_SitUpExerciseName_index_0[i]:_SitUpExerciseName_index_0[i+1]]
	case i == 65535:
		return _SitUpExerciseName_name_1
	default:
		return "SitUpExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SourceTypeAnt-0]
	_ = x[SourceTypeAntplus-1]
	_ = x[SourceTypeBluetooth-2]
	_ = x[SourceTypeBluetoothLowEnergy-3]
	_ = x[SourceTypeWifi-4]
	_ = x[SourceTypeLocal-5]
	_ = x[SourceTypeInvalid-255]
}

const (
	_SourceType_name_0 = "AntAntplusBluetoothBluetoothLowEnergyWifiLocal"
	_SourceType_name_1 = "Invalid"
)

var (
	_SourceType_index_0 = [...]uint8{0, 3, 10, 19, 37, 41, 46}
)

func (i SourceType) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _SourceType_name_0[_SourceType_index_0[i]:_SourceType_index_0[i+1]]
	case i == 255:
		return _SourceType_name_1
	default:
		return "SourceType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportGeneric-0]
	_ = x[SportRunning-1]
	_ = x[SportCycling-2]
	_ = x[SportTransition-3]
	_ = x[SportFitnessEquipment-4]
	_ = x[SportSwimming-5]
	_ = x[SportBasketball-6]
	_ = x[SportSoccer-7]
	_ = x[SportTennis-8]
	_ = x[SportAmericanFootball-9]
	_ = x[SportTraining-10]
	_ = x[SportWalking-11]
	_ = x[SportCrossCountrySkiing-12]
	_ = x[SportAlpineSkiing-13]
	_ = x[SportSnowboarding-14]
	_ = x[SportRowing-15]
	_ = x[SportMountaineering-16]
	_ = x[SportHiking-17]
	_ = x[SportMultisport-18]
	_ = x[SportPaddling-19]
	_ = x[SportFlying-20]
	_ = x[SportEBiking-21]
	_ = x[SportMotorcycling-22]
	_ = x[SportBoating-23]
	_ = x[SportDriving-24]
	_ = x[SportGolf-25]
	_ = x[SportHangGliding-26]
	_ = x[SportHorsebackRiding-27]
	_ = x[SportHunting-28]
	_ = x[SportFishing-29]
	_ = x[SportInlineSkating-30]
	_ = x[SportRockClimbing-31]
	_ = x[SportSailing-32]
	_ = x[SportIceSkating-33]
	_ = x[SportSkyDiving-34]
	_ = x[SportSnowshoeing-35]
	_ = x[SportSnowmobiling-36]
	_ = x[SportStandUpPaddleboarding-37]
	_ = x[SportSurfing-38]
	_ = x[SportWakeboarding-39]
	_ = x[SportWaterSkiing-40]
	_ = x[SportKayaking-41]
	_ = x[SportRafting-42]
	_ = x[SportWindsurfing-43]
	_ = x[SportKitesurfing-44]
	_ = x[SportTactical-45]
	_ = x[SportJumpmaster-46]
	_ = x[SportBoxing-47]
	_ = x[SportFloorClimbing-48]
	_ = x[SportDiving-53]
	_ = x[SportAll-254]
	_ = x[SportInvalid-255]
}

const (
	_Sport_name_0 = "GenericRunningCyclingTransitionFitnessEquipmentSwimmingBasketballSoccerTennisAmericanFootballTrainingWalkingCrossCountrySkiingAlpineSkiingSnowboardingRowingMountaineeringHikingMultisportPaddlingFlyingEBikingMotorcyclingBoatingDrivingGolfHangGlidingHorsebackRidingHuntingFishingInlineSkatingRockClimbingSailingIceSkatingSkyDivingSnowshoeingSnowmobilingStandUpPaddleboardingSurfingWakeboardingWaterSkiingKayakingRaftingWindsurfingKitesurfingTacticalJumpmasterBoxingFloorClimbing"
	_Sport_name_1 = "Diving"
	_Sport_name_2 = "AllInvalid"
)

var (
	_Sport_index_0 = [...]uint16{0, 7, 14, 21, 31, 47, 55, 65, 71, 77, 93, 101, 108, 126, 138, 150, 156, 170, 176, 186, 194, 200, 207, 219, 226, 233, 237, 248, 263, 270, 277, 290, 302, 309, 319, 328, 339, 351, 372, 379, 391, 402, 410, 417, 428, 439, 447, 457, 463, 476}
	_Sport_index_2 = [...]uint8{0, 3, 10}
)

func (i Sport) String() string {
	switch {
	case 0 <= i && i <= 48:
		return _Sport_name_0[_Sport_index_0[i]:_Sport_index_0[i+1]]
	case i == 53:
		return _Sport_name_1
	case 254 <= i && i <= 255:
		i -= 254
		return _Sport_name_2[_Sport_index_2[i]:_Sport_index_2[i+1]]
	default:
		return "Sport(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits0Generic-1]
	_ = x[SportBits0Running-2]
	_ = x[SportBits0Cycling-4]
	_ = x[SportBits0Transition-8]
	_ = x[SportBits0FitnessEquipment-16]
	_ = x[SportBits0Swimming-32]
	_ = x[SportBits0Basketball-64]
	_ = x[SportBits0Soccer-128]
	_ = x[SportBits0Invalid-0]
}

const (
	_SportBits0_name_0 = "InvalidGenericRunning"
	_SportBits0_name_1 = "Cycling"
	_SportBits0_name_2 = "Transition"
	_SportBits0_name_3 = "FitnessEquipment"
	_SportBits0_name_4 = "Swimming"
	_SportBits0_name_5 = "Basketball"
	_SportBits0_name_6 = "Soccer"
)

var (
	_SportBits0_index_0 = [...]uint8{0, 7, 14, 21}
)

func (i SportBits0) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits0_name_0[_SportBits0_index_0[i]:_SportBits0_index_0[i+1]]
	case i == 4:
		return _SportBits0_name_1
	case i == 8:
		return _SportBits0_name_2
	case i == 16:
		return _SportBits0_name_3
	case i == 32:
		return _SportBits0_name_4
	case i == 64:
		return _SportBits0_name_5
	case i == 128:
		return _SportBits0_name_6
	default:
		return "SportBits0(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits1Tennis-1]
	_ = x[SportBits1AmericanFootball-2]
	_ = x[SportBits1Training-4]
	_ = x[SportBits1Walking-8]
	_ = x[SportBits1CrossCountrySkiing-16]
	_ = x[SportBits1AlpineSkiing-32]
	_ = x[SportBits1Snowboarding-64]
	_ = x[SportBits1Rowing-128]
	_ = x[SportBits1Invalid-0]
}

const (
	_SportBits1_name_0 = "InvalidTennisAmericanFootball"
	_SportBits1_name_1 = "Training"
	_SportBits1_name_2 = "Walking"
	_SportBits1_name_3 = "CrossCountrySkiing"
	_SportBits1_name_4 = "AlpineSkiing"
	_SportBits1_name_5 = "Snowboarding"
	_SportBits1_name_6 = "Rowing"
)

var (
	_SportBits1_index_0 = [...]uint8{0, 7, 13, 29}
)

func (i SportBits1) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits1_name_0[_SportBits1_index_0[i]:_SportBits1_index_0[i+1]]
	case i == 4:
		return _SportBits1_name_1
	case i == 8:
		return _SportBits1_name_2
	case i == 16:
		return _SportBits1_name_3
	case i == 32:
		return _SportBits1_name_4
	case i == 64:
		return _SportBits1_name_5
	case i == 128:
		return _SportBits1_name_6
	default:
		return "SportBits1(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits2Mountaineering-1]
	_ = x[SportBits2Hiking-2]
	_ = x[SportBits2Multisport-4]
	_ = x[SportBits2Paddling-8]
	_ = x[SportBits2Flying-16]
	_ = x[SportBits2EBiking-32]
	_ = x[SportBits2Motorcycling-64]
	_ = x[SportBits2Boating-128]
	_ = x[SportBits2Invalid-0]
}

const (
	_SportBits2_name_0 = "InvalidMountaineeringHiking"
	_SportBits2_name_1 = "Multisport"
	_SportBits2_name_2 = "Paddling"
	_SportBits2_name_3 = "Flying"
	_SportBits2_name_4 = "EBiking"
	_SportBits2_name_5 = "Motorcycling"
	_SportBits2_name_6 = "Boating"
)

var (
	_SportBits2_index_0 = [...]uint8{0, 7, 21, 27}
)

func (i SportBits2) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits2_name_0[_SportBits2_index_0[i]:_SportBits2_index_0[i+1]]
	case i == 4:
		return _SportBits2_name_1
	case i == 8:
		return _SportBits2_name_2
	case i == 16:
		return _SportBits2_name_3
	case i == 32:
		return _SportBits2_name_4
	case i == 64:
		return _SportBits2_name_5
	case i == 128:
		return _SportBits2_name_6
	default:
		return "SportBits2(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits3Driving-1]
	_ = x[SportBits3Golf-2]
	_ = x[SportBits3HangGliding-4]
	_ = x[SportBits3HorsebackRiding-8]
	_ = x[SportBits3Hunting-16]
	_ = x[SportBits3Fishing-32]
	_ = x[SportBits3InlineSkating-64]
	_ = x[SportBits3RockClimbing-128]
	_ = x[SportBits3Invalid-0]
}

const (
	_SportBits3_name_0 = "InvalidDrivingGolf"
	_SportBits3_name_1 = "HangGliding"
	_SportBits3_name_2 = "HorsebackRiding"
	_SportBits3_name_3 = "Hunting"
	_SportBits3_name_4 = "Fishing"
	_SportBits3_name_5 = "InlineSkating"
	_SportBits3_name_6 = "RockClimbing"
)

var (
	_SportBits3_index_0 = [...]uint8{0, 7, 14, 18}
)

func (i SportBits3) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits3_name_0[_SportBits3_index_0[i]:_SportBits3_index_0[i+1]]
	case i == 4:
		return _SportBits3_name_1
	case i == 8:
		return _SportBits3_name_2
	case i == 16:
		return _SportBits3_name_3
	case i == 32:
		return _SportBits3_name_4
	case i == 64:
		return _SportBits3_name_5
	case i == 128:
		return _SportBits3_name_6
	default:
		return "SportBits3(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits4Sailing-1]
	_ = x[SportBits4IceSkating-2]
	_ = x[SportBits4SkyDiving-4]
	_ = x[SportBits4Snowshoeing-8]
	_ = x[SportBits4Snowmobiling-16]
	_ = x[SportBits4StandUpPaddleboarding-32]
	_ = x[SportBits4Surfing-64]
	_ = x[SportBits4Wakeboarding-128]
	_ = x[SportBits4Invalid-0]
}

const (
	_SportBits4_name_0 = "InvalidSailingIceSkating"
	_SportBits4_name_1 = "SkyDiving"
	_SportBits4_name_2 = "Snowshoeing"
	_SportBits4_name_3 = "Snowmobiling"
	_SportBits4_name_4 = "StandUpPaddleboarding"
	_SportBits4_name_5 = "Surfing"
	_SportBits4_name_6 = "Wakeboarding"
)

var (
	_SportBits4_index_0 = [...]uint8{0, 7, 14, 24}
)

func (i SportBits4) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits4_name_0[_SportBits4_index_0[i]:_SportBits4_index_0[i+1]]
	case i == 4:
		return _SportBits4_name_1
	case i == 8:
		return _SportBits4_name_2
	case i == 16:
		return _SportBits4_name_3
	case i == 32:
		return _SportBits4_name_4
	case i == 64:
		return _SportBits4_name_5
	case i == 128:
		return _SportBits4_name_6
	default:
		return "SportBits4(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits5WaterSkiing-1]
	_ = x[SportBits5Kayaking-2]
	_ = x[SportBits5Rafting-4]
	_ = x[SportBits5Windsurfing-8]
	_ = x[SportBits5Kitesurfing-16]
	_ = x[SportBits5Tactical-32]
	_ = x[SportBits5Jumpmaster-64]
	_ = x[SportBits5Boxing-128]
	_ = x[SportBits5Invalid-0]
}

const (
	_SportBits5_name_0 = "InvalidWaterSkiingKayaking"
	_SportBits5_name_1 = "Rafting"
	_SportBits5_name_2 = "Windsurfing"
	_SportBits5_name_3 = "Kitesurfing"
	_SportBits5_name_4 = "Tactical"
	_SportBits5_name_5 = "Jumpmaster"
	_SportBits5_name_6 = "Boxing"
)

var (
	_SportBits5_index_0 = [...]uint8{0, 7, 18, 26}
)

func (i SportBits5) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SportBits5_name_0[_SportBits5_index_0[i]:_SportBits5_index_0[i+1]]
	case i == 4:
		return _SportBits5_name_1
	case i == 8:
		return _SportBits5_name_2
	case i == 16:
		return _SportBits5_name_3
	case i == 32:
		return _SportBits5_name_4
	case i == 64:
		return _SportBits5_name_5
	case i == 128:
		return _SportBits5_name_6
	default:
		return "SportBits5(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportBits6FloorClimbing-1]
	_ = x[SportBits6Invalid-0]
}

const _SportBits6_name = "InvalidFloorClimbing"

var _SportBits6_index = [...]uint8{0, 7, 20}

func (i SportBits6) String() string {
	if i >= SportBits6(len(_SportBits6_index)-1) {
		return "SportBits6(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SportBits6_name[_SportBits6_index[i]:_SportBits6_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SportEventUncategorized-0]
	_ = x[SportEventGeocaching-1]
	_ = x[SportEventFitness-2]
	_ = x[SportEventRecreation-3]
	_ = x[SportEventRace-4]
	_ = x[SportEventSpecialEvent-5]
	_ = x[SportEventTraining-6]
	_ = x[SportEventTransportation-7]
	_ = x[SportEventTouring-8]
	_ = x[SportEventInvalid-255]
}

const (
	_SportEvent_name_0 = "UncategorizedGeocachingFitnessRecreationRaceSpecialEventTrainingTransportationTouring"
	_SportEvent_name_1 = "Invalid"
)

var (
	_SportEvent_index_0 = [...]uint8{0, 13, 23, 30, 40, 44, 56, 64, 78, 85}
)

func (i SportEvent) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _SportEvent_name_0[_SportEvent_index_0[i]:_SportEvent_index_0[i+1]]
	case i == 255:
		return _SportEvent_name_1
	default:
		return "SportEvent(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SquatExerciseNameLegPress-0]
	_ = x[SquatExerciseNameBackSquatWithBodyBar-1]
	_ = x[SquatExerciseNameBackSquats-2]
	_ = x[SquatExerciseNameWeightedBackSquats-3]
	_ = x[SquatExerciseNameBalancingSquat-4]
	_ = x[SquatExerciseNameWeightedBalancingSquat-5]
	_ = x[SquatExerciseNameBarbellBackSquat-6]
	_ = x[SquatExerciseNameBarbellBoxSquat-7]
	_ = x[SquatExerciseNameBarbellFrontSquat-8]
	_ = x[SquatExerciseNameBarbellHackSquat-9]
	_ = x[SquatExerciseNameBarbellHangSquatSnatch-10]
	_ = x[SquatExerciseNameBarbellLateralStepUp-11]
	_ = x[SquatExerciseNameBarbellQuarterSquat-12]
	_ = x[SquatExerciseNameBarbellSiffSquat-13]
	_ = x[SquatExerciseNameBarbellSquatSnatch-14]
	_ = x[SquatExerciseNameBarbellSquatWithHeelsRaised-15]
	_ = x[SquatExerciseNameBarbellStepover-16]
	_ = x[SquatExerciseNameBarbellStepUp-17]
	_ = x[SquatExerciseNameBenchSquatWithRotationalChop-18]
	_ = x[SquatExerciseNameWeightedBenchSquatWithRotationalChop-19]
	_ = x[SquatExerciseNameBodyWeightWallSquat-20]
	_ = x[SquatExerciseNameWeightedWallSquat-21]
	_ = x[SquatExerciseNameBoxStepSquat-22]
	_ = x[SquatExerciseNameWeightedBoxStepSquat-23]
	_ = x[SquatExerciseNameBracedSquat-24]
	_ = x[SquatExerciseNameCrossedArmBarbellFrontSquat-25]
	_ = x[SquatExerciseNameCrossoverDumbbellStepUp-26]
	_ = x[SquatExerciseNameDumbbellFrontSquat-27]
	_ = x[SquatExerciseNameDumbbellSplitSquat-28]
	_ = x[SquatExerciseNameDumbbellSquat-29]
	_ = x[SquatExerciseNameDumbbellSquatClean-30]
	_ = x[SquatExerciseNameDumbbellStepover-31]
	_ = x[SquatExerciseNameDumbbellStepUp-32]
	_ = x[SquatExerciseNameElevatedSingleLegSquat-33]
	_ = x[SquatExerciseNameWeightedElevatedSingleLegSquat-34]
	_ = x[SquatExerciseNameFigureFourSquats-35]
	_ = x[SquatExerciseNameWeightedFigureFourSquats-36]
	_ = x[SquatExerciseNameGobletSquat-37]
	_ = x[SquatExerciseNameKettlebellSquat-38]
	_ = x[SquatExerciseNameKettlebellSwingOverhead-39]
	_ = x[SquatExerciseNameKettlebellSwingWithFlipToSquat-40]
	_ = x[SquatExerciseNameLateralDumbbellStepUp-41]
	_ = x[SquatExerciseNameOneLeggedSquat-42]
	_ = x[SquatExerciseNameOverheadDumbbellSquat-43]
	_ = x[SquatExerciseNameOverheadSquat-44]
	_ = x[SquatExerciseNamePartialSingleLegSquat-45]
	_ = x[SquatExerciseNameWeightedPartialSingleLegSquat-46]
	_ = x[SquatExerciseNamePistolSquat-47]
	_ = x[SquatExerciseNameWeightedPistolSquat-48]
	_ = x[SquatExerciseNamePlieSlides-49]
	_ = x[SquatExerciseNameWeightedPlieSlides-50]
	_ = x[SquatExerciseNamePlieSquat-51]
	_ = x[SquatExerciseNameWeightedPlieSquat-52]
	_ = x[SquatExerciseNamePrisonerSquat-53]
	_ = x[SquatExerciseNameWeightedPrisonerSquat-54]
	_ = x[SquatExerciseNameSingleLegBenchGetUp-55]
	_ = x[SquatExerciseNameWeightedSingleLegBenchGetUp-56]
	_ = x[SquatExerciseNameSingleLegBenchSquat-57]
	_ = x[SquatExerciseNameWeightedSingleLegBenchSquat-58]
	_ = x[SquatExerciseNameSingleLegSquatOnSwissBall-59]
	_ = x[SquatExerciseNameWeightedSingleLegSquatOnSwissBall-60]
	_ = x[SquatExerciseNameSquat-61]
	_ = x[SquatExerciseNameWeightedSquat-62]
	_ = x[SquatExerciseNameSquatsWithBand-63]
	_ = x[SquatExerciseNameStaggeredSquat-64]
	_ = x[SquatExerciseNameWeightedStaggeredSquat-65]
	_ = x[SquatExerciseNameStepUp-66]
	_ = x[SquatExerciseNameWeightedStepUp-67]
	_ = x[SquatExerciseNameSuitcaseSquats-68]
	_ = x[SquatExerciseNameSumoSquat-69]
	_ = x[SquatExerciseNameSumoSquatSlideIn-70]
	_ = x[SquatExerciseNameWeightedSumoSquatSlideIn-71]
	_ = x[SquatExerciseNameSumoSquatToHighPull-72]
	_ = x[SquatExerciseNameSumoSquatToStand-73]
	_ = x[SquatExerciseNameWeightedSumoSquatToStand-74]
	_ = x[SquatExerciseNameSumoSquatWithRotation-75]
	_ = x[SquatExerciseNameWeightedSumoSquatWithRotation-76]
	_ = x[SquatExerciseNameSwissBallBodyWeightWallSquat-77]
	_ = x[SquatExerciseNameWeightedSwissBallWallSquat-78]
	_ = x[SquatExerciseNameThrusters-79]
	_ = x[SquatExerciseNameUnevenSquat-80]
	_ = x[SquatExerciseNameWeightedUnevenSquat-81]
	_ = x[SquatExerciseNameWaistSlimmingSquat-82]
	_ = x[SquatExerciseNameWallBall-83]
	_ = x[SquatExerciseNameWideStanceBarbellSquat-84]
	_ = x[SquatExerciseNameWideStanceGobletSquat-85]
	_ = x[SquatExerciseNameZercherSquat-86]
	_ = x[SquatExerciseNameKbsOverhead-87]
	_ = x[SquatExerciseNameSquatAndSideKick-88]
	_ = x[SquatExerciseNameSquatJumpsInNOut-89]
	_ = x[SquatExerciseNamePilatesPlieSquatsParallelTurnedOutFlatAndHeels-90]
	_ = x[SquatExerciseNameReleveStraightLegAndKneeBentWithOneLegVariation-91]
	_ = x[SquatExerciseNameInvalid-65535]
}

const (
	_SquatExerciseName_name_0 = "LegPressBackSquatWithBodyBarBackSquatsWeightedBackSquatsBalancingSquatWeightedBalancingSquatBarbellBackSquatBarbellBoxSquatBarbellFrontSquatBarbellHackSquatBarbellHangSquatSnatchBarbellLateralStepUpBarbellQuarterSquatBarbellSiffSquatBarbellSquatSnatchBarbellSquatWithHeelsRaisedBarbellStepoverBarbellStepUpBenchSquatWithRotationalChopWeightedBenchSquatWithRotationalChopBodyWeightWallSquatWeightedWallSquatBoxStepSquatWeightedBoxStepSquatBracedSquatCrossedArmBarbellFrontSquatCrossoverDumbbellStepUpDumbbellFrontSquatDumbbellSplitSquatDumbbellSquatDumbbellSquatCleanDumbbellStepoverDumbbellStepUpElevatedSingleLegSquatWeightedElevatedSingleLegSquatFigureFourSquatsWeightedFigureFourSquatsGobletSquatKettlebellSquatKettlebellSwingOverheadKettlebellSwingWithFlipToSquatLateralDumbbellStepUpOneLeggedSquatOverheadDumbbellSquatOverheadSquatPartialSingleLegSquatWeightedPartialSingleLegSquatPistolSquatWeightedPistolSquatPlieSlidesWeightedPlieSlidesPlieSquatWeightedPlieSquatPrisonerSquatWeightedPrisonerSquatSingleLegBenchGetUpWeightedSingleLegBenchGetUpSingleLegBenchSquatWeightedSingleLegBenchSquatSingleLegSquatOnSwissBallWeightedSingleLegSquatOnSwissBallSquatWeightedSquatSquatsWithBandStaggeredSquatWeightedStaggeredSquatStepUpWeightedStepUpSuitcaseSquatsSumoSquatSumoSquatSlideInWeightedSumoSquatSlideInSumoSquatToHighPullSumoSquatToStandWeightedSumoSquatToStandSumoSquatWithRotationWeightedSumoSquatWithRotationSwissBallBodyWeightWallSquatWeightedSwissBallWallSquatThrustersUnevenSquatWeightedUnevenSquatWaistSlimmingSquatWallBallWideStanceBarbellSquatWideStanceGobletSquatZercherSquatKbsOverheadSquatAndSideKickSquatJumpsInNOutPilatesPlieSquatsParallelTurnedOutFlatAndHeelsReleveStraightLegAndKneeBentWithOneLegVariation"
	_SquatExerciseName_name_1 = "Invalid"
)

var (
	_SquatExerciseName_index_0 = [...]uint16{0, 8, 28, 38, 56, 70, 92, 108, 123, 140, 156, 178, 198, 217, 233, 251, 278, 293, 306, 334, 370, 389, 406, 418, 438, 449, 476, 499, 517, 535, 548, 566, 582, 596, 618, 648, 664, 688, 699, 714, 737, 767, 788, 802, 823, 836, 857, 886, 897, 916, 926, 944, 953, 970, 983, 1004, 1023, 1050, 1069, 1096, 1121, 1154, 1159, 1172, 1186, 1200, 1222, 1228, 1242, 1256, 1265, 1281, 1305, 1324, 1340, 1364, 1385, 1414, 1442, 1468, 1477, 1488, 1507, 1525, 1533, 1555, 1576, 1588, 1599, 1615, 1631, 1677, 1724}
)

func (i SquatExerciseName) String() string {
	switch {
	case 0 <= i && i <= 91:
		return _SquatExerciseName_name_0[_SquatExerciseName_index_0[i]:_SquatExerciseName_index_0[i+1]]
	case i == 65535:
		return _SquatExerciseName_name_1
	default:
		return "SquatExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[StrokeTypeNoEvent-0]
	_ = x[StrokeTypeOther-1]
	_ = x[StrokeTypeServe-2]
	_ = x[StrokeTypeForehand-3]
	_ = x[StrokeTypeBackhand-4]
	_ = x[StrokeTypeSmash-5]
	_ = x[StrokeTypeInvalid-255]
}

const (
	_StrokeType_name_0 = "NoEventOtherServeForehandBackhandSmash"
	_StrokeType_name_1 = "Invalid"
)

var (
	_StrokeType_index_0 = [...]uint8{0, 7, 12, 17, 25, 33, 38}
)

func (i StrokeType) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _StrokeType_name_0[_StrokeType_index_0[i]:_StrokeType_index_0[i+1]]
	case i == 255:
		return _StrokeType_name_1
	default:
		return "StrokeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SubSportGeneric-0]
	_ = x[SubSportTreadmill-1]
	_ = x[SubSportStreet-2]
	_ = x[SubSportTrail-3]
	_ = x[SubSportTrack-4]
	_ = x[SubSportSpin-5]
	_ = x[SubSportIndoorCycling-6]
	_ = x[SubSportRoad-7]
	_ = x[SubSportMountain-8]
	_ = x[SubSportDownhill-9]
	_ = x[SubSportRecumbent-10]
	_ = x[SubSportCyclocross-11]
	_ = x[SubSportHandCycling-12]
	_ = x[SubSportTrackCycling-13]
	_ = x[SubSportIndoorRowing-14]
	_ = x[SubSportElliptical-15]
	_ = x[SubSportStairClimbing-16]
	_ = x[SubSportLapSwimming-17]
	_ = x[SubSportOpenWater-18]
	_ = x[SubSportFlexibilityTraining-19]
	_ = x[SubSportStrengthTraining-20]
	_ = x[SubSportWarmUp-21]
	_ = x[SubSportMatch-22]
	_ = x[SubSportExercise-23]
	_ = x[SubSportChallenge-24]
	_ = x[SubSportIndoorSkiing-25]
	_ = x[SubSportCardioTraining-26]
	_ = x[SubSportIndoorWalking-27]
	_ = x[SubSportEBikeFitness-28]
	_ = x[SubSportBmx-29]
	_ = x[SubSportCasualWalking-30]
	_ = x[SubSportSpeedWalking-31]
	_ = x[SubSportBikeToRunTransition-32]
	_ = x[SubSportRunToBikeTransition-33]
	_ = x[SubSportSwimToBikeTransition-34]
	_ = x[SubSportAtv-35]
	_ = x[SubSportMotocross-36]
	_ = x[SubSportBackcountry-37]
	_ = x[SubSportResort-38]
	_ = x[SubSportRcDrone-39]
	_ = x[SubSportWingsuit-40]
	_ = x[SubSportWhitewater-41]
	_ = x[SubSportSkateSkiing-42]
	_ = x[SubSportYoga-43]
	_ = x[SubSportPilates-44]
	_ = x[SubSportIndoorRunning-45]
	_ = x[SubSportGravelCycling-46]
	_ = x[SubSportEBikeMountain-47]
	_ = x[SubSportCommuting-48]
	_ = x[SubSportMixedSurface-49]
	_ = x[SubSportNavigate-50]
	_ = x[SubSportTrackMe-51]
	_ = x[SubSportMap-52]
	_ = x[SubSportSingleGasDiving-53]
	_ = x[SubSportMultiGasDiving-54]
	_ = x[SubSportGaugeDiving-55]
	_ = x[SubSportApneaDiving-56]
	_ = x[SubSportApneaHunting-57]
	_ = x[SubSportVirtualActivity-58]
	_ = x[SubSportObstacle-59]
	_ = x[SubSportBreathing-62]
	_ = x[SubSportSailRace-65]
	_ = x[SubSportUltra-67]
	_ = x[SubSportIndoorClimbing-68]
	_ = x[SubSportBouldering-69]
	_ = x[SubSportAll-254]
	_ = x[SubSportInvalid-255]
}

const (
	_SubSport_name_0 = "GenericTreadmillStreetTrailTrackSpinIndoorCyclingRoadMountainDownhillRecumbentCyclocrossHandCyclingTrackCyclingIndoorRowingEllipticalStairClimbingLapSwimmingOpenWaterFlexibilityTrainingStrengthTrainingWarmUpMatchExerciseChallengeIndoorSkiingCardioTrainingIndoorWalkingEBikeFitnessBmxCasualWalkingSpeedWalkingBikeToRunTransitionRunToBikeTransitionSwimToBikeTransitionAtvMotocrossBackcountryResortRcDroneWingsuitWhitewaterSkateSkiingYogaPilatesIndoorRunningGravelCyclingEBikeMountainCommutingMixedSurfaceNavigateTrackMeMapSingleGasDivingMultiGasDivingGaugeDivingApneaDivingApneaHuntingVirtualActivityObstacle"
	_SubSport_name_1 = "Breathing"
	_SubSport_name_2 = "SailRace"
	_SubSport_name_3 = "UltraIndoorClimbingBouldering"
	_SubSport_name_4 = "AllInvalid"
)

var (
	_SubSport_index_0 = [...]uint16{0, 7, 16, 22, 27, 32, 36, 49, 53, 61, 69, 78, 88, 99, 111, 123, 133, 146, 157, 166, 185, 201, 207, 212, 220, 229, 241, 255, 268, 280, 283, 296, 308, 327, 346, 366, 369, 378, 389, 395, 402, 410, 420, 431, 435, 442, 455, 468, 481, 490, 502, 510, 517, 520, 535, 549, 560, 571, 583, 598, 606}
	_SubSport_index_3 = [...]uint8{0, 5, 19, 29}
	_SubSport_index_4 = [...]uint8{0, 3, 10}
)

func (i SubSport) String() string {
	switch {
	case 0 <= i && i <= 59:
		return _SubSport_name_0[_SubSport_index_0[i]:_SubSport_index_0[i+1]]
	case i == 62:
		return _SubSport_name_1
	case i == 65:
		return _SubSport_name_2
	case 67 <= i && i <= 69:
		i -= 67
		return _SubSport_name_3[_SubSport_index_3[i]:_SubSport_index_3[i+1]]
	case 254 <= i && i <= 255:
		i -= 254
		return _SubSport_name_4[_SubSport_index_4[i]:_SubSport_index_4[i+1]]
	default:
		return "SubSport(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SupportedExdScreenLayoutsFullScreen-1]
	_ = x[SupportedExdScreenLayoutsHalfVertical-2]
	_ = x[SupportedExdScreenLayoutsHalfHorizontal-4]
	_ = x[SupportedExdScreenLayoutsHalfVerticalRightSplit-8]
	_ = x[SupportedExdScreenLayoutsHalfHorizontalBottomSplit-16]
	_ = x[SupportedExdScreenLayoutsFullQuarterSplit-32]
	_ = x[SupportedExdScreenLayoutsHalfVerticalLeftSplit-64]
	_ = x[SupportedExdScreenLayoutsHalfHorizontalTopSplit-128]
	_ = x[SupportedExdScreenLayoutsInvalid-0]
}

const (
	_SupportedExdScreenLayouts_name_0 = "InvalidFullScreenHalfVertical"
	_SupportedExdScreenLayouts_name_1 = "HalfHorizontal"
	_SupportedExdScreenLayouts_name_2 = "HalfVerticalRightSplit"
	_SupportedExdScreenLayouts_name_3 = "HalfHorizontalBottomSplit"
	_SupportedExdScreenLayouts_name_4 = "FullQuarterSplit"
	_SupportedExdScreenLayouts_name_5 = "HalfVerticalLeftSplit"
	_SupportedExdScreenLayouts_name_6 = "HalfHorizontalTopSplit"
)

var (
	_SupportedExdScreenLayouts_index_0 = [...]uint8{0, 7, 17, 29}
)

func (i SupportedExdScreenLayouts) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _SupportedExdScreenLayouts_name_0[_SupportedExdScreenLayouts_index_0[i]:_SupportedExdScreenLayouts_index_0[i+1]]
	case i == 4:
		return _SupportedExdScreenLayouts_name_1
	case i == 8:
		return _SupportedExdScreenLayouts_name_2
	case i == 16:
		return _SupportedExdScreenLayouts_name_3
	case i == 32:
		return _SupportedExdScreenLayouts_name_4
	case i == 64:
		return _SupportedExdScreenLayouts_name_5
	case i == 128:
		return _SupportedExdScreenLayouts_name_6
	default:
		return "SupportedExdScreenLayouts(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SwimStrokeFreestyle-0]
	_ = x[SwimStrokeBackstroke-1]
	_ = x[SwimStrokeBreaststroke-2]
	_ = x[SwimStrokeButterfly-3]
	_ = x[SwimStrokeDrill-4]
	_ = x[SwimStrokeMixed-5]
	_ = x[SwimStrokeIm-6]
	_ = x[SwimStrokeInvalid-255]
}

const (
	_SwimStroke_name_0 = "FreestyleBackstrokeBreaststrokeButterflyDrillMixedIm"
	_SwimStroke_name_1 = "Invalid"
)

var (
	_SwimStroke_index_0 = [...]uint8{0, 9, 19, 31, 40, 45, 50, 52}
)

func (i SwimStroke) String() string {
	switch {
	case 0 <= i && i <= 6:
		return _SwimStroke_name_0[_SwimStroke_index_0[i]:_SwimStroke_index_0[i+1]]
	case i == 255:
		return _SwimStroke_name_1
	default:
		return "SwimStroke(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SwitchOff-0]
	_ = x[SwitchOn-1]
	_ = x[SwitchAuto-2]
	_ = x[SwitchInvalid-255]
}

const (
	_Switch_name_0 = "OffOnAuto"
	_Switch_name_1 = "Invalid"
)

var (
	_Switch_index_0 = [...]uint8{0, 3, 5, 9}
)

func (i Switch) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _Switch_name_0[_Switch_index_0[i]:_Switch_index_0[i+1]]
	case i == 255:
		return _Switch_name_1
	default:
		return "Switch(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TapSensitivityHigh-0]
	_ = x[TapSensitivityMedium-1]
	_ = x[TapSensitivityLow-2]
	_ = x[TapSensitivityInvalid-255]
}

const (
	_TapSensitivity_name_0 = "HighMediumLow"
	_TapSensitivity_name_1 = "Invalid"
)

var (
	_TapSensitivity_index_0 = [...]uint8{0, 4, 10, 13}
)

func (i TapSensitivity) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _TapSensitivity_name_0[_TapSensitivity_index_0[i]:_TapSensitivity_index_0[i+1]]
	case i == 255:
		return _TapSensitivity_name_1
	default:
		return "TapSensitivity(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TimeIntoDayInvalid-4294967295]
}

const _TimeIntoDay_name = "Invalid"

var _TimeIntoDay_index = [...]uint8{0, 7}

func (i TimeIntoDay) String() string {
	i -= 4294967295
	if i >= TimeIntoDay(len(_TimeIntoDay_index)-1) {
		return "TimeIntoDay(" + strconv.FormatInt(int64(i+4294967295), 10) + ")"
	}
	return _TimeIntoDay_name[_TimeIntoDay_index[i]:_TimeIntoDay_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TimeModeHour12-0]
	_ = x[TimeModeHour24-1]
	_ = x[TimeModeMilitary-2]
	_ = x[TimeModeHour12WithSeconds-3]
	_ = x[TimeModeHour24WithSeconds-4]
	_ = x[TimeModeUtc-5]
	_ = x[TimeModeInvalid-255]
}

const (
	_TimeMode_name_0 = "Hour12Hour24MilitaryHour12WithSecondsHour24WithSecondsUtc"
	_TimeMode_name_1 = "Invalid"
)

var (
	_TimeMode_index_0 = [...]uint8{0, 6, 12, 20, 37, 54, 57}
)

func (i TimeMode) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _TimeMode_name_0[_TimeMode_index_0[i]:_TimeMode_index_0[i+1]]
	case i == 255:
		return _TimeMode_name_1
	default:
		return "TimeMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TimeZoneAlmaty-0]
	_ = x[TimeZoneBangkok-1]
	_ = x[TimeZoneBombay-2]
	_ = x[TimeZoneBrasilia-3]
	_ = x[TimeZoneCairo-4]
	_ = x[TimeZoneCapeVerdeIs-5]
	_ = x[TimeZoneDarwin-6]
	_ = x[TimeZoneEniwetok-7]
	_ = x[TimeZoneFiji-8]
	_ = x[TimeZoneHongKong-9]
	_ = x[TimeZoneIslamabad-10]
	_ = x[TimeZoneKabul-11]
	_ = x[TimeZoneMagadan-12]
	_ = x[TimeZoneMidAtlantic-13]
	_ = x[TimeZoneMoscow-14]
	_ = x[TimeZoneMuscat-15]
	_ = x[TimeZoneNewfoundland-16]
	_ = x[TimeZoneSamoa-17]
	_ = x[TimeZoneSydney-18]
	_ = x[TimeZoneTehran-19]
	_ = x[TimeZoneTokyo-20]
	_ = x[TimeZoneUsAlaska-21]
	_ = x[TimeZoneUsAtlantic-22]
	_ = x[TimeZoneUsCentral-23]
	_ = x[TimeZoneUsEastern-24]
	_ = x[TimeZoneUsHawaii-25]
	_ = x[TimeZoneUsMountain-26]
	_ = x[TimeZoneUsPacific-27]
	_ = x[TimeZoneOther-28]
	_ = x[TimeZoneAuckland-29]
	_ = x[TimeZoneKathmandu-30]
	_ = x[TimeZoneEuropeWesternWet-31]
	_ = x[TimeZoneEuropeCentralCet-32]
	_ = x[TimeZoneEuropeEasternEet-33]
	_ = x[TimeZoneJakarta-34]
	_ = x[TimeZonePerth-35]
	_ = x[TimeZoneAdelaide-36]
	_ = x[TimeZoneBrisbane-37]
	_ = x[TimeZoneTasmania-38]
	_ = x[TimeZoneIceland-39]
	_ = x[TimeZoneAmsterdam-40]
	_ = x[TimeZoneAthens-41]
	_ = x[TimeZoneBarcelona-42]
	_ = x[TimeZoneBerlin-43]
	_ = x[TimeZoneBrussels-44]
	_ = x[TimeZoneBudapest-45]
	_ = x[TimeZoneCopenhagen-46]
	_ = x[TimeZoneDublin-47]
	_ = x[TimeZoneHelsinki-48]
	_ = x[TimeZoneLisbon-49]
	_ = x[TimeZoneLondon-50]
	_ = x[TimeZoneMadrid-51]
	_ = x[TimeZoneMunich-52]
	_ = x[TimeZoneOslo-53]
	_ = x[TimeZoneParis-54]
	_ = x[TimeZonePrague-55]
	_ = x[TimeZoneReykjavik-56]
	_ = x[TimeZoneRome-57]
	_ = x[TimeZoneStockholm-58]
	_ = x[TimeZoneVienna-59]
	_ = x[TimeZoneWarsaw-60]
	_ = x[TimeZoneZurich-61]
	_ = x[TimeZoneQuebec-62]
	_ = x[TimeZoneOntario-63]
	_ = x[TimeZoneManitoba-64]
	_ = x[TimeZoneSaskatchewan-65]
	_ = x[TimeZoneAlberta-66]
	_ = x[TimeZoneBritishColumbia-67]
	_ = x[TimeZoneBoise-68]
	_ = x[TimeZoneBoston-69]
	_ = x[TimeZoneChicago-70]
	_ = x[TimeZoneDallas-71]
	_ = x[TimeZoneDenver-72]
	_ = x[TimeZoneKansasCity-73]
	_ = x[TimeZoneLasVegas-74]
	_ = x[TimeZoneLosAngeles-75]
	_ = x[TimeZoneMiami-76]
	_ = x[TimeZoneMinneapolis-77]
	_ = x[TimeZoneNewYork-78]
	_ = x[TimeZoneNewOrleans-79]
	_ = x[TimeZonePhoenix-80]
	_ = x[TimeZoneSantaFe-81]
	_ = x[TimeZoneSeattle-82]
	_ = x[TimeZoneWashingtonDc-83]
	_ = x[TimeZoneUsArizona-84]
	_ = x[TimeZoneChita-85]
	_ = x[TimeZoneEkaterinburg-86]
	_ = x[TimeZoneIrkutsk-87]
	_ = x[TimeZoneKaliningrad-88]
	_ = x[TimeZoneKrasnoyarsk-89]
	_ = x[TimeZoneNovosibirsk-90]
	_ = x[TimeZonePetropavlovskKamchatskiy-91]
	_ = x[TimeZoneSamara-92]
	_ = x[TimeZoneVladivostok-93]
	_ = x[TimeZoneMexicoCentral-94]
	_ = x[TimeZoneMexicoMountain-95]
	_ = x[TimeZoneMexicoPacific-96]
	_ = x[TimeZoneCapeTown-97]
	_ = x[TimeZoneWinkhoek-98]
	_ = x[TimeZoneLagos-99]
	_ = x[TimeZoneRiyahd-100]
	_ = x[TimeZoneVenezuela-101]
	_ = x[TimeZoneAustraliaLh-102]
	_ = x[TimeZoneSantiago-103]
	_ = x[TimeZoneManual-253]
	_ = x[TimeZoneAutomatic-254]
	_ = x[TimeZoneInvalid-255]
}

const (
	_TimeZone_name_0 = "AlmatyBangkokBombayBrasiliaCairoCapeVerdeIsDarwinEniwetokFijiHongKongIslamabadKabulMagadanMidAtlanticMoscowMuscatNewfoundlandSamoaSydneyTehranTokyoUsAlaskaUsAtlanticUsCentralUsEasternUsHawaiiUsMountainUsPacificOtherAucklandKathmanduEuropeWesternWetEuropeCentralCetEuropeEasternEetJakartaPerthAdelaideBrisbaneTasmaniaIcelandAmsterdamAthensBarcelonaBerlinBrusselsBudapestCopenhagenDublinHelsinkiLisbonLondonMadridMunichOsloParisPragueReykjavikRomeStockholmViennaWarsawZurichQuebecOntarioManitobaSaskatchewanAlbertaBritishColumbiaBoiseBostonChicagoDallasDenverKansasCityLasVegasLosAngelesMiamiMinneapolisNewYorkNewOrleansPhoenixSantaFeSeattleWashingtonDcUsArizonaChitaEkaterinburgIrkutskKaliningradKrasnoyarskNovosibirskPetropavlovskKamchatskiySamaraVladivostokMexicoCentralMexicoMountainMexicoPacificCapeTownWinkhoekLagosRiyahdVenezuelaAustraliaLhSantiago"
	_TimeZone_name_1 = "ManualAutomaticInvalid"
)

var (
	_TimeZone_index_0 = [...]uint16{0, 6, 13, 19, 27, 32, 43, 49, 57, 61, 69, 78, 83, 90, 101, 107, 113, 125, 130, 136, 142, 147, 155, 165, 174, 183, 191, 201, 210, 215, 223, 232, 248, 264, 280, 287, 292, 300, 308, 316, 323, 332, 338, 347, 353, 361, 369, 379, 385, 393, 399, 405, 411, 417, 421, 426, 432, 441, 445, 454, 460, 466, 472, 478, 485, 493, 505, 512, 527, 532, 538, 545, 551, 557, 567, 575, 585, 590, 601, 608, 618, 625, 632, 639, 651, 660, 665, 677, 684, 695, 706, 717, 741, 747, 758, 771, 785, 798, 806, 814, 819, 825, 834, 845, 853}
	_TimeZone_index_1 = [...]uint8{0, 6, 15, 22}
)

func (i TimeZone) String() string {
	switch {
	case 0 <= i && i <= 103:
		return _TimeZone_name_0[_TimeZone_index_0[i]:_TimeZone_index_0[i+1]]
	case 253 <= i && i <= 255:
		i -= 253
		return _TimeZone_name_1[_TimeZone_index_1[i]:_TimeZone_index_1[i+1]]
	default:
		return "TimeZone(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TimerTriggerManual-0]
	_ = x[TimerTriggerAuto-1]
	_ = x[TimerTriggerFitnessEquipment-2]
	_ = x[TimerTriggerInvalid-255]
}

const (
	_TimerTrigger_name_0 = "ManualAutoFitnessEquipment"
	_TimerTrigger_name_1 = "Invalid"
)

var (
	_TimerTrigger_index_0 = [...]uint8{0, 6, 10, 26}
)

func (i TimerTrigger) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _TimerTrigger_name_0[_TimerTrigger_index_0[i]:_TimerTrigger_index_0[i+1]]
	case i == 255:
		return _TimerTrigger_name_1
	default:
		return "TimerTrigger(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TissueModelTypeZhl16c-0]
	_ = x[TissueModelTypeInvalid-255]
}

const (
	_TissueModelType_name_0 = "Zhl16c"
	_TissueModelType_name_1 = "Invalid"
)

func (i TissueModelType) String() string {
	switch {
	case i == 0:
		return _TissueModelType_name_0
	case i == 255:
		return _TissueModelType_name_1
	default:
		return "TissueModelType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ToneOff-0]
	_ = x[ToneTone-1]
	_ = x[ToneVibrate-2]
	_ = x[ToneToneAndVibrate-3]
	_ = x[ToneInvalid-255]
}

const (
	_Tone_name_0 = "OffToneVibrateToneAndVibrate"
	_Tone_name_1 = "Invalid"
)

var (
	_Tone_index_0 = [...]uint8{0, 3, 7, 14, 28}
)

func (i Tone) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _Tone_name_0[_Tone_index_0[i]:_Tone_index_0[i+1]]
	case i == 255:
		return _Tone_name_1
	default:
		return "Tone(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TotalBodyExerciseNameBurpee-0]
	_ = x[TotalBodyExerciseNameWeightedBurpee-1]
	_ = x[TotalBodyExerciseNameBurpeeBoxJump-2]
	_ = x[TotalBodyExerciseNameWeightedBurpeeBoxJump-3]
	_ = x[TotalBodyExerciseNameHighPullBurpee-4]
	_ = x[TotalBodyExerciseNameManMakers-5]
	_ = x[TotalBodyExerciseNameOneArmBurpee-6]
	_ = x[TotalBodyExerciseNameSquatThrusts-7]
	_ = x[TotalBodyExerciseNameWeightedSquatThrusts-8]
	_ = x[TotalBodyExerciseNameSquatPlankPushUp-9]
	_ = x[TotalBodyExerciseNameWeightedSquatPlankPushUp-10]
	_ = x[TotalBodyExerciseNameStandingTRotationBalance-11]
	_ = x[TotalBodyExerciseNameWeightedStandingTRotationBalance-12]
	_ = x[TotalBodyExerciseNameInvalid-65535]
}

const (
	_TotalBodyExerciseName_name_0 = "BurpeeWeightedBurpeeBurpeeBoxJumpWeightedBurpeeBoxJumpHighPullBurpeeManMakersOneArmBurpeeSquatThrustsWeightedSquatThrustsSquatPlankPushUpWeightedSquatPlankPushUpStandingTRotationBalanceWeightedStandingTRotationBalance"
	_TotalBodyExerciseName_name_1 = "Invalid"
)

var (
	_TotalBodyExerciseName_index_0 = [...]uint8{0, 6, 20, 33, 54, 68, 77, 89, 101, 121, 137, 161, 185, 217}
)

func (i TotalBodyExerciseName) String() string {
	switch {
	case 0 <= i && i <= 12:
		return _TotalBodyExerciseName_name_0[_TotalBodyExerciseName_index_0[i]:_TotalBodyExerciseName_index_0[i+1]]
	case i == 65535:
		return _TotalBodyExerciseName_name_1
	default:
		return "TotalBodyExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TricepsExtensionExerciseNameBenchDip-0]
	_ = x[TricepsExtensionExerciseNameWeightedBenchDip-1]
	_ = x[TricepsExtensionExerciseNameBodyWeightDip-2]
	_ = x[TricepsExtensionExerciseNameCableKickback-3]
	_ = x[TricepsExtensionExerciseNameCableLyingTricepsExtension-4]
	_ = x[TricepsExtensionExerciseNameCableOverheadTricepsExtension-5]
	_ = x[TricepsExtensionExerciseNameDumbbellKickback-6]
	_ = x[TricepsExtensionExerciseNameDumbbellLyingTricepsExtension-7]
	_ = x[TricepsExtensionExerciseNameEzBarOverheadTricepsExtension-8]
	_ = x[TricepsExtensionExerciseNameInclineDip-9]
	_ = x[TricepsExtensionExerciseNameWeightedInclineDip-10]
	_ = x[TricepsExtensionExerciseNameInclineEzBarLyingTricepsExtension-11]
	_ = x[TricepsExtensionExerciseNameLyingDumbbellPulloverToExtension-12]
	_ = x[TricepsExtensionExerciseNameLyingEzBarTricepsExtension-13]
	_ = x[TricepsExtensionExerciseNameLyingTricepsExtensionToCloseGripBenchPress-14]
	_ = x[TricepsExtensionExerciseNameOverheadDumbbellTricepsExtension-15]
	_ = x[TricepsExtensionExerciseNameRecliningTricepsPress-16]
	_ = x[TricepsExtensionExerciseNameReverseGripPressdown-17]
	_ = x[TricepsExtensionExerciseNameReverseGripTricepsPressdown-18]
	_ = x[TricepsExtensionExerciseNameRopePressdown-19]
	_ = x[TricepsExtensionExerciseNameSeatedBarbellOverheadTricepsExtension-20]
	_ = x[TricepsExtensionExerciseNameSeatedDumbbellOverheadTricepsExtension-21]
	_ = x[TricepsExtensionExerciseNameSeatedEzBarOverheadTricepsExtension-22]
	_ = x[TricepsExtensionExerciseNameSeatedSingleArmOverheadDumbbellExtension-23]
	_ = x[TricepsExtensionExerciseNameSingleArmDumbbellOverheadTricepsExtension-24]
	_ = x[TricepsExtensionExerciseNameSingleDumbbellSeatedOverheadTricepsExtension-25]
	_ = x[TricepsExtensionExerciseNameSingleLegBenchDipAndKick-26]
	_ = x[TricepsExtensionExerciseNameWeightedSingleLegBenchDipAndKick-27]
	_ = x[TricepsExtensionExerciseNameSingleLegDip-28]
	_ = x[TricepsExtensionExerciseNameWeightedSingleLegDip-29]
	_ = x[TricepsExtensionExerciseNameStaticLyingTricepsExtension-30]
	_ = x[TricepsExtensionExerciseNameSuspendedDip-31]
	_ = x[TricepsExtensionExerciseNameWeightedSuspendedDip-32]
	_ = x[TricepsExtensionExerciseNameSwissBallDumbbellLyingTricepsExtension-33]
	_ = x[TricepsExtensionExerciseNameSwissBallEzBarLyingTricepsExtension-34]
	_ = x[TricepsExtensionExerciseNameSwissBallEzBarOverheadTricepsExtension-35]
	_ = x[TricepsExtensionExerciseNameTabletopDip-36]
	_ = x[TricepsExtensionExerciseNameWeightedTabletopDip-37]
	_ = x[TricepsExtensionExerciseNameTricepsExtensionOnFloor-38]
	_ = x[TricepsExtensionExerciseNameTricepsPressdown-39]
	_ = x[TricepsExtensionExerciseNameWeightedDip-40]
	_ = x[TricepsExtensionExerciseNameInvalid-65535]
}

const (
	_TricepsExtensionExerciseName_name_0 = "BenchDipWeightedBenchDipBodyWeightDipCableKickbackCableLyingTricepsExtensionCableOverheadTricepsExtensionDumbbellKickbackDumbbellLyingTricepsExtensionEzBarOverheadTricepsExtensionInclineDipWeightedInclineDipInclineEzBarLyingTricepsExtensionLyingDumbbellPulloverToExtensionLyingEzBarTricepsExtensionLyingTricepsExtensionToCloseGripBenchPressOverheadDumbbellTricepsExtensionRecliningTricepsPressReverseGripPressdownReverseGripTricepsPressdownRopePressdownSeatedBarbellOverheadTricepsExtensionSeatedDumbbellOverheadTricepsExtensionSeatedEzBarOverheadTricepsExtensionSeatedSingleArmOverheadDumbbellExtensionSingleArmDumbbellOverheadTricepsExtensionSingleDumbbellSeatedOverheadTricepsExtensionSingleLegBenchDipAndKickWeightedSingleLegBenchDipAndKickSingleLegDipWeightedSingleLegDipStaticLyingTricepsExtensionSuspendedDipWeightedSuspendedDipSwissBallDumbbellLyingTricepsExtensionSwissBallEzBarLyingTricepsExtensionSwissBallEzBarOverheadTricepsExtensionTabletopDipWeightedTabletopDipTricepsExtensionOnFloorTricepsPressdownWeightedDip"
	_TricepsExtensionExerciseName_name_1 = "Invalid"
)

var (
	_TricepsExtensionExerciseName_index_0 = [...]uint16{0, 8, 24, 37, 50, 76, 105, 121, 150, 179, 189, 207, 240, 272, 298, 340, 372, 393, 413, 440, 453, 490, 528, 563, 603, 644, 688, 712, 744, 756, 776, 803, 815, 835, 873, 908, 946, 957, 976, 999, 1015, 1026}
)

func (i TricepsExtensionExerciseName) String() string {
	switch {
	case 0 <= i && i <= 40:
		return _TricepsExtensionExerciseName_name_0[_TricepsExtensionExerciseName_index_0[i]:_TricepsExtensionExerciseName_index_0[i+1]]
	case i == 65535:
		return _TricepsExtensionExerciseName_name_1
	default:
		return "TricepsExtensionExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TurnTypeArrivingIdx-0]
	_ = x[TurnTypeArrivingLeftIdx-1]
	_ = x[TurnTypeArrivingRightIdx-2]
	_ = x[TurnTypeArrivingViaIdx-3]
	_ = x[TurnTypeArrivingViaLeftIdx-4]
	_ = x[TurnTypeArrivingViaRightIdx-5]
	_ = x[TurnTypeBearKeepLeftIdx-6]
	_ = x[TurnTypeBearKeepRightIdx-7]
	_ = x[TurnTypeContinueIdx-8]
	_ = x[TurnTypeExitLeftIdx-9]
	_ = x[TurnTypeExitRightIdx-10]
	_ = x[TurnTypeFerryIdx-11]
	_ = x[TurnTypeRoundabout45Idx-12]
	_ = x[TurnTypeRoundabout90Idx-13]
	_ = x[TurnTypeRoundabout135Idx-14]
	_ = x[TurnTypeRoundabout180Idx-15]
	_ = x[TurnTypeRoundabout225Idx-16]
	_ = x[TurnTypeRoundabout270Idx-17]
	_ = x[TurnTypeRoundabout315Idx-18]
	_ = x[TurnTypeRoundabout360Idx-19]
	_ = x[TurnTypeRoundaboutNeg45Idx-20]
	_ = x[TurnTypeRoundaboutNeg90Idx-21]
	_ = x[TurnTypeRoundaboutNeg135Idx-22]
	_ = x[TurnTypeRoundaboutNeg180Idx-23]
	_ = x[TurnTypeRoundaboutNeg225Idx-24]
	_ = x[TurnTypeRoundaboutNeg270Idx-25]
	_ = x[TurnTypeRoundaboutNeg315Idx-26]
	_ = x[TurnTypeRoundaboutNeg360Idx-27]
	_ = x[TurnTypeRoundaboutGenericIdx-28]
	_ = x[TurnTypeRoundaboutNegGenericIdx-29]
	_ = x[TurnTypeSharpTurnLeftIdx-30]
	_ = x[TurnTypeSharpTurnRightIdx-31]
	_ = x[TurnTypeTurnLeftIdx-32]
	_ = x[TurnTypeTurnRightIdx-33]
	_ = x[TurnTypeUturnLeftIdx-34]
	_ = x[TurnTypeUturnRightIdx-35]
	_ = x[TurnTypeIconInvIdx-36]
	_ = x[TurnTypeIconIdxCnt-37]
	_ = x[TurnTypeInvalid-255]
}

const (
	_TurnType_name_0 = "ArrivingIdxArrivingLeftIdxArrivingRightIdxArrivingViaIdxArrivingViaLeftIdxArrivingViaRightIdxBearKeepLeftIdxBearKeepRightIdxContinueIdxExitLeftIdxExitRightIdxFerryIdxRoundabout45IdxRoundabout90IdxRoundabout135IdxRoundabout180IdxRoundabout225IdxRoundabout270IdxRoundabout315IdxRoundabout360IdxRoundaboutNeg45IdxRoundaboutNeg90IdxRoundaboutNeg135IdxRoundaboutNeg180IdxRoundaboutNeg225IdxRoundaboutNeg270IdxRoundaboutNeg315IdxRoundaboutNeg360IdxRoundaboutGenericIdxRoundaboutNegGenericIdxSharpTurnLeftIdxSharpTurnRightIdxTurnLeftIdxTurnRightIdxUturnLeftIdxUturnRightIdxIconInvIdxIconIdxCnt"
	_TurnType_name_1 = "Invalid"
)

var (
	_TurnType_index_0 = [...]uint16{0, 11, 26, 42, 56, 74, 93, 108, 124, 135, 146, 158, 166, 181, 196, 212, 228, 244, 260, 276, 292, 310, 328, 347, 366, 385, 404, 423, 442, 462, 485, 501, 518, 529, 541, 553, 566, 576, 586}
)

func (i TurnType) String() string {
	switch {
	case 0 <= i && i <= 37:
		return _TurnType_name_0[_TurnType_index_0[i]:_TurnType_index_0[i+1]]
	case i == 255:
		return _TurnType_name_1
	default:
		return "TurnType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UserLocalIdLocalMin-0]
	_ = x[UserLocalIdLocalMax-15]
	_ = x[UserLocalIdStationaryMin-16]
	_ = x[UserLocalIdStationaryMax-255]
	_ = x[UserLocalIdPortableMin-256]
	_ = x[UserLocalIdPortableMax-65534]
	_ = x[UserLocalIdInvalid-65535]
}

const (
	_UserLocalId_name_0 = "LocalMin"
	_UserLocalId_name_1 = "LocalMaxStationaryMin"
	_UserLocalId_name_2 = "StationaryMaxPortableMin"
	_UserLocalId_name_3 = "PortableMaxInvalid"
)

var (
	_UserLocalId_index_1 = [...]uint8{0, 8, 21}
	_UserLocalId_index_2 = [...]uint8{0, 13, 24}
	_UserLocalId_index_3 = [...]uint8{0, 11, 18}
)

func (i UserLocalId) String() string {
	switch {
	case i == 0:
		return _UserLocalId_name_0
	case 15 <= i && i <= 16:
		i -= 15
		return _UserLocalId_name_1[_UserLocalId_index_1[i]:_UserLocalId_index_1[i+1]]
	case 255 <= i && i <= 256:
		i -= 255
		return _UserLocalId_name_2[_UserLocalId_index_2[i]:_UserLocalId_index_2[i+1]]
	case 65534 <= i && i <= 65535:
		i -= 65534
		return _UserLocalId_name_3[_UserLocalId_index_3[i]:_UserLocalId_index_3[i+1]]
	default:
		return "UserLocalId(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WarmUpExerciseNameQuadrupedRocking-0]
	_ = x[WarmUpExerciseNameNeckTilts-1]
	_ = x[WarmUpExerciseNameAnkleCircles-2]
	_ = x[WarmUpExerciseNameAnkleDorsiflexionWithBand-3]
	_ = x[WarmUpExerciseNameAnkleInternalRotation-4]
	_ = x[WarmUpExerciseNameArmCircles-5]
	_ = x[WarmUpExerciseNameBentOverReachToSky-6]
	_ = x[WarmUpExerciseNameCatCamel-7]
	_ = x[WarmUpExerciseNameElbowToFootLunge-8]
	_ = x[WarmUpExerciseNameForwardAndBackwardLegSwings-9]
	_ = x[WarmUpExerciseNameGroiners-10]
	_ = x[WarmUpExerciseNameInvertedHamstringStretch-11]
	_ = x[WarmUpExerciseNameLateralDuckUnder-12]
	_ = x[WarmUpExerciseNameNeckRotations-13]
	_ = x[WarmUpExerciseNameOppositeArmAndLegBalance-14]
	_ = x[WarmUpExerciseNameReachRollAndLift-15]
	_ = x[WarmUpExerciseNameScorpion-16]
	_ = x[WarmUpExerciseNameShoulderCircles-17]
	_ = x[WarmUpExerciseNameSideToSideLegSwings-18]
	_ = x[WarmUpExerciseNameSleeperStretch-19]
	_ = x[WarmUpExerciseNameSlideOut-20]
	_ = x[WarmUpExerciseNameSwissBallHipCrossover-21]
	_ = x[WarmUpExerciseNameSwissBallReachRollAndLift-22]
	_ = x[WarmUpExerciseNameSwissBallWindshieldWipers-23]
	_ = x[WarmUpExerciseNameThoracicRotation-24]
	_ = x[WarmUpExerciseNameWalkingHighKicks-25]
	_ = x[WarmUpExerciseNameWalkingHighKnees-26]
	_ = x[WarmUpExerciseNameWalkingKneeHugs-27]
	_ = x[WarmUpExerciseNameWalkingLegCradles-28]
	_ = x[WarmUpExerciseNameWalkout-29]
	_ = x[WarmUpExerciseNameWalkoutFromPushUpPosition-30]
	_ = x[WarmUpExerciseNameInvalid-65535]
}

const (
	_WarmUpExerciseName_name_0 = "QuadrupedRockingNeckTiltsAnkleCirclesAnkleDorsiflexionWithBandAnkleInternalRotationArmCirclesBentOverReachToSkyCatCamelElbowToFootLungeForwardAndBackwardLegSwingsGroinersInvertedHamstringStretchLateralDuckUnderNeckRotationsOppositeArmAndLegBalanceReachRollAndLiftScorpionShoulderCirclesSideToSideLegSwingsSleeperStretchSlideOutSwissBallHipCrossoverSwissBallReachRollAndLiftSwissBallWindshieldWipersThoracicRotationWalkingHighKicksWalkingHighKneesWalkingKneeHugsWalkingLegCradlesWalkoutWalkoutFromPushUpPosition"
	_WarmUpExerciseName_name_1 = "Invalid"
)

var (
	_WarmUpExerciseName_index_0 = [...]uint16{0, 16, 25, 37, 62, 83, 93, 111, 119, 135, 162, 170, 194, 210, 223, 247, 263, 271, 286, 305, 319, 327, 348, 373, 398, 414, 430, 446, 461, 478, 485, 510}
)

func (i WarmUpExerciseName) String() string {
	switch {
	case 0 <= i && i <= 30:
		return _WarmUpExerciseName_name_0[_WarmUpExerciseName_index_0[i]:_WarmUpExerciseName_index_0[i+1]]
	case i == 65535:
		return _WarmUpExerciseName_name_1
	default:
		return "WarmUpExerciseName(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WatchfaceModeDigital-0]
	_ = x[WatchfaceModeAnalog-1]
	_ = x[WatchfaceModeConnectIq-2]
	_ = x[WatchfaceModeDisabled-3]
	_ = x[WatchfaceModeInvalid-255]
}

const (
	_WatchfaceMode_name_0 = "DigitalAnalogConnectIqDisabled"
	_WatchfaceMode_name_1 = "Invalid"
)

var (
	_WatchfaceMode_index_0 = [...]uint8{0, 7, 13, 22, 30}
)

func (i WatchfaceMode) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _WatchfaceMode_name_0[_WatchfaceMode_index_0[i]:_WatchfaceMode_index_0[i+1]]
	case i == 255:
		return _WatchfaceMode_name_1
	default:
		return "WatchfaceMode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WaterTypeFresh-0]
	_ = x[WaterTypeSalt-1]
	_ = x[WaterTypeEn13319-2]
	_ = x[WaterTypeCustom-3]
	_ = x[WaterTypeInvalid-255]
}

const (
	_WaterType_name_0 = "FreshSaltEn13319Custom"
	_WaterType_name_1 = "Invalid"
)

var (
	_WaterType_index_0 = [...]uint8{0, 5, 9, 16, 22}
)

func (i WaterType) String() string {
	switch {
	case 0 <= i && i <= 3:
		return _WaterType_name_0[_WaterType_index_0[i]:_WaterType_index_0[i+1]]
	case i == 255:
		return _WaterType_name_1
	default:
		return "WaterType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WeatherReportCurrent-0]
	_ = x[WeatherReportForecast-1]
	_ = x[WeatherReportHourlyForecast-1]
	_ = x[WeatherReportDailyForecast-2]
	_ = x[WeatherReportInvalid-255]
}

const (
	_WeatherReport_name_0 = "CurrentForecastDailyForecast"
	_WeatherReport_name_1 = "Invalid"
)

var (
	_WeatherReport_index_0 = [...]uint8{0, 7, 15, 28}
)

func (i WeatherReport) String() string {
	switch {
	case 0 <= i && i <= 2:
		return _WeatherReport_name_0[_WeatherReport_index_0[i]:_WeatherReport_index_0[i+1]]
	case i == 255:
		return _WeatherReport_name_1
	default:
		return "WeatherReport(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WeatherSevereTypeUnspecified-0]
	_ = x[WeatherSevereTypeTornado-1]
	_ = x[WeatherSevereTypeTsunami-2]
	_ = x[WeatherSevereTypeHurricane-3]
	_ = x[WeatherSevereTypeExtremeWind-4]
	_ = x[WeatherSevereTypeTyphoon-5]
	_ = x[WeatherSevereTypeInlandHurricane-6]
	_ = x[WeatherSevereTypeHurricaneForceWind-7]
	_ = x[WeatherSevereTypeWaterspout-8]
	_ = x[WeatherSevereTypeSevereThunderstorm-9]
	_ = x[WeatherSevereTypeWreckhouseWinds-10]
	_ = x[WeatherSevereTypeLesSuetesWind-11]
	_ = x[WeatherSevereTypeAvalanche-12]
	_ = x[WeatherSevereTypeFlashFlood-13]
	_ = x[WeatherSevereTypeTropicalStorm-14]
	_ = x[WeatherSevereTypeInlandTropicalStorm-15]
	_ = x[WeatherSevereTypeBlizzard-16]
	_ = x[WeatherSevereTypeIceStorm-17]
	_ = x[WeatherSevereTypeFreezingRain-18]
	_ = x[WeatherSevereTypeDebrisFlow-19]
	_ = x[WeatherSevereTypeFlashFreeze-20]
	_ = x[WeatherSevereTypeDustStorm-21]
	_ = x[WeatherSevereTypeHighWind-22]
	_ = x[WeatherSevereTypeWinterStorm-23]
	_ = x[WeatherSevereTypeHeavyFreezingSpray-24]
	_ = x[WeatherSevereTypeExtremeCold-25]
	_ = x[WeatherSevereTypeWindChill-26]
	_ = x[WeatherSevereTypeColdWave-27]
	_ = x[WeatherSevereTypeHeavySnowAlert-28]
	_ = x[WeatherSevereTypeLakeEffectBlowingSnow-29]
	_ = x[WeatherSevereTypeSnowSquall-30]
	_ = x[WeatherSevereTypeLakeEffectSnow-31]
	_ = x[WeatherSevereTypeWinterWeather-32]
	_ = x[WeatherSevereTypeSleet-33]
	_ = x[WeatherSevereTypeSnowfall-34]
	_ = x[WeatherSevereTypeSnowAndBlowingSnow-35]
	_ = x[WeatherSevereTypeBlowingSnow-36]
	_ = x[WeatherSevereTypeSnowAlert-37]
	_ = x[WeatherSevereTypeArcticOutflow-38]
	_ = x[WeatherSevereTypeFreezingDrizzle-39]
	_ = x[WeatherSevereTypeStorm-40]
	_ = x[WeatherSevereTypeStormSurge-41]
	_ = x[WeatherSevereTypeRainfall-42]
	_ = x[WeatherSevereTypeArealFlood-43]
	_ = x[WeatherSevereTypeCoastalFlood-44]
	_ = x[WeatherSevereTypeLakeshoreFlood-45]
	_ = x[WeatherSevereTypeExcessiveHeat-46]
	_ = x[WeatherSevereTypeHeat-47]
	_ = x[WeatherSevereTypeWeather-48]
	_ = x[WeatherSevereTypeHighHeatAndHumidity-49]
	_ = x[WeatherSevereTypeHumidexAndHealth-50]
	_ = x[WeatherSevereTypeHumidex-51]
	_ = x[WeatherSevereTypeGale-52]
	_ = x[WeatherSevereTypeFreezingSpray-53]
	_ = x[WeatherSevereTypeSpecialMarine-54]
	_ = x[WeatherSevereTypeSquall-55]
	_ = x[WeatherSevereTypeStrongWind-56]
	_ = x[WeatherSevereTypeLakeWind-57]
	_ = x[WeatherSevereTypeMarineWeather-58]
	_ = x[WeatherSevereTypeWind-59]
	_ = x[WeatherSevereTypeSmallCraftHazardousSeas-60]
	_ = x[WeatherSevereTypeHazardousSeas-61]
	_ = x[WeatherSevereTypeSmallCraft-62]
	_ = x[WeatherSevereTypeSmallCraftWinds-63]
	_ = x[WeatherSevereTypeSmallCraftRoughBar-64]
	_ = x[WeatherSevereTypeHighWaterLevel-65]
	_ = x[WeatherSevereTypeAshfall-66]
	_ = x[WeatherSevereTypeFreezingFog-67]
	_ = x[WeatherSevereTypeDenseFog-68]
	_ = x[WeatherSevereTypeDenseSmoke-69]
	_ = x[WeatherSevereTypeBlowingDust-70]
	_ = x[WeatherSevereTypeHardFreeze-71]
	_ = x[WeatherSevereTypeFreeze-72]
	_ = x[WeatherSevereTypeFrost-73]
	_ = x[WeatherSevereTypeFireWeather-74]
	_ = x[WeatherSevereTypeFlood-75]
	_ = x[WeatherSevereTypeRipTide-76]
	_ = x[WeatherSevereTypeHighSurf-77]
	_ = x[WeatherSevereTypeSmog-78]
	_ = x[WeatherSevereTypeAirQuality-79]
	_ = x[WeatherSevereTypeBriskWind-80]
	_ = x[WeatherSevereTypeAirStagnation-81]
	_ = x[WeatherSevereTypeLowWater-82]
	_ = x[WeatherSevereTypeHydrological-83]
	_ = x[WeatherSevereTypeSpecialWeather-84]
	_ = x[WeatherSevereTypeInvalid-255]
}

const (
	_WeatherSevereType_name_0 = "UnspecifiedTornadoTsunamiHurricaneExtremeWindTyphoonInlandHurricaneHurricaneForceWindWaterspoutSevereThunderstormWreckhouseWindsLesSuetesWindAvalancheFlashFloodTropicalStormInlandTropicalStormBlizzardIceStormFreezingRainDebrisFlowFlashFreezeDustStormHighWindWinterStormHeavyFreezingSprayExtremeColdWindChillColdWaveHeavySnowAlertLakeEffectBlowingSnowSnowSquallLakeEffectSnowWinterWeatherSleetSnowfallSnowAndBlowingSnowBlowingSnowSnowAlertArcticOutflowFreezingDrizzleStormStormSurgeRainfallArealFloodCoastalFloodLakeshoreFloodExcessiveHeatHeatWeatherHighHeatAndHumidityHumidexAndHealthHumidexGaleFreezingSpraySpecialMarineSquallStrongWindLakeWindMarineWeatherWindSmallCraftHazardousSeasHazardousSeasSmallCraftSmallCraftWindsSmallCraftRoughBarHighWaterLevelAshfallFreezingFogDenseFogDenseSmokeBlowingDustHardFreezeFreezeFrostFireWeatherFloodRipTideHighSurfSmogAirQualityBriskWindAirStagnationLowWaterHydrologicalSpecialWeather"
	_WeatherSevereType_name_1 = "Invalid"
)

var (
	_WeatherSevereType_index_0 = [...]uint16{0, 11, 18, 25, 34, 45, 52, 67, 85, 95, 113, 128, 141, 150, 160, 173, 192, 200, 208, 220, 230, 241, 250, 258, 269, 287, 298, 307, 315, 329, 350, 360, 374, 387, 392, 400, 418, 429, 438, 451, 466, 471, 481, 489, 499, 511, 525, 538, 542, 549, 568, 584, 591, 595, 608, 621, 627, 637, 645, 658, 662, 685, 698, 708, 723, 741, 755, 762, 773, 781, 791, 802, 812, 818, 823, 834, 839, 846, 854, 858, 868, 877, 890, 898, 910, 924}
)

func (i WeatherSevereType) String() string {
	switch {
	case 0 <= i && i <= 84:
		return _WeatherSevereType_name_0[_WeatherSevereType_index_0[i]:_WeatherSevereType_index_0[i+1]]
	case i == 255:
		return _WeatherSevereType_name_1
	default:
		return "WeatherSevereType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WeatherSeverityUnknown-0]
	_ = x[WeatherSeverityWarning-1]
	_ = x[WeatherSeverityWatch-2]
	_ = x[WeatherSeverityAdvisory-3]
	_ = x[WeatherSeverityStatement-4]
	_ = x[WeatherSeverityInvalid-255]
}

const (
	_WeatherSeverity_name_0 = "UnknownWarningWatchAdvisoryStatement"
	_WeatherSeverity_name_1 = "Invalid"
)

var (
	_WeatherSeverity_index_0 = [...]uint8{0, 7, 14, 19, 27, 36}
)

func (i WeatherSeverity) String() string {
	switch {
	case 0 <= i && i <= 4:
		return _WeatherSeverity_name_0[_WeatherSeverity_index_0[i]:_WeatherSeverity_index_0[i+1]]
	case i == 255:
		return _WeatherSeverity_name_1
	default:
		return "WeatherSeverity(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WeatherStatusClear-0]
	_ = x[WeatherStatusPartlyCloudy-1]
	_ = x[WeatherStatusMostlyCloudy-2]
	_ = x[WeatherStatusRain-3]
	_ = x[WeatherStatusSnow-4]
	_ = x[WeatherStatusWindy-5]
	_ = x[WeatherStatusThunderstorms-6]
	_ = x[WeatherStatusWintryMix-7]
	_ = x[WeatherStatusFog-8]
	_ = x[WeatherStatusHazy-11]
	_ = x[WeatherStatusHail-12]
	_ = x[WeatherStatusScatteredShowers-13]
	_ = x[WeatherStatusScatteredThunderstorms-14]
	_ = x[WeatherStatusUnknownPrecipitation-15]
	_ = x[WeatherStatusLightRain-16]
	_ = x[WeatherStatusHeavyRain-17]
	_ = x[WeatherStatusLightSnow-18]
	_ = x[WeatherStatusHeavySnow-19]
	_ = x[WeatherStatusLightRainSnow-20]
	_ = x[WeatherStatusHeavyRainSnow-21]
	_ = x[WeatherStatusCloudy-22]
	_ = x[WeatherStatusInvalid-255]
}

const (
	_WeatherStatus_name_0 = "ClearPartlyCloudyMostlyCloudyRainSnowWindyThunderstormsWintryMixFog"
	_WeatherStatus_name_1 = "HazyHailScatteredShowersScatteredThunderstormsUnknownPrecipitationLightRainHeavyRainLightSnowHeavySnowLightRainSnowHeavyRainSnowCloudy"
	_WeatherStatus_name_2 = "Invalid"
)

var (
	_WeatherStatus_index_0 = [...]uint8{0, 5, 17, 29, 33, 37, 42, 55, 64, 67}
	_WeatherStatus_index_1 = [...]uint8{0, 4, 8, 24, 46, 66, 75, 84, 93, 102, 115, 128, 134}
)

func (i WeatherStatus) String() string {
	switch {
	case 0 <= i && i <= 8:
		return _WeatherStatus_name_0[_WeatherStatus_index_0[i]:_WeatherStatus_index_0[i+1]]
	case 11 <= i && i <= 22:
		i -= 11
		return _WeatherStatus_name_1[_WeatherStatus_index_1[i]:_WeatherStatus_index_1[i+1]]
	case i == 255:
		return _WeatherStatus_name_2
	default:
		return "WeatherStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WeightCalculating-65534]
	_ = x[WeightInvalid-65535]
}

const _Weight_name = "CalculatingInvalid"

var _Weight_index = [...]uint8{0, 11, 18}

func (i Weight) String() string {
	i -= 65534
	if i >= Weight(len(_Weight_index)-1) {
		return "Weight(" + strconv.FormatInt(int64(i+65534), 10) + ")"
	}
	return _Weight_name[_Weight_index[i]:_Weight_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WktStepDurationTime-0]
	_ = x[WktStepDurationDistance-1]
	_ = x[WktStepDurationHrLessThan-2]
	_ = x[WktStepDurationHrGreaterThan-3]
	_ = x[WktStepDurationCalories-4]
	_ = x[WktStepDurationOpen-5]
	_ = x[WktStepDurationRepeatUntilStepsCmplt-6]
	_ = x[WktStepDurationRepeatUntilTime-7]
	_ = x[WktStepDurationRepeatUntilDistance-8]
	_ = x[WktStepDurationRepeatUntilCalories-9]
	_ = x[WktStepDurationRepeatUntilHrLessThan-10]
	_ = x[WktStepDurationRepeatUntilHrGreaterThan-11]
	_ = x[WktStepDurationRepeatUntilPowerLessThan-12]
	_ = x[WktStepDurationRepeatUntilPowerGreaterThan-13]
	_ = x[WktStepDurationPowerLessThan-14]
	_ = x[WktStepDurationPowerGreaterThan-15]
	_ = x[WktStepDurationTrainingPeaksTss-16]
	_ = x[WktStepDurationRepeatUntilPowerLastLapLessThan-17]
	_ = x[WktStepDurationRepeatUntilMaxPowerLastLapLessThan-18]
	_ = x[WktStepDurationPower3sLessThan-19]
	_ = x[WktStepDurationPower10sLessThan-20]
	_ = x[WktStepDurationPower30sLessThan-21]
	_ = x[WktStepDurationPower3sGreaterThan-22]
	_ = x[WktStepDurationPower10sGreaterThan-23]
	_ = x[WktStepDurationPower30sGreaterThan-24]
	_ = x[WktStepDurationPowerLapLessThan-25]
	_ = x[WktStepDurationPowerLapGreaterThan-26]
	_ = x[WktStepDurationRepeatUntilTrainingPeaksTss-27]
	_ = x[WktStepDurationRepetitionTime-28]
	_ = x[WktStepDurationReps-29]
	_ = x[WktStepDurationTimeOnly-31]
	_ = x[WktStepDurationInvalid-255]
}

const (
	_WktStepDuration_name_0 = "TimeDistanceHrLessThanHrGreaterThanCaloriesOpenRepeatUntilStepsCmpltRepeatUntilTimeRepeatUntilDistanceRepeatUntilCaloriesRepeatUntilHrLessThanRepeatUntilHrGreaterThanRepeatUntilPowerLessThanRepeatUntilPowerGreaterThanPowerLessThanPowerGreaterThanTrainingPeaksTssRepeatUntilPowerLastLapLessThanRepeatUntilMaxPowerLastLapLessThanPower3sLessThanPower10sLessThanPower30sLessThanPower3sGreaterThanPower10sGreaterThanPower30sGreaterThanPowerLapLessThanPowerLapGreaterThanRepeatUntilTrainingPeaksTssRepetitionTimeReps"
	_WktStepDuration_name_1 = "TimeOnly"
	_WktStepDuration_name_2 = "Invalid"
)

var (
	_WktStepDuration_index_0 = [...]uint16{0, 4, 12, 22, 35, 43, 47, 68, 83, 102, 121, 142, 166, 190, 217, 230, 246, 262, 293, 327, 342, 358, 374, 392, 411, 430, 446, 465, 492, 506, 510}
)

func (i WktStepDuration) String() string {
	switch {
	case 0 <= i && i <= 29:
		return _WktStepDuration_name_0[_WktStepDuration_index_0[i]:_WktStepDuration_index_0[i+1]]
	case i == 31:
		return _WktStepDuration_name_1
	case i == 255:
		return _WktStepDuration_name_2
	default:
		return "WktStepDuration(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WktStepTargetSpeed-0]
	_ = x[WktStepTargetHeartRate-1]
	_ = x[WktStepTargetOpen-2]
	_ = x[WktStepTargetCadence-3]
	_ = x[WktStepTargetPower-4]
	_ = x[WktStepTargetGrade-5]
	_ = x[WktStepTargetResistance-6]
	_ = x[WktStepTargetPower3s-7]
	_ = x[WktStepTargetPower10s-8]
	_ = x[WktStepTargetPower30s-9]
	_ = x[WktStepTargetPowerLap-10]
	_ = x[WktStepTargetSwimStroke-11]
	_ = x[WktStepTargetSpeedLap-12]
	_ = x[WktStepTargetHeartRateLap-13]
	_ = x[WktStepTargetInvalid-255]
}

const (
	_WktStepTarget_name_0 = "SpeedHeartRateOpenCadencePowerGradeResistancePower3sPower10sPower30sPowerLapSwimStrokeSpeedLapHeartRateLap"
	_WktStepTarget_name_1 = "Invalid"
)

var (
	_WktStepTarget_index_0 = [...]uint8{0, 5, 14, 18, 25, 30, 35, 45, 52, 60, 68, 76, 86, 94, 106}
)

func (i WktStepTarget) String() string {
	switch {
	case 0 <= i && i <= 13:
		return _WktStepTarget_name_0[_WktStepTarget_index_0[i]:_WktStepTarget_index_0[i+1]]
	case i == 255:
		return _WktStepTarget_name_1
	default:
		return "WktStepTarget(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WorkoutCapabilitiesInterval-1]
	_ = x[WorkoutCapabilitiesCustom-2]
	_ = x[WorkoutCapabilitiesFitnessEquipment-4]
	_ = x[WorkoutCapabilitiesFirstbeat-8]
	_ = x[WorkoutCapabilitiesNewLeaf-16]
	_ = x[WorkoutCapabilitiesTcx-32]
	_ = x[WorkoutCapabilitiesSpeed-128]
	_ = x[WorkoutCapabilitiesHeartRate-256]
	_ = x[WorkoutCapabilitiesDistance-512]
	_ = x[WorkoutCapabilitiesCadence-1024]
	_ = x[WorkoutCapabilitiesPower-2048]
	_ = x[WorkoutCapabilitiesGrade-4096]
	_ = x[WorkoutCapabilitiesResistance-8192]
	_ = x[WorkoutCapabilitiesProtected-16384]
	_ = x[WorkoutCapabilitiesInvalid-0]
}

const _WorkoutCapabilities_name = "InvalidIntervalCustomFitnessEquipmentFirstbeatNewLeafTcxSpeedHeartRateDistanceCadencePowerGradeResistanceProtected"

var _WorkoutCapabilities_map = map[WorkoutCapabilities]string{
	0:     _WorkoutCapabilities_name[0:7],
	1:     _WorkoutCapabilities_name[7:15],
	2:     _WorkoutCapabilities_name[15:21],
	4:     _WorkoutCapabilities_name[21:37],
	8:     _WorkoutCapabilities_name[37:46],
	16:    _WorkoutCapabilities_name[46:53],
	32:    _WorkoutCapabilities_name[53:56],
	128:   _WorkoutCapabilities_name[56:61],
	256:   _WorkoutCapabilities_name[61:70],
	512:   _WorkoutCapabilities_name[70:78],
	1024:  _WorkoutCapabilities_name[78:85],
	2048:  _WorkoutCapabilities_name[85:90],
	4096:  _WorkoutCapabilities_name[90:95],
	8192:  _WorkoutCapabilities_name[95:105],
	16384: _WorkoutCapabilities_name[105:114],
}

func (i WorkoutCapabilities) String() string {
	if str, ok := _WorkoutCapabilities_map[i]; ok {
		return str
	}
	return "WorkoutCapabilities(" + strconv.FormatInt(int64(i), 10) + ")"
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WorkoutEquipmentNone-0]
	_ = x[WorkoutEquipmentSwimFins-1]
	_ = x[WorkoutEquipmentSwimKickboard-2]
	_ = x[WorkoutEquipmentSwimPaddles-3]
	_ = x[WorkoutEquipmentSwimPullBuoy-4]
	_ = x[WorkoutEquipmentSwimSnorkel-5]
	_ = x[WorkoutEquipmentInvalid-255]
}

const (
	_WorkoutEquipment_name_0 = "NoneSwimFinsSwimKickboardSwimPaddlesSwimPullBuoySwimSnorkel"
	_WorkoutEquipment_name_1 = "Invalid"
)

var (
	_WorkoutEquipment_index_0 = [...]uint8{0, 4, 12, 25, 36, 48, 59}
)

func (i WorkoutEquipment) String() string {
	switch {
	case 0 <= i && i <= 5:
		return _WorkoutEquipment_name_0[_WorkoutEquipment_index_0[i]:_WorkoutEquipment_index_0[i+1]]
	case i == 255:
		return _WorkoutEquipment_name_1
	default:
		return "WorkoutEquipment(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WorkoutHrBpmOffset-100]
	_ = x[WorkoutHrInvalid-4294967295]
}

const (
	_WorkoutHr_name_0 = "BpmOffset"
	_WorkoutHr_name_1 = "Invalid"
)

func (i WorkoutHr) String() string {
	switch {
	case i == 100:
		return _WorkoutHr_name_0
	case i == 4294967295:
		return _WorkoutHr_name_1
	default:
		return "WorkoutHr(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WorkoutPowerWattsOffset-1000]
	_ = x[WorkoutPowerInvalid-4294967295]
}

const (
	_WorkoutPower_name_0 = "WattsOffset"
	_WorkoutPower_name_1 = "Invalid"
)

func (i WorkoutPower) String() string {
	switch {
	case i == 1000:
		return _WorkoutPower_name_0
	case i == 4294967295:
		return _WorkoutPower_name_1
	default:
		return "WorkoutPower(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
